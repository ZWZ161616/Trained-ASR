# nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/129.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/130.mdl 
# Started at Mon Feb 24 09:17:52 CST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/129.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/130.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.0515, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.62 0.64,0.67,0.74,0.84,0.89 0.91,0.95,0.95,0.98), mean=0.758, stddev=0.0914], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.23,0.24 0.26,0.29,0.54,0.75,0.85 0.90,0.94,0.95,1.0), mean=0.538, stddev=0.223], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.18 0.22,0.31,0.60,1.0,1.2 1.4,1.4,1.5,1.6), mean=0.665, stddev=0.375], bias-{mean,stddev}=-0.004489,0.03926, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.10,0.17 0.22,0.33,0.47,0.57), mean=0.0759, stddev=0.0949], oderiv-count=620352
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.04067, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.58,0.60 0.60,0.61,0.65,0.68,0.70 0.70,0.71,0.73,0.73), mean=0.65, stddev=0.0377], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.24,0.26 0.27,0.29,0.32,0.36,0.38 0.39,0.40,0.41,0.42), mean=0.323, stddev=0.0404], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.29 0.32,0.37,0.58,0.81,0.94 0.99,1.1,1.1,1.1), mean=0.607, stddev=0.235], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.04587, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.44,0.44,0.45 0.46,0.48,0.52,0.55,0.57 0.59,0.60,0.61,0.63), mean=0.517, stddev=0.0428], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.44,0.46 0.47,0.49,0.51,0.55,0.57 0.58,0.59,0.60,0.63), mean=0.518, stddev=0.0377], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.008,0.03 0.06,0.13,0.38,0.69,0.87 0.97,1.0,1.1,1.2), mean=0.423, stddev=0.3], bias-{mean,stddev}=-0.001461,0.0165, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=9.32e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.77,0.83,1.1 1.2,1.6,2.0,2.6,2.8 3.1,3.3,3.3,3.4), mean=2.06, stddev=0.607], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.26,0.28 0.33,0.40,0.53,0.62,0.69 0.71,0.77,0.81,0.92), mean=0.515, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.004,0.005 0.006,0.01,0.01,0.02), mean=0.00248, stddev=0.00282], oderiv-count=317760
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0344, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.49,0.50 0.50,0.51,0.54,0.58,0.59 0.61,0.63,0.65,0.66), mean=0.549, stddev=0.0397], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.22,0.22 0.24,0.25,0.27,0.30,0.31 0.33,0.34,0.36,0.38), mean=0.273, stddev=0.031], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.24,0.26 0.28,0.33,0.49,0.70,0.77 0.82,0.86,0.92,0.94), mean=0.517, stddev=0.19], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03998, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.38,0.38 0.40,0.42,0.44,0.49,0.51 0.52,0.54,0.54,0.55), mean=0.45, stddev=0.0425], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.39,0.40 0.41,0.43,0.45,0.47,0.49 0.51,0.52,0.52,0.53), mean=0.451, stddev=0.0312], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.002,0.01,0.03 0.05,0.11,0.32,0.60,0.77 0.84,0.92,0.93,1.0), mean=0.368, stddev=0.263], bias-{mean,stddev}=-0.0004855,0.01214, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.65e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.29,0.33,0.58 1.1,1.6,2.3,3.3,3.5 3.9,4.3,4.6,4.9), mean=2.37, stddev=0.999], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.03,0.04,0.11 0.23,0.34,0.53,0.67,0.76 0.91,0.96,0.97,1.1), mean=0.511, stddev=0.227]
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03227, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.42,0.46 0.47,0.48,0.51,0.55,0.56 0.57,0.57,0.58,0.60), mean=0.515, stddev=0.0396], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.21 0.22,0.23,0.26,0.28,0.29 0.30,0.31,0.32,0.34), mean=0.257, stddev=0.0262], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.24 0.26,0.31,0.45,0.66,0.74 0.79,0.82,0.85,0.86), mean=0.485, stddev=0.177], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.04032, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.37,0.39 0.40,0.41,0.45,0.49,0.52 0.53,0.54,0.54,0.57), mean=0.454, stddev=0.0456], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.40 0.42,0.43,0.45,0.48,0.49 0.51,0.53,0.53,0.53), mean=0.455, stddev=0.0311], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.01,0.03 0.05,0.11,0.32,0.62,0.76 0.85,0.94,0.98,1.0), mean=0.371, stddev=0.266], bias-{mean,stddev}=-0.000337,0.01013, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.23,0.55,0.74 1.0,1.1,2.2,3.0,3.7 4.2,4.4,4.6,5.0), mean=2.21, stddev=1.06], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.33,-0.09,-0.08,0.11 0.18,0.30,0.50,0.67,0.82 0.90,0.96,0.97,1.1), mean=0.498, stddev=0.24], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0006,0.001,0.002 0.002,0.003,0.004,0.006), mean=0.000778, stddev=0.00096], oderiv-count=457600
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03077, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.45,0.45 0.46,0.47,0.49,0.51,0.53 0.55,0.55,0.55,0.57), mean=0.491, stddev=0.029], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.20 0.21,0.22,0.24,0.27,0.28 0.29,0.30,0.30,0.31), mean=0.245, stddev=0.0272], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.22 0.24,0.29,0.43,0.63,0.70 0.73,0.79,0.81,0.85), mean=0.461, stddev=0.174], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03657, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.34 0.36,0.37,0.41,0.45,0.46 0.47,0.48,0.49,0.51), mean=0.412, stddev=0.0389], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.35,0.36 0.38,0.39,0.41,0.43,0.45 0.46,0.48,0.50,0.52), mean=0.413, stddev=0.0315], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.008,0.02 0.05,0.10,0.29,0.55,0.69 0.78,0.84,0.87,0.96), mean=0.335, stddev=0.242], bias-{mean,stddev}=0.0003511,0.01123, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.002,0.002 0.003,0.003,0.005,0.02), mean=0.000889, stddev=0.002], oderiv-count=110656
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02852, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.38,0.41 0.42,0.43,0.45,0.48,0.49 0.50,0.51,0.51,0.54), mean=0.455, stddev=0.0299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.23,0.25,0.26 0.26,0.27,0.27,0.31), mean=0.227, stddev=0.0244], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.19,0.20 0.23,0.28,0.41,0.58,0.64 0.69,0.71,0.76,0.81), mean=0.427, stddev=0.16], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03259, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.31,0.32 0.32,0.34,0.36,0.39,0.42 0.43,0.44,0.44,0.44), mean=0.367, stddev=0.0345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.31,0.31,0.32 0.33,0.34,0.37,0.39,0.40 0.41,0.42,0.43,0.44), mean=0.368, stddev=0.0269], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.006,0.02 0.04,0.09,0.26,0.50,0.61 0.71,0.75,0.76,0.81), mean=0.3, stddev=0.215], bias-{mean,stddev}=0.001371,0.008349, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.36e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.28,0.65,0.80 1.0,1.5,2.2,3.0,3.7 4.2,4.6,4.7,4.8), mean=2.29, stddev=1], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.25 0.29,0.38,0.49,0.62,0.68 0.74,0.82,0.83,1.0), mean=0.502, stddev=0.157], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.002,0.003 0.003,0.004,0.004,0.005), mean=0.00101, stddev=0.0013], oderiv-count=84096
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02738, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.38,0.40 0.41,0.41,0.44,0.46,0.47 0.48,0.48,0.48,0.49), mean=0.437, stddev=0.0259], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.26,0.27,0.27,0.29), mean=0.218, stddev=0.0232], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.19 0.22,0.26,0.39,0.55,0.61 0.66,0.71,0.72,0.74), mean=0.41, stddev=0.154], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03088, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.30,0.30 0.31,0.32,0.35,0.37,0.39 0.39,0.40,0.42,0.47), mean=0.348, stddev=0.0294], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.31 0.32,0.33,0.34,0.37,0.38 0.39,0.40,0.40,0.41), mean=0.348, stddev=0.0244], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.002,0.006,0.02 0.04,0.09,0.24,0.47,0.59 0.65,0.73,0.74,0.78), mean=0.284, stddev=0.204], bias-{mean,stddev}=-0.0003024,0.007385, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0004,0.0009,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.000875, stddev=0.000529], oderiv-count=623424
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.026, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.37 0.38,0.39,0.42,0.44,0.45 0.45,0.46,0.48,0.49), mean=0.415, stddev=0.0269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.16,0.17 0.18,0.19,0.21,0.23,0.24 0.24,0.25,0.26,0.27), mean=0.207, stddev=0.0232], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.18 0.20,0.24,0.36,0.53,0.59 0.62,0.68,0.68,0.70), mean=0.388, stddev=0.15], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02986, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.29 0.30,0.31,0.33,0.36,0.37 0.38,0.39,0.40,0.42), mean=0.337, stddev=0.0291], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.30 0.31,0.32,0.34,0.36,0.37 0.38,0.39,0.39,0.40), mean=0.337, stddev=0.0241], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.009,0.02 0.04,0.08,0.23,0.45,0.57 0.65,0.70,0.71,0.77), mean=0.273, stddev=0.198], bias-{mean,stddev}=-0.000558,0.007159, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02654, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.38,0.38 0.39,0.40,0.42,0.44,0.46 0.46,0.46,0.48,0.48), mean=0.424, stddev=0.0241], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.16 0.18,0.19,0.21,0.23,0.24 0.25,0.26,0.27,0.27), mean=0.211, stddev=0.0255], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.18 0.20,0.24,0.38,0.54,0.60 0.64,0.68,0.69,0.69), mean=0.396, stddev=0.152], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03027, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.27,0.28 0.29,0.31,0.35,0.37,0.38 0.38,0.40,0.40,0.42), mean=0.341, stddev=0.0337], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.30,0.31 0.31,0.32,0.34,0.36,0.37 0.38,0.39,0.39,0.40), mean=0.342, stddev=0.022], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.02 0.04,0.08,0.24,0.46,0.58 0.64,0.71,0.73,0.78), mean=0.277, stddev=0.201], bias-{mean,stddev}=0.0002547,0.006559, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.18e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.2,-6.7,-6.2,-5.2 -3.6,-1.6,1.5,4.7,5.7 6.5,7.6,7.8,13), mean=1.47, stddev=3.64], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-1.1,-1.1,-0.58 -0.33,-0.18,0.35,0.74,1.0 1.5,1.7,1.8,2.1), mean=0.323, stddev=0.611], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0007,0.003,0.003 0.003,0.004,0.004,0.006), mean=0.00118, stddev=0.00128], oderiv-count=103680
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02696, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.37,0.39 0.39,0.40,0.43,0.45,0.47 0.48,0.48,0.48,0.49), mean=0.43, stddev=0.0278], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.15,0.16 0.17,0.19,0.22,0.24,0.25 0.26,0.27,0.28,0.29), mean=0.214, stddev=0.0289], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.17,0.19 0.20,0.25,0.38,0.55,0.62 0.66,0.69,0.72,0.74), mean=0.401, stddev=0.159], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03161, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.26,0.30 0.32,0.33,0.35,0.39,0.40 0.41,0.43,0.43,0.45), mean=0.356, stddev=0.0374], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.32,0.33,0.35,0.38,0.40 0.41,0.42,0.43,0.46), mean=0.356, stddev=0.0314], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.005,0.009,0.02 0.04,0.08,0.23,0.48,0.62 0.68,0.74,0.75,0.79), mean=0.288, stddev=0.212], bias-{mean,stddev}=0.0002215,0.007048, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.003,0.003 0.004,0.004,0.004,0.005), mean=0.00114, stddev=0.00135], oderiv-count=95872
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02834, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.39 0.41,0.42,0.45,0.48,0.49 0.50,0.51,0.51,0.51), mean=0.452, stddev=0.0323], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.18,0.20,0.23,0.25,0.27 0.27,0.29,0.29,0.31), mean=0.224, stddev=0.034], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.18 0.21,0.25,0.40,0.58,0.64 0.70,0.72,0.78,0.80), mean=0.42, stddev=0.171], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03332, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.29,0.31 0.32,0.34,0.37,0.40,0.43 0.45,0.46,0.47,0.52), mean=0.374, stddev=0.0445], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.31,0.33 0.34,0.35,0.37,0.40,0.41 0.42,0.44,0.44,0.45), mean=0.376, stddev=0.0283], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.003,0.008,0.02 0.04,0.09,0.26,0.49,0.62 0.71,0.78,0.80,0.88), mean=0.305, stddev=0.221], bias-{mean,stddev}=0.0001256,0.007666, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.52e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-21,-18,-14,-10 -8.3,-3.6,2.3,7.8,12 14,18,18,26), mean=2.14, stddev=7.72], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-3.6,-2.9,-2.3 -1.7,-0.91,0.13,1.6,2.1 2.5,2.9,3.0,3.7), mean=0.174, stddev=1.5], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.005,0.007 0.007,0.008,0.009,0.01), mean=0.00216, stddev=0.00281], oderiv-count=30336
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02925, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.41 0.42,0.44,0.47,0.49,0.51 0.52,0.53,0.54,0.55), mean=0.467, stddev=0.0348], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.17,0.18 0.19,0.21,0.23,0.26,0.27 0.28,0.29,0.29,0.30), mean=0.232, stddev=0.0311], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.20 0.22,0.26,0.41,0.59,0.68 0.73,0.76,0.77,0.84), mean=0.434, stddev=0.176], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03478, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.31 0.32,0.35,0.39,0.43,0.45 0.46,0.47,0.47,0.50), mean=0.391, stddev=0.0462], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.35 0.36,0.37,0.39,0.41,0.43 0.44,0.45,0.46,0.46), mean=0.393, stddev=0.0274], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.003,0.006,0.02 0.05,0.10,0.27,0.53,0.66 0.75,0.81,0.83,0.93), mean=0.317, stddev=0.234], bias-{mean,stddev}=0.001129,0.01041, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03165, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.44,0.46 0.47,0.48,0.51,0.54,0.55 0.56,0.56,0.56,0.57), mean=0.505, stddev=0.0316], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.21,0.22,0.25,0.28,0.30 0.31,0.32,0.33,0.34), mean=0.251, stddev=0.0329], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.19,0.21 0.23,0.28,0.44,0.63,0.73 0.79,0.84,0.85,0.89), mean=0.47, stddev=0.189], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0384, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.31,0.33,0.36 0.36,0.39,0.44,0.47,0.50 0.50,0.53,0.54,0.55), mean=0.432, stddev=0.0492], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.38 0.39,0.41,0.43,0.46,0.47 0.48,0.51,0.51,0.52), mean=0.433, stddev=0.0331], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.005,0.01,0.03 0.05,0.11,0.29,0.58,0.74 0.84,0.93,0.95,0.99), mean=0.349, stddev=0.259], bias-{mean,stddev}=0.001363,0.014, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.005, max-change=0.75, params-rms=0.03723, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.37,0.37 0.38,0.40,0.42,0.44,0.45 0.45,0.46,0.50,0.51), mean=0.42, stddev=0.028], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.26,0.27,0.30,0.32,0.34 0.35,0.35,0.36,0.37), mean=0.296, stddev=0.0302], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.14 0.18,0.22,0.36,0.55,0.62 0.66,0.70,0.72,0.77), mean=0.385, stddev=0.17], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.06127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.40,0.40 0.41,0.44,0.48,0.53,0.56 0.57,0.58,0.58,0.64), mean=0.487, stddev=0.0528], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.57,0.60,0.62 0.63,0.64,0.69,0.73,0.74 0.75,0.79,0.80,0.81), mean=0.691, stddev=0.0496], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.21 0.26,0.34,0.58,0.89,1.0 1.1,1.1,1.2,1.2), mean=0.631, stddev=0.287], bias-{mean,stddev}=0.00204,0.01962, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, params-rms=0.05358, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.55 0.55,0.58,0.60,0.63,0.65 0.66,0.68,0.68,0.69), mean=0.605, stddev=0.0365], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.34,0.37 0.38,0.39,0.42,0.46,0.48 0.50,0.50,0.50,0.52), mean=0.427, stddev=0.0415], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.17,0.20 0.26,0.32,0.53,0.78,0.88 0.95,0.98,1.0,1.1), mean=0.557, stddev=0.24], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00588494, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.02988, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.003,0.005,0.02 0.03,0.05,0.14,0.32,0.41 0.49,0.56,0.59,0.81), mean=0.186, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.8,1.8,1.9,2.0,2.0 2.0,2.1,2.1,2.1), mean=1.9, stddev=0.0821], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.63,1.1 1.2,1.3,1.8,2.3,2.5 2.6,2.6,2.7,2.8), mean=1.83, stddev=0.514], bias-{mean,stddev}=-7.035e-06,0.05192, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.03325, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.22,0.23,0.26,0.29,0.31 0.32,0.33,0.33,0.43), mean=0.264, stddev=0.0363], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.33 0.35,0.36,0.38,0.40,0.40 0.40,0.42,0.42,0.42), mean=0.376, stddev=0.0217], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.11,0.13 0.15,0.19,0.32,0.49,0.55 0.60,0.62,0.63,0.65), mean=0.344, stddev=0.152], bias-{mean,stddev}=-0.0001334,0.01316, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, params-rms=0.02078, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.21 0.21,0.22,0.23,0.24,0.25 0.25,0.27,0.28,0.28), mean=0.235, stddev=0.0154], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.15,0.16,0.18,0.19 0.20,0.22,0.22,0.25), mean=0.165, stddev=0.0224], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.10,0.12,0.20,0.30,0.34 0.37,0.39,0.40,0.42), mean=0.216, stddev=0.0923], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0294247, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.02645, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.003,0.007,0.02 0.04,0.06,0.14,0.28,0.35 0.42,0.48,0.52,0.74), mean=0.17, stddev=0.126], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.6,1.7,1.7,1.8 1.8,1.8,1.8,1.8), mean=1.68, stddev=0.0622], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.96,1.0 1.1,1.2,1.6,2.0,2.2 2.3,2.3,2.3,2.4), mean=1.63, stddev=0.403], bias-{mean,stddev}=1.486e-08,0.01994, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0003,0.003,0.004 0.006,0.008,0.009,0.06), mean=0.0014, stddev=0.00234], oderiv-count=11968

LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.6535 tdnnf2.linear:5.20617 tdnnf2.affine:5.87382 tdnnf3.linear:4.40275 tdnnf3.affine:5.11969 tdnnf4.linear:4.13016 tdnnf4.affine:5.16252 tdnnf5.linear:3.93813 tdnnf5.affine:4.68255 tdnnf6.linear:3.65084 tdnnf6.affine:4.17269 tdnnf7.linear:3.50484 tdnnf7.affine:3.95324 tdnnf8.linear:3.32747 tdnnf8.affine:3.82344 tdnnf9.linear:3.39687 tdnnf9.affine:3.87511 tdnnf10.linear:3.45024 tdnnf10.affine:4.04643 tdnnf11.linear:3.6276 tdnnf11.affine:4.26558 tdnnf12.linear:3.74451 tdnnf12.affine:4.45352 tdnnf13.linear:4.05168 tdnnf13.affine:4.91747 prefinal-l:3.36963 prefinal-chain.affine:5.5497 prefinal-chain.linear:4.84928 output.affine:15.5458 prefinal-xent.affine:3.01355 prefinal-xent.linear:1.88045 output-xent.affine:13.5076 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.0075 tdnnf2.linear:17.2173 tdnnf2.affine:17.2232 tdnnf3.linear:14.9065 tdnnf3.affine:14.9469 tdnnf4.linear:13.8766 tdnnf4.affine:14.7705 tdnnf5.linear:13.2077 tdnnf5.affine:13.5862 tdnnf6.linear:12.4672 tdnnf6.affine:12.2748 tdnnf7.linear:12.6704 tdnnf7.affine:12.127 tdnnf8.linear:13.159 tdnnf8.affine:12.2918 tdnnf9.linear:13.3493 tdnnf9.affine:12.378 tdnnf10.linear:13.8726 tdnnf10.affine:12.6993 tdnnf11.linear:13.3217 tdnnf11.affine:12.3658 tdnnf12.linear:12.9759 tdnnf12.affine:12.1752 tdnnf13.linear:13.3258 tdnnf13.affine:12.352 prefinal-l:11.5719 prefinal-chain.affine:19.5513 prefinal-chain.linear:26.3394 output.affine:117.6 prefinal-xent.affine:14.483 prefinal-xent.linear:13.8811 output-xent.affine:95.957 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.345414 tdnnf2.linear:0.300933 tdnnf2.affine:0.339985 tdnnf3.linear:0.294471 tdnnf3.affine:0.340861 tdnnf4.linear:0.297479 tdnnf4.affine:0.349546 tdnnf5.linear:0.297323 tdnnf5.affine:0.343499 tdnnf6.linear:0.292573 tdnnf6.affine:0.340255 tdnnf7.linear:0.27607 tdnnf7.affine:0.325582 tdnnf8.linear:0.252682 tdnnf8.affine:0.311415 tdnnf9.linear:0.254356 tdnnf9.affine:0.313068 tdnnf10.linear:0.249035 tdnnf10.affine:0.318169 tdnnf11.linear:0.271371 tdnnf11.affine:0.343925 tdnnf12.linear:0.288599 tdnnf12.affine:0.36664 tdnnf13.linear:0.303822 tdnnf13.affine:0.398256 prefinal-l:0.2897 prefinal-chain.affine:0.282807 prefinal-chain.linear:0.184473 output.affine:0.132399 prefinal-xent.affine:0.207524 prefinal-xent.linear:0.135378 output-xent.affine:0.140701 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 09:17:56 CST 2020, elapsed time 4 seconds
