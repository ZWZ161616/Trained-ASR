# nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/179.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/180.mdl 
# Started at Mon Feb 24 10:31:26 CST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/179.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/180.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.05914, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.67,0.68,0.69 0.71,0.76,0.85,0.98,1.0 1.1,1.1,1.1,1.2), mean=0.869, stddev=0.122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.31 0.33,0.36,0.61,0.88,0.95 1.0,1.0,1.1,1.1), mean=0.626, stddev=0.237], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.22 0.25,0.35,0.67,1.1,1.4 1.5,1.7,1.7,1.8), mean=0.767, stddev=0.426], bias-{mean,stddev}=-0.003921,0.04301, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.89e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-3.1,-3.0,-2.7 -2.0,-1.3,-0.09,0.72,1.2 1.7,2.3,2.4,5.1), mean=-0.195, stddev=1.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.5,-6.4,-4.8,-3.9 -2.8,-1.8,-0.06,1.5,2.5 3.3,4.4,4.6,5.3), mean=-0.121, stddev=2.21]
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03907, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.53,0.54 0.56,0.57,0.62,0.66,0.67 0.69,0.72,0.73,0.75), mean=0.623, stddev=0.05], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.25 0.27,0.28,0.31,0.34,0.36 0.37,0.40,0.40,0.43), mean=0.31, stddev=0.0382], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.25,0.29 0.31,0.37,0.54,0.77,0.89 0.95,1.0,1.1,1.1), mean=0.585, stddev=0.222], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.04393, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.40,0.42 0.44,0.46,0.50,0.52,0.54 0.56,0.57,0.58,0.60), mean=0.495, stddev=0.0413], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.45 0.45,0.46,0.49,0.53,0.54 0.55,0.57,0.57,0.58), mean=0.496, stddev=0.0354], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.004,0.009,0.03 0.06,0.13,0.36,0.69,0.81 0.92,0.97,1.0,1.1), mean=0.406, stddev=0.287], bias-{mean,stddev}=0.001773,0.01607, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.06e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-11,-10,-8.0 -4.2,-2.7,0.48,4.5,6.5 8.0,11,11,12), mean=0.876, stddev=4.67], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.3,-2.1,-2.0,-1.6 -1.0,-0.32,0.53,1.2,2.1 2.5,3.3,4.0,4.2), mean=0.54, stddev=1.26]
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03297, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.45,0.45 0.47,0.49,0.53,0.56,0.58 0.60,0.61,0.62,0.64), mean=0.526, stddev=0.0445], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.22 0.23,0.24,0.26,0.29,0.30 0.31,0.32,0.33,0.36), mean=0.262, stddev=0.028], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.23 0.25,0.29,0.46,0.66,0.75 0.84,0.86,0.88,0.90), mean=0.491, stddev=0.193], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03911, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.38 0.40,0.41,0.44,0.47,0.49 0.50,0.52,0.52,0.56), mean=0.441, stddev=0.04], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.39 0.40,0.42,0.44,0.46,0.48 0.50,0.50,0.51,0.54), mean=0.441, stddev=0.0315], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.001,0.005,0.03 0.05,0.11,0.31,0.60,0.74 0.82,0.89,0.90,0.99), mean=0.36, stddev=0.257], bias-{mean,stddev}=-0.0004804,0.0106, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.4e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.57,-0.17,0.51 0.74,1.1,1.9,2.7,3.1 3.2,3.8,3.9,4.2), mean=1.92, stddev=0.929], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.004,0.04,0.13,0.22 0.29,0.39,0.51,0.63,0.72 0.79,0.83,0.97,1.0), mean=0.511, stddev=0.174], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.001,0.002 0.003,0.003,0.003,0.008), mean=0.000597, stddev=0.0011], oderiv-count=349056
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03207, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.44 0.46,0.47,0.50,0.54,0.56 0.58,0.62,0.68,0.68), mean=0.511, stddev=0.0511], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.21 0.22,0.23,0.25,0.28,0.29 0.30,0.31,0.32,0.35), mean=0.255, stddev=0.0284], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.20,0.21 0.24,0.28,0.44,0.65,0.76 0.80,0.84,0.85,0.92), mean=0.475, stddev=0.193], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03735, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.35 0.36,0.39,0.42,0.46,0.48 0.49,0.50,0.50,0.52), mean=0.42, stddev=0.0424], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.37 0.37,0.39,0.42,0.45,0.46 0.47,0.49,0.49,0.50), mean=0.421, stddev=0.0332], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.01,0.02 0.05,0.10,0.29,0.57,0.71 0.80,0.88,0.89,0.92), mean=0.343, stddev=0.247], bias-{mean,stddev}=-0.002119,0.01012, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.8e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-10,-9.2,-6.6 -6.0,-3.7,0.75,6.6,9.1 10,11,11,14), mean=1.27, stddev=5.43], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.2,-2.8,-1.9,-1.1 -0.64,-0.24,0.53,1.4,2.1 2.6,2.9,3.1,4.6), mean=0.6, stddev=1.18], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.0009,0.001 0.002,0.002,0.002,0.004), mean=0.000484, stddev=0.000701], oderiv-count=457600
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02992, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.41,0.41 0.44,0.44,0.48,0.50,0.52 0.54,0.55,0.56,0.56), mean=0.477, stddev=0.0368], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.20,0.21,0.24,0.26,0.27 0.28,0.30,0.30,0.32), mean=0.238, stddev=0.0273], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.19,0.20 0.23,0.27,0.42,0.61,0.68 0.74,0.80,0.82,0.85), mean=0.445, stddev=0.177], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03426, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.33 0.34,0.36,0.38,0.42,0.43 0.45,0.46,0.46,0.50), mean=0.386, stddev=0.0379], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.33,0.34 0.35,0.36,0.38,0.41,0.42 0.43,0.44,0.45,0.47), mean=0.387, stddev=0.0278], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.01,0.03 0.05,0.10,0.27,0.51,0.66 0.72,0.80,0.81,0.86), mean=0.315, stddev=0.226], bias-{mean,stddev}=6.458e-06,0.009246, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=9.48e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-7.8,-7.5,-5.5 -4.0,-2.2,1.8,6.0,8.2 10,12,12,14), mean=2.12, stddev=4.91], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.9,-1.4,-0.84 -0.63,-0.22,0.54,1.1,1.5 2.0,2.2,2.3,3.4), mean=0.502, stddev=0.878], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.002,0.003 0.003,0.004,0.006,0.02), mean=0.00106, stddev=0.00189], oderiv-count=47424
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02665, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.38 0.39,0.40,0.42,0.45,0.47 0.48,0.49,0.50,0.50), mean=0.425, stddev=0.034], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.17 0.18,0.19,0.21,0.23,0.24 0.25,0.26,0.28,0.28), mean=0.212, stddev=0.0244], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.18 0.20,0.24,0.37,0.54,0.61 0.67,0.71,0.73,0.74), mean=0.397, stddev=0.155], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02982, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.29,0.31,0.33,0.36,0.37 0.39,0.41,0.41,0.46), mean=0.336, stddev=0.0324], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.30 0.31,0.31,0.34,0.36,0.36 0.37,0.38,0.39,0.41), mean=0.336, stddev=0.0243], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.005,0.008,0.02 0.04,0.09,0.24,0.46,0.57 0.64,0.70,0.71,0.77), mean=0.274, stddev=0.197], bias-{mean,stddev}=-0.0007318,0.007953, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02551, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.37 0.38,0.38,0.41,0.43,0.44 0.44,0.45,0.45,0.46), mean=0.407, stddev=0.0252], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.17 0.17,0.18,0.20,0.23,0.23 0.24,0.25,0.26,0.27), mean=0.203, stddev=0.0245], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.17 0.20,0.23,0.36,0.51,0.59 0.64,0.66,0.68,0.69), mean=0.38, stddev=0.148], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02898, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.27 0.29,0.30,0.33,0.35,0.37 0.37,0.38,0.38,0.40), mean=0.326, stddev=0.0325], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.29 0.30,0.31,0.32,0.34,0.36 0.37,0.39,0.39,0.40), mean=0.327, stddev=0.0265], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.009,0.02 0.03,0.08,0.23,0.44,0.55 0.61,0.68,0.68,0.74), mean=0.265, stddev=0.193], bias-{mean,stddev}=-0.001556,0.006591, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0006,0.002,0.002 0.003,0.003,0.003,0.006), mean=0.000999, stddev=0.0011], oderiv-count=134464
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02498, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.35,0.35 0.36,0.38,0.39,0.42,0.44 0.45,0.46,0.46,0.48), mean=0.399, stddev=0.0296], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.17,0.18,0.20,0.22,0.23 0.24,0.25,0.26,0.26), mean=0.198, stddev=0.0234], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.16 0.18,0.23,0.34,0.51,0.58 0.61,0.65,0.65,0.67), mean=0.372, stddev=0.147], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02806, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.23,0.26 0.27,0.28,0.32,0.34,0.36 0.36,0.38,0.38,0.39), mean=0.316, stddev=0.0342], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.28 0.29,0.30,0.32,0.33,0.34 0.36,0.37,0.37,0.42), mean=0.316, stddev=0.0246], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.01,0.02 0.04,0.08,0.21,0.43,0.54 0.60,0.66,0.68,0.72), mean=0.257, stddev=0.187], bias-{mean,stddev}=-0.0008413,0.006292, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02543, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.37 0.37,0.38,0.40,0.43,0.43 0.44,0.45,0.46,0.46), mean=0.406, stddev=0.0248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.16 0.17,0.18,0.20,0.22,0.23 0.24,0.25,0.26,0.28), mean=0.202, stddev=0.0261], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.18 0.19,0.22,0.35,0.53,0.58 0.62,0.64,0.66,0.71), mean=0.379, stddev=0.148], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0291, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.27 0.29,0.30,0.33,0.35,0.37 0.38,0.40,0.41,0.42), mean=0.328, stddev=0.0327], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.29 0.30,0.31,0.32,0.35,0.36 0.37,0.38,0.38,0.40), mean=0.328, stddev=0.0241], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.002,0.006,0.02 0.04,0.07,0.22,0.44,0.56 0.62,0.69,0.71,0.76), mean=0.264, stddev=0.197], bias-{mean,stddev}=-0.0004904,0.005482, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0259, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.37,0.38 0.39,0.39,0.41,0.43,0.44 0.45,0.46,0.46,0.48), mean=0.414, stddev=0.0236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.16 0.17,0.18,0.20,0.23,0.24 0.25,0.26,0.27,0.29), mean=0.205, stddev=0.0281], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.16,0.18 0.20,0.23,0.36,0.53,0.60 0.63,0.67,0.69,0.73), mean=0.385, stddev=0.152], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0309, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.26,0.28 0.30,0.32,0.35,0.37,0.39 0.41,0.43,0.44,0.46), mean=0.348, stddev=0.0384], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.30,0.31 0.31,0.32,0.35,0.37,0.38 0.39,0.40,0.41,0.42), mean=0.349, stddev=0.0261], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.006,0.01,0.02 0.04,0.08,0.23,0.46,0.59 0.66,0.74,0.74,0.82), mean=0.282, stddev=0.207], bias-{mean,stddev}=0.000577,0.006494, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.11e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.7,-9.5,-8.8,-5.7 -3.7,-1.6,1.5,5.2,6.9 8.1,10,12,16), mean=1.64, stddev=4.41], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.1,-1.1,-0.72 -0.38,-0.05,0.45,1.0,1.3 1.4,1.7,1.8,2.3), mean=0.465, stddev=0.684], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0008,0.003,0.003 0.004,0.004,0.004,0.004), mean=0.00128, stddev=0.0014], oderiv-count=95872
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02696, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.39 0.39,0.40,0.43,0.45,0.47 0.48,0.49,0.50,0.50), mean=0.43, stddev=0.0323], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.16 0.18,0.19,0.22,0.24,0.25 0.26,0.27,0.27,0.28), mean=0.214, stddev=0.0281], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.18 0.21,0.24,0.38,0.54,0.61 0.66,0.72,0.72,0.77), mean=0.401, stddev=0.159], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0321, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.25,0.29 0.32,0.33,0.37,0.39,0.40 0.41,0.42,0.43,0.45), mean=0.361, stddev=0.0389], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.32 0.33,0.34,0.36,0.38,0.40 0.40,0.41,0.41,0.42), mean=0.362, stddev=0.0257], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.003,0.009,0.02 0.04,0.09,0.25,0.49,0.60 0.70,0.76,0.77,0.82), mean=0.294, stddev=0.213], bias-{mean,stddev}=0.0005535,0.008512, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.04e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.9,-5.3,-4.7,-3.9 -2.2,-0.45,2.0,4.5,5.5 6.9,8.4,8.6,9.4), mean=2.02, stddev=3.15], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-1.0,-0.99,-0.60 -0.43,-0.13,0.43,0.86,1.1 1.4,1.6,1.8,2.3), mean=0.385, stddev=0.623]
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02801, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.42 0.42,0.43,0.44,0.47,0.48 0.48,0.49,0.49,0.49), mean=0.448, stddev=0.0224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.16,0.17 0.18,0.20,0.22,0.25,0.26 0.27,0.28,0.29,0.30), mean=0.222, stddev=0.0299], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.19 0.20,0.25,0.39,0.58,0.64 0.69,0.73,0.75,0.77), mean=0.415, stddev=0.168], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03398, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.32 0.34,0.34,0.38,0.41,0.44 0.44,0.45,0.46,0.51), mean=0.382, stddev=0.0406], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.35,0.36,0.38,0.40,0.42 0.43,0.44,0.44,0.45), mean=0.384, stddev=0.0264], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.007,0.01,0.02 0.05,0.10,0.26,0.51,0.65 0.75,0.83,0.83,0.87), mean=0.31, stddev=0.227], bias-{mean,stddev}=-0.0004034,0.00904, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03166, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.45,0.46 0.46,0.48,0.50,0.53,0.55 0.56,0.57,0.60,0.60), mean=0.506, stddev=0.0333], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.23,0.25,0.28,0.28 0.30,0.31,0.32,0.36), mean=0.252, stddev=0.0299], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.20,0.21 0.24,0.28,0.44,0.63,0.72 0.79,0.84,0.89,0.92), mean=0.47, stddev=0.19], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03842, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.35,0.37 0.38,0.41,0.43,0.47,0.48 0.49,0.50,0.50,0.55), mean=0.433, stddev=0.039], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.38,0.39 0.39,0.41,0.43,0.46,0.47 0.48,0.50,0.51,0.51), mean=0.434, stddev=0.0286], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.008,0.008,0.03 0.05,0.11,0.29,0.57,0.73 0.82,0.89,0.92,1.0), mean=0.352, stddev=0.255], bias-{mean,stddev}=-0.001669,0.01396, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.62e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.6,-7.5,-7.1,-4.5 -3.3,-0.89,2.6,6.4,7.4 8.5,11,12,14), mean=2.58, stddev=4.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-2.6,-2.5,-1.6 -1.0,-0.46,0.39,1.4,2.0 2.4,2.9,3.2,5.0), mean=0.48, stddev=1.28]
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.005, max-change=0.75, params-rms=0.04712, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.46,0.46 0.48,0.49,0.53,0.57,0.59 0.59,0.60,0.61,0.64), mean=0.532, stddev=0.0402], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.30,0.32 0.33,0.34,0.37,0.40,0.42 0.45,0.46,0.46,0.49), mean=0.375, stddev=0.0389], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.18 0.20,0.26,0.46,0.71,0.79 0.84,0.88,0.90,0.92), mean=0.486, stddev=0.218], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.05701, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.38 0.39,0.41,0.45,0.49,0.51 0.53,0.56,0.56,0.59), mean=0.454, stddev=0.0483], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.56,0.58 0.59,0.61,0.64,0.68,0.70 0.72,0.73,0.73,0.75), mean=0.643, stddev=0.045], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.19,0.21 0.26,0.33,0.55,0.85,0.96 1.0,1.1,1.1,1.1), mean=0.588, stddev=0.265], bias-{mean,stddev}=0.0008317,0.01777, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.00958, stddev=0.00822], oderiv-count=19584
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, params-rms=0.06236, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.63 0.65,0.67,0.70,0.74,0.75 0.79,0.79,0.79,0.81), mean=0.704, stddev=0.0453], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.39,0.42 0.43,0.45,0.49,0.54,0.56 0.57,0.60,0.61,0.65), mean=0.496, stddev=0.0509], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.17,0.22 0.29,0.37,0.62,0.88,1.0 1.1,1.2,1.2,1.3), mean=0.645, stddev=0.286], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00408331, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.02971, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.003,0.006,0.02 0.03,0.05,0.14,0.31,0.41 0.48,0.55,0.60,0.75), mean=0.185, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.9,2.0,2.0 2.0,2.1,2.1,2.2), mean=1.89, stddev=0.0949], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.70,1.2 1.2,1.3,1.8,2.3,2.4 2.5,2.6,2.6,2.7), mean=1.82, stddev=0.492], bias-{mean,stddev}=-6.82e-06,0.05151, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.03106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.19,0.20 0.21,0.22,0.24,0.27,0.29 0.29,0.31,0.31,0.33), mean=0.247, stddev=0.0311], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.31,0.31 0.32,0.32,0.35,0.37,0.38 0.39,0.40,0.40,0.40), mean=0.35, stddev=0.0259], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.12 0.15,0.18,0.30,0.46,0.52 0.55,0.59,0.60,0.61), mean=0.322, stddev=0.14], bias-{mean,stddev}=-0.0005621,0.01169, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.85e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.59,-0.45,0.16 0.33,0.60,1.3,2.0,2.4 2.7,3.3,3.7,4.8), mean=1.34, stddev=0.887], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.15,0.22 0.27,0.35,0.50,0.62,0.75 0.86,0.92,0.93,1.2), mean=0.506, stddev=0.194]
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, params-rms=0.02084, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.21 0.21,0.22,0.24,0.25,0.25 0.25,0.26,0.26,0.27), mean=0.235, stddev=0.0172], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.14,0.15,0.16,0.18,0.19 0.20,0.21,0.21,0.22), mean=0.166, stddev=0.0198], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.09 0.10,0.12,0.21,0.31,0.34 0.36,0.39,0.40,0.42), mean=0.217, stddev=0.0927], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0204165, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.02516, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.003,0.007,0.02 0.04,0.05,0.13,0.27,0.34 0.39,0.46,0.49,0.65), mean=0.161, stddev=0.12], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.5,1.6,1.6,1.6,1.7 1.7,1.7,1.7,1.8), mean=1.6, stddev=0.0658], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.86,0.89,0.96 1.0,1.2,1.5,1.9,2.1 2.1,2.2,2.2,2.3), mean=1.55, stddev=0.389], bias-{mean,stddev}=1.947e-09,0.01988, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0003,0.002,0.004 0.005,0.006,0.007,0.06), mean=0.00114, stddev=0.00195], oderiv-count=20672

LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.93628 tdnnf2.linear:5.00133 tdnnf2.affine:5.6257 tdnnf3.linear:4.21977 tdnnf3.affine:5.00737 tdnnf4.linear:4.10553 tdnnf4.affine:4.78256 tdnnf5.linear:3.83036 tdnnf5.affine:4.38697 tdnnf6.linear:3.41124 tdnnf6.affine:3.8175 tdnnf7.linear:3.26521 tdnnf7.affine:3.71024 tdnnf8.linear:3.19731 tdnnf8.affine:3.59225 tdnnf9.linear:3.25481 tdnnf9.affine:3.72496 tdnnf10.linear:3.31513 tdnnf10.affine:3.95617 tdnnf11.linear:3.45078 tdnnf11.affine:4.11004 tdnnf12.linear:3.5847 tdnnf12.affine:4.35124 tdnnf13.linear:4.05294 tdnnf13.affine:4.9208 prefinal-l:4.26501 prefinal-chain.affine:5.16426 prefinal-chain.linear:5.64376 output.affine:15.4599 prefinal-xent.affine:2.81419 prefinal-xent.linear:1.88625 output-xent.affine:12.854 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.1377 tdnnf2.linear:16.2761 tdnnf2.affine:16.0384 tdnnf3.linear:14.0392 tdnnf3.affine:14.3461 tdnnf4.linear:13.654 tdnnf4.affine:14.0186 tdnnf5.linear:12.6051 tdnnf5.affine:12.7462 tdnnf6.linear:11.8818 tdnnf6.affine:11.5113 tdnnf7.linear:12.0076 tdnnf7.affine:11.5184 tdnnf8.linear:12.4245 tdnnf8.affine:11.6387 tdnnf9.linear:12.9244 tdnnf9.affine:11.8567 tdnnf10.linear:13.1225 tdnnf10.affine:12.0012 tdnnf11.linear:12.907 tdnnf11.affine:11.8587 tdnnf12.linear:12.7755 tdnnf12.affine:11.9162 tdnnf13.linear:13.4725 tdnnf13.affine:12.489 prefinal-l:12.2139 prefinal-chain.affine:18.4805 prefinal-chain.linear:27.4527 output.affine:122.211 prefinal-xent.affine:13.9036 prefinal-xent.linear:13.6394 output-xent.affine:94.5187 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.382192 tdnnf2.linear:0.309041 tdnnf2.affine:0.353236 tdnnf3.linear:0.30143 tdnnf3.affine:0.350917 tdnnf4.linear:0.302321 tdnnf4.affine:0.341986 tdnnf5.linear:0.304551 tdnnf5.affine:0.34363 tdnnf6.linear:0.287372 tdnnf6.affine:0.331385 tdnnf7.linear:0.271582 tdnnf7.affine:0.321357 tdnnf8.linear:0.256696 tdnnf8.affine:0.308134 tdnnf9.linear:0.251666 tdnnf9.affine:0.313299 tdnnf10.linear:0.252566 tdnnf10.affine:0.329525 tdnnf11.linear:0.267913 tdnnf11.affine:0.346404 tdnnf12.linear:0.279959 tdnnf12.affine:0.364755 tdnnf13.linear:0.300407 tdnnf13.affine:0.393742 prefinal-l:0.344381 prefinal-chain.affine:0.277847 prefinal-chain.linear:0.204638 output.affine:0.126443 prefinal-xent.affine:0.20211 prefinal-xent.linear:0.138304 output-xent.affine:0.136174 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 10:31:29 CST 2020, elapsed time 3 seconds
