# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/251.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/250.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/251.mdl 
# Started at Mon Feb 24 12:17:22 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/251.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.3,1.3,1.4 1.5,1.7,1.9,2.3,2.7 2.9,3.0,3.1,3.3), mean=2.01, stddev=0.447], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.55,0.65 0.71,0.84,1.4,1.9,2.3 2.5,2.7,2.8,3.2), mean=1.46, stddev=0.586], bias-{mean,stddev}=-0.1279,0.1858, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.78e+06, self-repaired-proportion=0.021609, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.01,0.02 0.03,0.05,0.10,0.18,0.22 0.27,0.29,0.30,0.33), mean=0.116, stddev=0.0768], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.05,0.09 0.10,0.18,0.32,0.50,0.64 0.69,0.74,0.76,0.80), mean=0.349, stddev=0.189], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.05,0.05 0.06,0.07,0.08,0.12), mean=0.0376, stddev=0.0164], oderiv-count=1.30044e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.01,0.02 0.03,0.05,0.09,0.18,0.22 0.26,0.29,0.29,0.33), mean=0.115, stddev=0.0765], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.06,0.09 0.11,0.13,0.20,0.26,0.28 0.30,0.31,0.32,0.32), mean=0.195, stddev=0.0676]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.206349, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1165, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.86, stddev=0.00483], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.70,0.72,0.75 0.80,0.83,0.93,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.926, stddev=0.104], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1164, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.99,1.0,1.1 1.1,1.2,1.3,1.4,1.5 1.6,1.7,1.7,1.8), mean=1.31, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.31, stddev=0.0957], bias-{mean,stddev}=-0.1689,0.09785, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.86,0.87,1.1 1.1,1.2,1.4,1.6,1.7 1.8,1.8,1.9,2.0), mean=1.41, stddev=0.214], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.37,0.38 0.40,0.45,0.54,0.58,0.59 0.60,0.61,0.61,0.64), mean=0.515, stddev=0.0727], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.003,0.006,0.006,0.007), mean=0.00195, stddev=0.000957], oderiv-count=1.16936e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.84,0.85,1.1 1.1,1.2,1.4,1.6,1.7 1.7,1.8,1.8,1.9), mean=1.4, stddev=0.212], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.5,1.6 1.8,1.9,2.2,2.5,2.7 2.8,3.0,3.0,3.1), mean=2.21, stddev=0.359]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.206349, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1056, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.00305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.67,0.70 0.72,0.76,0.83,0.92,0.95 0.98,1.0,1.0,1.1), mean=0.84, stddev=0.0883], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1102, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.66,0.89,1.0 1.1,1.1,1.2,1.4,1.4 1.5,1.6,1.6,1.6), mean=1.24, stddev=0.158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.24, stddev=0.0872], bias-{mean,stddev}=-0.1755,0.08168, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.33e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.66,1.2,1.3 1.4,1.5,1.6,1.8,1.9 1.9,2.0,2.0,2.1), mean=1.62, stddev=0.224], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.42 0.44,0.47,0.52,0.56,0.57 0.58,0.60,0.60,0.60), mean=0.513, stddev=0.0504], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.001,0.001,0.001,0.002 0.003,0.003,0.004,0.008), mean=0.00131, stddev=0.000862], oderiv-count=1.06268e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.60,1.1,1.3 1.4,1.5,1.6,1.8,1.8 1.9,2.0,2.0,2.1), mean=1.6, stddev=0.226], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.86,1.5,2.0 2.1,2.2,2.5,2.9,3.0 3.1,3.4,3.4,3.5), mean=2.56, stddev=0.416]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.206349, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09767, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.56, stddev=0.00267], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.62,0.63,0.67 0.69,0.72,0.78,0.84,0.87 0.90,0.93,0.94,0.96), mean=0.778, stddev=0.0716], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.73,0.98 1.0,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.13, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.98 1.0,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.13, stddev=0.111], bias-{mean,stddev}=-0.1737,0.08655, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.39e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.71,1.3 1.4,1.5,1.6,1.8,1.9 2.0,2.1,2.1,2.4), mean=1.64, stddev=0.268], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.38,0.40 0.42,0.46,0.50,0.54,0.56 0.58,0.58,0.58,0.60), mean=0.499, stddev=0.0533], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.001 0.002,0.003,0.003,0.005), mean=0.00107, stddev=0.000609], oderiv-count=9.7152e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.68,1.3 1.4,1.4,1.6,1.8,1.9 1.9,2.1,2.1,2.4), mean=1.6, stddev=0.262], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.90,1.2,2.0 2.1,2.3,2.6,2.9,3.1 3.3,3.4,3.4,4.1), mean=2.6, stddev=0.475]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.206349, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09083, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.45, stddev=0.00189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.59,0.60 0.63,0.67,0.71,0.78,0.82 0.86,0.89,0.91,0.97), mean=0.723, stddev=0.0769], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08843, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.58,0.85 0.89,0.92,1.0,1.1,1.1 1.1,1.2,1.2,1.4), mean=0.994, stddev=0.117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.78,0.80,0.86 0.90,0.93,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.997, stddev=0.0833], bias-{mean,stddev}=-0.1503,0.05597, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.79e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.67,0.67,1.1 1.2,1.3,1.4,1.6,1.7 1.7,1.8,1.8,1.8), mean=1.43, stddev=0.211], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.41 0.45,0.47,0.51,0.54,0.56 0.57,0.58,0.58,0.60), mean=0.505, stddev=0.0455], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.003,0.003), mean=0.00116, stddev=0.000323], oderiv-count=9.04218e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.67,1.1 1.2,1.3,1.4,1.6,1.7 1.7,1.7,1.7,1.8), mean=1.41, stddev=0.209], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.8 1.9,2.0,2.1,2.4,2.6 2.7,2.9,2.9,3.2), mean=2.2, stddev=0.329]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.206349, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08854, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.42, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.56,0.60 0.62,0.65,0.71,0.76,0.78 0.80,0.83,0.86,0.90), mean=0.705, stddev=0.0649], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08321, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.64,0.66,0.78 0.83,0.86,0.95,1.0,1.1 1.1,1.1,1.1,1.3), mean=0.936, stddev=0.105], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.77,0.78,0.79 0.83,0.86,0.92,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.937, stddev=0.0911], bias-{mean,stddev}=-0.1401,0.05257, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.93,0.94,0.97 1.2,1.2,1.4,1.5,1.6 1.7,1.7,1.8,1.9), mean=1.36, stddev=0.19], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.39,0.42 0.44,0.46,0.50,0.52,0.55 0.56,0.57,0.58,0.60), mean=0.494, stddev=0.0444], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002), mean=0.0012, stddev=0.00019], oderiv-count=8.00314e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.86,0.91,0.96 1.2,1.2,1.4,1.5,1.6 1.6,1.7,1.8,1.9), mean=1.35, stddev=0.193], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.7 1.8,1.9,2.1,2.3,2.5 2.6,2.6,2.7,3.0), mean=2.09, stddev=0.293]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.206349, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08866, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.42, stddev=0.0032], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.58,0.60 0.62,0.64,0.71,0.76,0.80 0.82,0.84,0.86,0.89), mean=0.706, stddev=0.0677], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08309, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.60,0.76 0.82,0.84,0.93,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.933, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.74,0.77,0.79 0.83,0.86,0.93,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.936, stddev=0.091], bias-{mean,stddev}=-0.131,0.05739, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.52e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.84,0.99 1.2,1.3,1.4,1.5,1.6 1.7,1.7,1.8,1.9), mean=1.37, stddev=0.202], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.32,0.40 0.43,0.44,0.47,0.50,0.53 0.55,0.57,0.57,0.61), mean=0.473, stddev=0.0481], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.0012, stddev=0.000195], oderiv-count=6.82099e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.62,0.75,0.92 1.1,1.2,1.3,1.5,1.6 1.7,1.7,1.7,1.9), mean=1.34, stddev=0.213], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.6,1.7 1.8,1.9,2.1,2.4,2.6 2.8,2.9,3.0,3.1), mean=2.16, stddev=0.324]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.206349, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09188, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.47, stddev=0.00154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.57,0.60 0.63,0.66,0.73,0.79,0.83 0.87,0.89,0.94,0.97), mean=0.73, stddev=0.082], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08354, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.58,0.74 0.80,0.84,0.94,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.937, stddev=0.127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.77,0.78,0.81 0.82,0.85,0.92,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.94, stddev=0.0986], bias-{mean,stddev}=-0.1024,0.05718, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.97e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.65,0.75,1.0 1.1,1.2,1.4,1.5,1.7 1.8,1.9,1.9,2.0), mean=1.38, stddev=0.242], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.29,0.39 0.41,0.43,0.45,0.47,0.49 0.50,0.53,0.54,0.57), mean=0.451, stddev=0.0424], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.0009 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00119, stddev=0.000193], oderiv-count=5.88365e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.62,0.67,1.0 1.1,1.2,1.4,1.5,1.8 1.9,2.0,2.0,2.1), mean=1.38, stddev=0.257], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.8 1.9,2.0,2.3,2.6,3.0 3.2,3.3,3.3,3.4), mean=2.34, stddev=0.401]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.206349, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09511, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.52, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.56,0.60 0.64,0.67,0.74,0.85,0.89 0.92,0.95,0.99,1.1), mean=0.754, stddev=0.101], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08645, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.57,0.58,0.71 0.77,0.86,0.99,1.1,1.1 1.2,1.2,1.2,1.2), mean=0.967, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.77,0.77,0.81 0.84,0.88,0.97,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.973, stddev=0.102], bias-{mean,stddev}=-0.07783,0.04647, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.33e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.82,0.88,1.1 1.2,1.3,1.5,1.7,1.8 1.9,2.1,2.1,2.3), mean=1.49, stddev=0.258], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.29,0.36,0.39 0.41,0.43,0.45,0.48,0.49 0.50,0.50,0.51,0.53), mean=0.449, stddev=0.0378], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.001,0.001 0.001,0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002), mean=0.00125, stddev=0.000187], oderiv-count=4.82112e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.83,0.83,1.1 1.2,1.3,1.5,1.7,1.8 1.9,2.0,2.1,2.4), mean=1.5, stddev=0.261], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.1 2.2,2.3,2.6,2.8,3.0 3.1,3.3,3.5,4.0), mean=2.56, stddev=0.358]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.206349, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09553, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.53, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.51,0.56,0.58 0.61,0.65,0.75,0.85,0.92 0.96,1.0,1.1,1.1), mean=0.755, stddev=0.12], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08606, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.66,0.70 0.77,0.85,0.97,1.1,1.1 1.2,1.2,1.2,1.2), mean=0.962, stddev=0.147], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.74,0.77,0.81 0.84,0.89,0.96,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.968, stddev=0.102], bias-{mean,stddev}=-0.0756,0.03893, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.64e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.76,1.1,1.1 1.2,1.2,1.4,1.5,1.6 1.7,1.8,1.8,1.8), mean=1.39, stddev=0.193], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.34,0.37 0.38,0.40,0.43,0.45,0.46 0.48,0.49,0.49,0.54), mean=0.424, stddev=0.041], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00155, stddev=0.0002], oderiv-count=3.74586e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.70,1.1,1.1 1.2,1.2,1.4,1.5,1.6 1.7,1.7,1.7,1.8), mean=1.37, stddev=0.186], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.0,2.0,2.2 2.2,2.3,2.5,2.8,3.0 3.2,3.4,3.5,3.6), mean=2.56, stddev=0.324]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.206349, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09021, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.44, stddev=0.00169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.50,0.51,0.54 0.58,0.61,0.69,0.83,0.88 0.91,0.95,0.98,1.0), mean=0.712, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08376, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.55,0.65 0.74,0.77,0.92,1.1,1.2 1.2,1.2,1.3,1.3), mean=0.931, stddev=0.177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.77,0.78,0.81 0.84,0.87,0.93,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.944, stddev=0.0869], bias-{mean,stddev}=-0.08019,0.04285, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.85e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.79,0.82,0.91 0.97,1.0,1.1,1.3,1.3 1.5,1.6,1.6,1.6), mean=1.16, stddev=0.16], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.33 0.35,0.37,0.40,0.44,0.45 0.45,0.48,0.48,0.49), mean=0.401, stddev=0.0407], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.003), mean=0.00223, stddev=0.000263], oderiv-count=2.84653e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.72,0.80,0.89 0.93,1.0,1.2,1.3,1.4 1.5,1.5,1.6,1.6), mean=1.16, stddev=0.171], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.1 2.1,2.2,2.5,2.9,3.1 3.3,3.4,3.5,3.7), mean=2.57, stddev=0.401]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.206349, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08684, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.39, stddev=0.00179], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.50,0.51,0.53 0.55,0.58,0.66,0.79,0.85 0.89,0.93,0.96,0.99), mean=0.685, stddev=0.116], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08284, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.50,0.60 0.64,0.72,0.91,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.915, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.72,0.73,0.80 0.81,0.85,0.93,1.0,1.0 1.1,1.1,1.1,1.3), mean=0.933, stddev=0.0929], bias-{mean,stddev}=-0.09068,0.05344, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.2e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.62,0.64,0.76 0.80,0.87,0.99,1.1,1.2 1.2,1.3,1.3,1.9), mean=0.996, stddev=0.168], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.21,0.22 0.25,0.29,0.35,0.42,0.43 0.45,0.46,0.46,0.59), mean=0.348, stddev=0.0725], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.004,0.004 0.004,0.005,0.005,0.005), mean=0.00335, stddev=0.000539], oderiv-count=1.8409e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.58,0.58,0.68 0.75,0.84,0.96,1.1,1.2 1.3,1.3,1.4,1.8), mean=0.977, stddev=0.186], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.8,1.9 2.0,2.2,2.7,3.2,3.4 3.6,3.8,3.8,3.9), mean=2.71, stddev=0.526]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.206349, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09195, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.47, stddev=0.00138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.56,0.57 0.60,0.63,0.72,0.83,0.89 0.92,0.96,0.98,1.1), mean=0.727, stddev=0.109], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08995, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.62,0.62,0.65 0.74,0.84,0.97,1.2,1.3 1.3,1.3,1.3,1.4), mean=1, stddev=0.191], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.82,0.84,0.88 0.89,0.95,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.01, stddev=0.0903], bias-{mean,stddev}=-0.08734,0.07621, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.96e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.72,0.75,0.81 0.89,0.94,1.1,1.2,1.4 1.4,1.5,1.5,1.6), mean=1.1, stddev=0.188], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.21 0.25,0.29,0.35,0.41,0.44 0.47,0.48,0.49,0.50), mean=0.348, stddev=0.0749], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.005,0.005,0.006,0.007,0.007 0.007,0.008,0.008,0.009), mean=0.00602, stddev=0.000828], oderiv-count=625600
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.70,0.80 0.86,0.93,1.1,1.3,1.4 1.4,1.4,1.5,1.6), mean=1.08, stddev=0.186], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.4,2.4,2.6 2.8,3.0,3.5,4.0,4.2 4.3,4.7,4.8,5.1), mean=3.51, stddev=0.564]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.206349, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.005, max-change=0.75, params-rms=0.1314, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.49, stddev=0.0147], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.82,0.84,0.87 0.93,0.96,1.0,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.05, stddev=0.101], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1935, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.4,1.4,1.6,1.6,1.7 1.8,1.8,1.8,1.9), mean=1.54, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.0 2.0,2.1,2.2,2.3,2.4 2.4,2.4,2.4,2.4), mean=2.19, stddev=0.13], bias-{mean,stddev}=-0.0447,0.1248, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.7 1.8,1.9,2.0,2.3,2.4 2.5,2.6,2.6,2.8), mean=2.05, stddev=0.249], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.35 0.35,0.36,0.39,0.41,0.42 0.43,0.46,0.46,0.47), mean=0.389, stddev=0.028], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.008 0.009,0.009,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00984, stddev=0.00141], oderiv-count=616896
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.7,1.8,2.0,2.2,2.4 2.5,2.6,2.7,2.8), mean=2.04, stddev=0.269], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.9,4.3,4.4 4.5,4.8,5.5,6.1,6.5 6.8,7.8,7.8,8.7), mean=5.54, stddev=0.848]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, params-rms=0.268, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.0,3.0,3.0 3.0,3.0,3.0,3.0,3.0 3.0,3.0,3.0,3.0), mean=3.03, stddev=0.000977], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.8 1.8,1.9,2.1,2.3,2.4 2.5,2.6,2.6,2.6), mean=2.13, stddev=0.239], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-4e-08 -3e-08,-2e-08,-4e-09,2e-08,3e-08 4e-08,4e-08,4e-08,6e-08), mean=-1.16e-09, stddev=2.4e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.2,3.2,3.3,3.3 3.4,3.4,3.7,3.9,4.1 4.1,4.3,4.5,4.5), mean=3.71, stddev=0.28]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00241235, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2183, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.16,0.25,0.55 0.87,1.2,1.8,2.1,2.2 2.4,2.5,2.6,3.2), mean=1.66, stddev=0.542], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,13 13,13,14,15,15 15,16,16,16), mean=13.9, stddev=0.845], bias-{mean,stddev}=0.001403,0.3126, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1377, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.72,0.77,0.97 0.99,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.4), mean=1.1, stddev=0.0954], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.4,1.5,1.5,1.6,1.7 1.8,1.8,1.8,1.9), mean=1.55, stddev=0.122], bias-{mean,stddev}=-0.05486,0.1824, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.01e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.72,0.81 0.86,0.92,1.1,1.3,1.5 1.5,1.6,1.7,1.8), mean=1.11, stddev=0.228], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.35,0.40 0.41,0.43,0.47,0.52,0.56 0.58,0.61,0.62,0.66), mean=0.477, stddev=0.0584], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.005,0.005,0.005,0.005,0.006 0.006,0.006,0.007,0.01), mean=0.00522, stddev=0.000796], oderiv-count=601664
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.71,0.73,0.78 0.84,0.93,1.1,1.3,1.4 1.5,1.7,1.7,1.8), mean=1.12, stddev=0.227], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.5,1.7,1.9,2.0 2.0,2.1,2.2,2.9), mean=1.7, stddev=0.236]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00241235, l2-regularize=0.0005, max-change=0.75, params-rms=0.1396, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.58, stddev=0.00189], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.81,0.84,0.90 0.96,1.0,1.1,1.2,1.3 1.3,1.3,1.4,1.4), mean=1.11, stddev=0.129], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-2e-08 -2e-08,-1e-08,5e-09,2e-08,3e-08 3e-08,4e-08,4e-08,6e-08), mean=2.95e-09, stddev=1.98e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.6,1.7,1.8 1.8,1.9,1.9,1.9), mean=1.64, stddev=0.102]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0120618, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1934, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.08,0.29 0.72,1.0,1.5,1.9,2.1 2.3,2.4,2.5,3.6), mean=1.44, stddev=0.558], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,12,12,13 13,13,13,13), mean=12.3, stddev=0.227], bias-{mean,stddev}=8.38e-09,0.2194, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000791, stddev=0.0012], oderiv-count=603840
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/250.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/251.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.39723 tdnnf2.linear:3.54196 tdnnf2.affine:4.01234 tdnnf3.linear:3.05149 tdnnf3.affine:3.75198 tdnnf4.linear:2.7494 tdnnf4.affine:3.33052 tdnnf5.linear:2.5729 tdnnf5.affine:2.97111 tdnnf6.linear:2.39731 tdnnf6.affine:2.6974 tdnnf7.linear:2.28752 tdnnf7.affine:2.61508 tdnnf8.linear:2.18115 tdnnf8.affine:2.52792 tdnnf9.linear:2.22973 tdnnf9.affine:2.60856 tdnnf10.linear:2.27281 tdnnf10.affine:2.75549 tdnnf11.linear:2.38838 tdnnf11.affine:2.95274 tdnnf12.linear:2.45495 tdnnf12.affine:3.05935 tdnnf13.linear:2.80193 tdnnf13.affine:3.57107 prefinal-l:3.87734 prefinal-chain.affine:4.09978 prefinal-chain.linear:4.11422 output.affine:10.4725 prefinal-xent.affine:2.28386 prefinal-xent.linear:1.48928 output-xent.affine:8.84271 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.4617 tdnnf2.linear:14.9112 tdnnf2.affine:15.0625 tdnnf3.linear:13.5152 tdnnf3.affine:14.2805 tdnnf4.linear:12.5012 tdnnf4.affine:13.0416 tdnnf5.linear:11.6257 tdnnf5.affine:11.4641 tdnnf6.linear:11.3332 tdnnf6.affine:10.785 tdnnf7.linear:11.3487 tdnnf7.affine:10.758 tdnnf8.linear:11.7606 tdnnf8.affine:10.7754 tdnnf9.linear:12.1743 tdnnf9.affine:11.1129 tdnnf10.linear:12.2284 tdnnf10.affine:11.0571 tdnnf11.linear:11.547 tdnnf11.affine:10.77 tdnnf12.linear:11.1151 tdnnf12.affine:10.6708 tdnnf13.linear:11.7701 tdnnf13.affine:11.5878 prefinal-l:11.8969 prefinal-chain.affine:17.5806 prefinal-chain.linear:24.2558 output.affine:112.781 prefinal-xent.affine:12.6441 prefinal-xent.linear:12.6325 output-xent.affine:99.3204 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.313693 tdnnf2.linear:0.236532 tdnnf2.affine:0.264672 tdnnf3.linear:0.224617 tdnnf3.affine:0.260069 tdnnf4.linear:0.217525 tdnnf4.affine:0.251079 tdnnf5.linear:0.219767 tdnnf5.affine:0.256423 tdnnf6.linear:0.211078 tdnnf6.affine:0.249091 tdnnf7.linear:0.200748 tdnnf7.affine:0.242169 tdnnf8.linear:0.185271 tdnnf8.affine:0.234501 tdnnf9.linear:0.18235 tdnnf9.affine:0.234032 tdnnf10.linear:0.185209 tdnnf10.affine:0.24866 tdnnf11.linear:0.206479 tdnnf11.affine:0.273764 tdnnf12.linear:0.220038 tdnnf12.affine:0.285584 tdnnf13.linear:0.237703 tdnnf13.affine:0.307376 prefinal-l:0.330008 prefinal-chain.affine:0.232834 prefinal-chain.linear:0.169278 output.affine:0.0926255 prefinal-xent.affine:0.179939 prefinal-xent.linear:0.117478 output-xent.affine:0.0890547 ]
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 12:17:26 CST 2020, elapsed time 4 seconds
