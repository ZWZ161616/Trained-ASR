# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/181.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/180.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/181.mdl 
# Started at Mon Feb 24 10:35:32 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/181.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1544, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.5,1.5,1.6 1.8,1.8,2.1,2.6,3.1 3.2,3.4,3.4,3.7), mean=2.23, stddev=0.509], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.59,0.66,0.72 0.80,0.91,1.6,2.1,2.5 2.8,3.0,3.2,3.8), mean=1.62, stddev=0.657], bias-{mean,stddev}=-0.1485,0.2142, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.78e+06, self-repaired-proportion=0.0276544, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.008,0.02 0.04,0.05,0.10,0.20,0.26 0.30,0.35,0.37,0.42), mean=0.13, stddev=0.0924], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.05,0.09 0.12,0.17,0.31,0.51,0.65 0.74,0.78,0.79,0.82), mean=0.345, stddev=0.199], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.07,0.09,0.10,0.15), mean=0.0419, stddev=0.0197], oderiv-count=1.31882e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.003,0.005,0.02 0.03,0.05,0.11,0.21,0.26 0.30,0.35,0.35,0.38), mean=0.131, stddev=0.0897], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.10 0.12,0.15,0.22,0.30,0.32 0.34,0.35,0.35,0.39), mean=0.221, stddev=0.0784]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=2.03, stddev=0.0053], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.73,0.79,0.82 0.86,0.91,1.0,1.1,1.1 1.2,1.3,1.3,1.5), mean=1.01, stddev=0.118], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.2,1.3,1.4,1.5,1.6 1.7,1.8,1.8,1.8), mean=1.39, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.3,1.3,1.4,1.5,1.5 1.5,1.6,1.6,1.7), mean=1.4, stddev=0.105], bias-{mean,stddev}=-0.1803,0.1115, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.22e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.1,1.2,1.4 1.5,1.6,1.9,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.85, stddev=0.285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.37,0.38 0.41,0.46,0.54,0.58,0.59 0.60,0.61,0.61,0.62), mean=0.52, stddev=0.0673], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.005,0.005,0.007), mean=0.00174, stddev=0.000941], oderiv-count=1.19901e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.1,1.2,1.4 1.5,1.7,1.8,2.1,2.2 2.3,2.4,2.5,2.6), mean=1.87, stddev=0.294], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.9,1.9,2.2 2.3,2.5,2.9,3.4,3.7 3.8,4.1,4.1,4.3), mean=2.94, stddev=0.508]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1096, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.75, stddev=0.00316], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.69,0.72,0.73 0.75,0.79,0.87,0.94,0.98 1.0,1.1,1.1,1.2), mean=0.872, stddev=0.0899], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.86,0.87,1.1 1.1,1.2,1.2,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.24, stddev=0.141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.2,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.25, stddev=0.0969], bias-{mean,stddev}=-0.1765,0.09101, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.35e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.4,1.5,1.5 1.7,1.8,2.0,2.3,2.3 2.5,2.5,2.5,2.6), mean=2.02, stddev=0.271], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.42 0.44,0.47,0.51,0.56,0.57 0.58,0.58,0.59,0.60), mean=0.512, stddev=0.048], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.002 0.002,0.004,0.004,0.004), mean=0.00119, stddev=0.000739], oderiv-count=1.12668e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.4,1.4,1.5 1.7,1.8,2.0,2.2,2.4 2.5,2.5,2.6,2.7), mean=2.01, stddev=0.281], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,2.0,2.2,2.5 2.6,2.8,3.2,3.6,3.8 4.0,4.3,4.5,4.6), mean=3.19, stddev=0.521]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1063, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.7, stddev=0.00388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.70,0.71,0.72 0.75,0.78,0.84,0.91,0.96 0.98,1.0,1.0,1.1), mean=0.847, stddev=0.0807], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1082, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.79,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.22, stddev=0.138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.96,0.96,1.0 1.1,1.1,1.2,1.3,1.4 1.5,1.5,1.6,1.9), mean=1.21, stddev=0.153], bias-{mean,stddev}=-0.1737,0.1039, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.35e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.95,1.1,1.8 1.9,2.0,2.3,2.5,2.7 2.8,2.8,2.9,3.5), mean=2.26, stddev=0.353], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.41,0.43 0.44,0.46,0.51,0.55,0.56 0.57,0.57,0.58,0.59), mean=0.506, stddev=0.0437], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.0006,0.0006,0.0007,0.0008,0.001 0.002,0.002,0.004,0.006), mean=0.000887, stddev=0.000667], oderiv-count=9.9968e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.97,1.8 1.9,2.0,2.3,2.5,2.7 2.8,2.9,2.9,3.3), mean=2.28, stddev=0.361], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,2.8 3.0,3.1,3.6,4.1,4.5 4.9,5.1,5.1,5.4), mean=3.63, stddev=0.682]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09825, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.57, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.62,0.64,0.65 0.69,0.72,0.78,0.84,0.88 0.92,0.98,1.0,1.0), mean=0.782, stddev=0.0784], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09844, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.72,0.93 0.98,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.11, stddev=0.126], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.93,0.93,0.95 0.97,1.0,1.1,1.2,1.2 1.3,1.3,1.4,1.4), mean=1.11, stddev=0.103], bias-{mean,stddev}=-0.1463,0.07429, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.2e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.87,1.1,1.7 1.8,2.0,2.1,2.4,2.6 2.7,2.8,2.9,3.0), mean=2.15, stddev=0.343], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.41,0.43 0.46,0.48,0.52,0.54,0.55 0.57,0.57,0.57,0.59), mean=0.511, stddev=0.0407], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0006,0.0007,0.0008,0.0009,0.001 0.001,0.001,0.003,0.004), mean=0.000859, stddev=0.000448], oderiv-count=9.01056e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.95,0.99,1.7 1.8,1.9,2.2,2.4,2.6 2.7,2.8,3.0,3.1), mean=2.16, stddev=0.354], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.6,2.7 2.8,2.9,3.2,3.7,3.9 4.2,4.5,4.5,5.5), mean=3.31, stddev=0.575]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09304, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.49, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.56,0.60,0.62 0.66,0.69,0.74,0.80,0.83 0.86,0.88,0.92,0.94), mean=0.741, stddev=0.0716], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08907, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.64,0.82 0.89,0.93,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1, stddev=0.11], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.79,0.81,0.86 0.88,0.91,0.98,1.1,1.1 1.2,1.2,1.2,1.3), mean=1, stddev=0.105], bias-{mean,stddev}=-0.1425,0.06271, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.37e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,1.1,1.2,1.4 1.6,1.7,1.8,2.0,2.2 2.3,2.4,2.4,2.5), mean=1.85, stddev=0.263], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.43 0.44,0.47,0.50,0.53,0.55 0.56,0.57,0.58,0.61), mean=0.496, stddev=0.0425], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.002,0.003), mean=0.00095, stddev=0.00024], oderiv-count=7.54061e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,1.1,1.1,1.4 1.6,1.6,1.8,2.0,2.2 2.3,2.4,2.4,2.5), mean=1.83, stddev=0.276], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,2.0,2.2,2.2 2.4,2.5,2.8,3.2,3.4 3.6,3.7,3.8,3.9), mean=2.84, stddev=0.424]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.094, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.5, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.59,0.61,0.62 0.66,0.68,0.74,0.81,0.86 0.88,0.91,0.93,0.98), mean=0.748, stddev=0.0769], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08926, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.71,0.80 0.86,0.92,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1, stddev=0.117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.79,0.83,0.85 0.87,0.90,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1, stddev=0.105], bias-{mean,stddev}=-0.1278,0.06447, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.69e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,1.2,1.5 1.6,1.7,1.9,2.0,2.2 2.3,2.4,2.4,2.6), mean=1.85, stddev=0.261], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.42 0.44,0.45,0.48,0.51,0.53 0.54,0.55,0.56,0.60), mean=0.482, stddev=0.0413], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.000966, stddev=0.000187], oderiv-count=7.00435e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,1.2,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.5,2.6), mean=1.87, stddev=0.274], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.0,2.3,2.4 2.5,2.6,2.9,3.3,3.6 3.7,3.8,3.9,4.2), mean=2.97, stddev=0.408]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09713, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00328], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.58,0.61 0.66,0.71,0.78,0.83,0.88 0.91,0.96,0.97,1.0), mean=0.772, stddev=0.0864], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09051, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.57,0.64,0.77 0.84,0.92,1.0,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.01, stddev=0.146], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.83,0.85 0.88,0.94,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.02, stddev=0.113], bias-{mean,stddev}=-0.09833,0.07963, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.87e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.85,0.90,1.4 1.6,1.7,1.9,2.1,2.3 2.5,2.7,2.8,3.0), mean=1.89, stddev=0.35], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.40 0.42,0.43,0.47,0.49,0.50 0.51,0.52,0.52,0.64), mean=0.461, stddev=0.0446], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0008,0.0009,0.0009,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.000982, stddev=0.00017], oderiv-count=5.93581e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.86,0.93,1.4 1.6,1.7,1.9,2.1,2.3 2.6,2.7,2.7,3.0), mean=1.9, stddev=0.351], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.5 2.6,2.8,3.1,3.5,3.7 4.0,4.3,4.3,4.3), mean=3.15, stddev=0.465]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.59,0.62,0.65 0.68,0.72,0.79,0.89,0.93 0.97,1.0,1.0,1.1), mean=0.802, stddev=0.099], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09224, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.61,0.72 0.81,0.92,1.0,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.03, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.79,0.82,0.83 0.90,0.95,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.04, stddev=0.113], bias-{mean,stddev}=-0.08113,0.06406, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.22e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.96,1.0,1.3 1.5,1.6,1.9,2.1,2.3 2.4,2.6,2.6,2.9), mean=1.89, stddev=0.337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.28,0.37 0.41,0.42,0.45,0.47,0.49 0.50,0.51,0.51,0.51), mean=0.447, stddev=0.0408], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.0011, stddev=0.000148], oderiv-count=4.74336e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,1.0,1.0,1.4 1.5,1.7,1.9,2.2,2.3 2.4,2.6,2.6,2.8), mean=1.9, stddev=0.339], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.6,2.6,2.7 2.8,3.0,3.2,3.7,3.8 4.0,4.6,4.8,4.8), mean=3.32, stddev=0.463]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1025, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.64, stddev=0.00309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.61,0.65 0.68,0.73,0.81,0.89,0.96 1.0,1.1,1.1,1.1), mean=0.813, stddev=0.109], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09349, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.70,0.81 0.86,0.91,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.05, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.72,0.84,0.86 0.90,0.97,1.0,1.1,1.2 1.3,1.3,1.3,1.4), mean=1.05, stddev=0.122], bias-{mean,stddev}=-0.07796,0.04964, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.63e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.97,1.3,1.4 1.5,1.6,1.8,2.0,2.1 2.2,2.2,2.2,2.3), mean=1.8, stddev=0.238], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.35,0.37 0.38,0.41,0.44,0.46,0.48 0.48,0.49,0.49,0.50), mean=0.433, stddev=0.0423], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00136, stddev=0.000172], oderiv-count=3.81434e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.94,1.3,1.5 1.5,1.6,1.8,2.0,2.1 2.2,2.3,2.3,2.4), mean=1.81, stddev=0.244], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.6,2.7,2.8 2.8,3.0,3.4,3.9,4.2 4.5,4.8,5.0,5.4), mean=3.46, stddev=0.557]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1009, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.61, stddev=0.0051], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.60,0.63 0.65,0.69,0.78,0.91,0.97 1.0,1.0,1.1,1.1), mean=0.798, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09222, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.49,0.63,0.69 0.76,0.84,1.0,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.02, stddev=0.202], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.82,0.82,0.86 0.90,0.95,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.106], bias-{mean,stddev}=-0.08796,0.05733, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.87,1.1,1.2 1.3,1.4,1.6,1.7,1.8 1.8,1.9,1.9,2.3), mean=1.56, stddev=0.204], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.27,0.29 0.34,0.37,0.41,0.45,0.46 0.47,0.49,0.49,0.50), mean=0.403, stddev=0.053], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00186, stddev=0.000209], oderiv-count=2.91731e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.90,1.1,1.2 1.3,1.4,1.6,1.7,1.8 1.8,1.9,1.9,2.3), mean=1.59, stddev=0.209], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.6,2.6,2.8 2.9,3.1,3.6,4.3,4.6 4.7,4.9,5.0,5.1), mean=3.72, stddev=0.626]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0996, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.59, stddev=0.00473], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.58,0.59,0.62 0.65,0.69,0.78,0.89,0.94 0.99,1.0,1.0,1.1), mean=0.789, stddev=0.112], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09231, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.61,0.71 0.75,0.81,0.99,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.02, stddev=0.211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.85,0.85,0.88 0.90,0.94,1.0,1.1,1.2 1.3,1.3,1.3,1.5), mean=1.04, stddev=0.119], bias-{mean,stddev}=-0.09757,0.07606, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.91,0.94,1.0 1.1,1.2,1.4,1.6,1.6 1.8,2.1,2.1,2.4), mean=1.41, stddev=0.25], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.23 0.26,0.30,0.37,0.44,0.47 0.48,0.56,0.58,0.58), mean=0.37, stddev=0.0825], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.004,0.004,0.004), mean=0.00269, stddev=0.000363], oderiv-count=1.8311e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.99,0.99,1.0 1.1,1.3,1.4,1.6,1.7 1.9,2.1,2.3,2.5), mean=1.44, stddev=0.27], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.7,2.8,3.0 3.2,3.4,4.1,4.8,5.3 5.5,5.7,5.8,5.9), mean=4.12, stddev=0.765]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.63,0.66 0.69,0.74,0.82,0.94,0.99 1.0,1.0,1.0,1.1), mean=0.836, stddev=0.111], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09698, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.67,0.71 0.79,0.89,1.1,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.08, stddev=0.211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.91,0.91,0.93 0.97,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.09, stddev=0.0973], bias-{mean,stddev}=-0.0993,0.1045, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.34e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.86,0.90,1.0 1.1,1.2,1.4,1.6,1.7 1.8,1.9,1.9,2.0), mean=1.42, stddev=0.226], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.19 0.23,0.29,0.36,0.44,0.46 0.47,0.52,0.52,0.54), mean=0.359, stddev=0.0854], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.005,0.006,0.006 0.006,0.008,0.009,0.01), mean=0.00539, stddev=0.000835], oderiv-count=624512
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.98,0.99,1.0 1.1,1.2,1.5,1.6,1.7 1.8,1.9,1.9,2.0), mean=1.44, stddev=0.231], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.1,3.2,3.5 3.7,4.0,4.9,5.6,5.9 6.2,6.5,6.7,7.0), mean=4.89, stddev=0.848]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.005, max-change=0.75, params-rms=0.1366, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.0128], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.81,0.89,0.93 0.95,0.99,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.09, stddev=0.107], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2042, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.3,1.3 1.4,1.5,1.6,1.8,1.8 1.9,1.9,1.9,1.9), mean=1.63, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.1 2.1,2.2,2.3,2.4,2.5 2.5,2.6,2.6,2.6), mean=2.31, stddev=0.131], bias-{mean,stddev}=-0.075,0.1202, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.15e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.0,2.0,2.1 2.2,2.3,2.5,2.8,3.0 3.1,3.2,3.3,3.4), mean=2.54, stddev=0.321], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.35 0.35,0.36,0.39,0.42,0.43 0.44,0.45,0.46,0.47), mean=0.391, stddev=0.0311], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.008,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00938, stddev=0.00117], oderiv-count=624512
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.0,2.0,2.0 2.1,2.2,2.5,2.9,3.1 3.1,3.3,3.3,3.4), mean=2.56, stddev=0.351], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.2,5.8,6.1,6.4 6.6,7.0,7.7,8.7,9.3 9.6,10,10,13), mean=7.85, stddev=1.16]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, params-rms=0.3041, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,3.4,3.4,3.4 3.4,3.4,3.4,3.5,3.5 3.5,3.5,3.5,3.5), mean=3.44, stddev=0.0179], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.7,1.7,2.0 2.0,2.2,2.4,2.7,2.8 2.9,2.9,2.9,3.1), mean=2.42, stddev=0.287], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-3e-08 -3e-08,-2e-08,-8e-09,1e-08,2e-08 3e-08,4e-08,5e-08,6e-08), mean=-4.43e-09, stddev=2.18e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.6,3.6,3.7,3.8 3.9,3.9,4.2,4.4,4.5 4.5,4.8,5.0,5.2), mean=4.21, stddev=0.289]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00402404, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2365, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.15,0.24,0.55 0.90,1.3,1.9,2.3,2.4 2.5,2.7,2.9,3.6), mean=1.79, stddev=0.603], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(13,13,13,14 14,14,15,16,16 17,17,18,18), mean=15, stddev=1.06], bias-{mean,stddev}=0.001357,0.3436, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1514, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.77,0.77,1.1 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.4,1.6), mean=1.21, stddev=0.108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.6,1.6,1.7,1.8,1.9 1.9,1.9,2.0,2.0), mean=1.71, stddev=0.119], bias-{mean,stddev}=-0.1059,0.1882, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.37e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.90,0.91,0.98 1.0,1.1,1.3,1.5,1.7 1.8,1.9,1.9,2.1), mean=1.32, stddev=0.254], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.40 0.43,0.44,0.48,0.52,0.56 0.59,0.62,0.64,0.69), mean=0.485, stddev=0.0583], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.004,0.004,0.005,0.005 0.005,0.006,0.007,0.009), mean=0.00463, stddev=0.000634], oderiv-count=627776
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.89,0.90,0.98 1.0,1.1,1.3,1.5,1.6 1.8,2.0,2.0,2.2), mean=1.33, stddev=0.261], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.6 1.7,1.7,2.0,2.2,2.3 2.4,2.5,2.5,4.3), mean=1.99, stddev=0.313]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00402404, l2-regularize=0.0005, max-change=0.75, params-rms=0.1507, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.7, stddev=0.000977], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.82,0.92,0.97 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.2, stddev=0.131], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-3e-08 -2e-08,-2e-08,-1e-08,1e-08,2e-08 3e-08,3e-08,4e-08,6e-08), mean=-3.04e-09, stddev=2e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.7,1.8,1.9,1.9 2.0,2.0,2.0,2.2), mean=1.78, stddev=0.122]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0201202, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.183, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.24 0.62,0.91,1.4,1.8,2.0 2.2,2.3,2.4,3.2), mean=1.36, stddev=0.547], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,11,12,12,12 12,12,12,12), mean=11.6, stddev=0.231], bias-{mean,stddev}=2.603e-08,0.2595, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,7e-06 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000772, stddev=0.0012], oderiv-count=601664
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/180.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/181.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.65968 tdnnf2.linear:4.9161 tdnnf2.affine:5.54639 tdnnf3.linear:4.1877 tdnnf3.affine:4.94604 tdnnf4.linear:4.04196 tdnnf4.affine:4.81462 tdnnf5.linear:3.79121 tdnnf5.affine:4.33251 tdnnf6.linear:3.40505 tdnnf6.affine:3.8627 tdnnf7.linear:3.31999 tdnnf7.affine:3.70318 tdnnf8.linear:3.20366 tdnnf8.affine:3.6913 tdnnf9.linear:3.27984 tdnnf9.affine:3.70919 tdnnf10.linear:3.34381 tdnnf10.affine:3.96157 tdnnf11.linear:3.50723 tdnnf11.affine:4.15777 tdnnf12.linear:3.58003 tdnnf12.affine:4.32741 tdnnf13.linear:3.96809 tdnnf13.affine:4.90772 prefinal-l:4.28092 prefinal-chain.affine:5.19704 prefinal-chain.linear:5.66225 output.affine:15.5496 prefinal-xent.affine:2.80665 prefinal-xent.linear:1.86356 output-xent.affine:13.0075 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.0688 tdnnf2.linear:16.254 tdnnf2.affine:16.0531 tdnnf3.linear:14.0289 tdnnf3.affine:14.3139 tdnnf4.linear:13.6093 tdnnf4.affine:14.0417 tdnnf5.linear:12.5759 tdnnf5.affine:12.7364 tdnnf6.linear:11.9087 tdnnf6.affine:11.536 tdnnf7.linear:12.0322 tdnnf7.affine:11.5393 tdnnf8.linear:12.4327 tdnnf8.affine:11.674 tdnnf9.linear:12.9279 tdnnf9.affine:11.865 tdnnf10.linear:13.1194 tdnnf10.affine:12.0121 tdnnf11.linear:12.9095 tdnnf11.affine:11.8639 tdnnf12.linear:12.7493 tdnnf12.affine:11.8977 tdnnf13.linear:13.488 tdnnf13.affine:12.5205 prefinal-l:12.3677 prefinal-chain.affine:18.5486 prefinal-chain.linear:27.5197 output.affine:122.236 prefinal-xent.affine:13.9167 prefinal-xent.linear:13.6389 output-xent.affine:94.515 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.369569 tdnnf2.linear:0.302045 tdnnf2.affine:0.345819 tdnnf3.linear:0.298287 tdnnf3.affine:0.344765 tdnnf4.linear:0.296028 tdnnf4.affine:0.343446 tdnnf5.linear:0.300767 tdnnf5.affine:0.339905 tdnnf6.linear:0.286577 tdnnf6.affine:0.335558 tdnnf7.linear:0.276491 tdnnf7.affine:0.3215 tdnnf8.linear:0.25785 tdnnf8.affine:0.317159 tdnnf9.linear:0.253772 tdnnf9.affine:0.312835 tdnnf10.linear:0.254815 tdnnf10.affine:0.330098 tdnnf11.linear:0.271731 tdnnf11.affine:0.350609 tdnnf12.linear:0.280226 tdnnf12.affine:0.363152 tdnnf13.linear:0.294533 tdnnf13.affine:0.392963 prefinal-l:0.350495 prefinal-chain.affine:0.281218 prefinal-chain.linear:0.206255 output.affine:0.127236 prefinal-xent.affine:0.201865 prefinal-xent.linear:0.13663 output-xent.affine:0.137618 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 10:35:35 CST 2020, elapsed time 3 seconds
