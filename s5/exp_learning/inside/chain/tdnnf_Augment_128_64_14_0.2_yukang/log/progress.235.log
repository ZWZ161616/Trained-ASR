# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/235.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/234.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/235.mdl 
# Started at Mon Feb 24 11:53:58 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/235.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1446, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.4,1.5 1.6,1.7,2.0,2.4,2.8 3.0,3.1,3.2,3.5), mean=2.09, stddev=0.464], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.60,0.63,0.67 0.74,0.87,1.5,2.0,2.4 2.6,2.8,2.9,3.4), mean=1.52, stddev=0.608], bias-{mean,stddev}=-0.1406,0.2009, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.75e+06, self-repaired-proportion=0.0167958, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.01,0.02 0.03,0.05,0.10,0.19,0.24 0.27,0.31,0.33,0.37), mean=0.12, stddev=0.0823], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.07,0.09 0.11,0.18,0.30,0.51,0.65 0.71,0.77,0.77,0.83), mean=0.345, stddev=0.196], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.06,0.08,0.09,0.14), mean=0.0411, stddev=0.0185], oderiv-count=1.26828e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.01,0.02 0.02,0.05,0.09,0.19,0.24 0.28,0.30,0.32,0.34), mean=0.119, stddev=0.0832], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.08 0.10,0.13,0.20,0.27,0.29 0.31,0.32,0.32,0.35), mean=0.201, stddev=0.0709]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.257143, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1202, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.92, stddev=0.00535], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.74,0.76,0.77 0.82,0.87,0.95,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.955, stddev=0.108], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1198, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.1,1.1 1.2,1.2,1.3,1.5,1.5 1.7,1.7,1.7,1.8), mean=1.35, stddev=0.154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.3,1.3,1.4,1.5 1.5,1.6,1.6,1.6), mean=1.35, stddev=0.0977], bias-{mean,stddev}=-0.1767,0.09847, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.65e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.92,0.98,1.1 1.2,1.3,1.5,1.7,1.8 1.9,1.9,2.0,2.2), mean=1.52, stddev=0.234], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.38 0.40,0.45,0.54,0.58,0.59 0.60,0.61,0.61,0.62), mean=0.518, stddev=0.0699], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.003 0.003,0.006,0.008,0.008), mean=0.00198, stddev=0.00114], oderiv-count=1.20537e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.95,0.99,1.1 1.2,1.3,1.5,1.7,1.8 1.9,1.9,1.9,2.2), mean=1.53, stddev=0.24], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.7,1.8 1.9,2.1,2.4,2.7,2.9 3.1,3.3,3.4,3.5), mean=2.41, stddev=0.391]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.257143, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1086, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.74, stddev=0.00331], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.71,0.73 0.75,0.79,0.86,0.94,0.97 1.0,1.0,1.1,1.2), mean=0.864, stddev=0.0869], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1148, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.71,0.94,1.0 1.1,1.2,1.3,1.4,1.5 1.6,1.6,1.6,1.7), mean=1.29, stddev=0.169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.29, stddev=0.0979], bias-{mean,stddev}=-0.1804,0.08539, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.96e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.96,1.2,1.5 1.5,1.6,1.8,2.0,2.1 2.2,2.2,2.2,2.3), mean=1.81, stddev=0.245], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.38,0.41 0.45,0.48,0.52,0.56,0.57 0.58,0.59,0.59,0.60), mean=0.516, stddev=0.0512], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.002 0.003,0.004,0.004,0.009), mean=0.00127, stddev=0.000943], oderiv-count=1.10922e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.87,1.2,1.4 1.5,1.6,1.8,2.0,2.1 2.1,2.2,2.2,2.3), mean=1.8, stddev=0.25], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,1.1,1.6,2.2 2.4,2.5,2.8,3.2,3.3 3.7,3.8,3.9,4.1), mean=2.85, stddev=0.479]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.257143, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1021, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.00138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.67,0.69 0.72,0.75,0.80,0.88,0.91 0.96,0.98,1.0,1.0), mean=0.813, stddev=0.0771], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1065, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.63,0.70,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.2, stddev=0.141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.98,1.0,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.8), mean=1.2, stddev=0.123], bias-{mean,stddev}=-0.1736,0.08574, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.67e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.78,0.82,1.6 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.6,2.8), mean=1.91, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.42 0.44,0.47,0.51,0.55,0.56 0.57,0.59,0.60,0.61), mean=0.507, stddev=0.0462], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0007 0.0007,0.0007,0.0008,0.0009,0.001 0.002,0.003,0.004,0.007), mean=0.000976, stddev=0.000726], oderiv-count=9.504e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.80,0.93,1.5 1.6,1.7,1.9,2.2,2.3 2.3,2.4,2.6,2.8), mean=1.91, stddev=0.317], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.2,1.4,2.4 2.5,2.7,3.0,3.4,3.7 3.9,4.1,4.1,4.9), mean=3.04, stddev=0.549]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.257143, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09412, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.51, stddev=0.00362], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.61,0.64 0.66,0.68,0.74,0.82,0.86 0.87,0.91,0.94,0.97), mean=0.749, stddev=0.0761], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09217, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.58,0.87 0.91,0.96,1.0,1.1,1.2 1.2,1.2,1.3,1.4), mean=1.04, stddev=0.124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.83,0.84,0.88 0.92,0.95,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.0974], bias-{mean,stddev}=-0.1491,0.05734, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.88e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.75,0.77,1.3 1.4,1.5,1.6,1.8,1.9 1.9,2.0,2.1,2.2), mean=1.63, stddev=0.237], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.42 0.45,0.48,0.52,0.55,0.56 0.57,0.58,0.59,0.60), mean=0.51, stddev=0.044], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.002,0.003,0.003), mean=0.00103, stddev=0.00038], oderiv-count=8.96314e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.81,1.2 1.4,1.5,1.6,1.8,1.9 2.0,2.0,2.0,2.2), mean=1.62, stddev=0.243], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.3,2.0 2.2,2.3,2.5,2.7,3.0 3.1,3.4,3.5,4.1), mean=2.5, stddev=0.405]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.257143, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09028, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.44, stddev=0.00229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.55,0.57,0.60 0.63,0.66,0.72,0.77,0.80 0.83,0.85,0.89,0.92), mean=0.719, stddev=0.0705], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08511, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.64,0.66,0.79 0.85,0.88,0.96,1.0,1.1 1.1,1.1,1.2,1.3), mean=0.957, stddev=0.11], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.76,0.76,0.82 0.83,0.86,0.95,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.958, stddev=0.0967], bias-{mean,stddev}=-0.1438,0.05281, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.91e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.97,0.99,1.1 1.3,1.3,1.5,1.6,1.7 1.8,1.9,1.9,2.1), mean=1.49, stddev=0.212], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.38,0.42 0.44,0.47,0.50,0.52,0.54 0.56,0.57,0.57,0.60), mean=0.496, stddev=0.0425], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002), mean=0.00112, stddev=0.000215], oderiv-count=7.72282e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.97,1.0,1.1 1.2,1.3,1.5,1.6,1.7 1.8,2.0,2.0,2.1), mean=1.48, stddev=0.222], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.7,1.7,1.8 1.9,2.0,2.3,2.6,2.7 2.8,2.9,3.0,3.3), mean=2.28, stddev=0.313]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.257143, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09028, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.5,1.5,1.5), mean=1.44, stddev=0.00369], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.57,0.57,0.61 0.63,0.66,0.72,0.79,0.82 0.83,0.85,0.86,0.89), mean=0.719, stddev=0.0703], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08485, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.58,0.78 0.81,0.85,0.97,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.952, stddev=0.12], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.75,0.78,0.81 0.83,0.87,0.94,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.955, stddev=0.0982], bias-{mean,stddev}=-0.127,0.05896, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.61e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.68,0.90,1.1 1.3,1.3,1.5,1.6,1.7 1.8,1.9,2.0,2.2), mean=1.47, stddev=0.231], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.34,0.41 0.43,0.45,0.47,0.51,0.53 0.54,0.57,0.57,0.57), mean=0.475, stddev=0.0449], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.00112, stddev=0.000212], oderiv-count=6.7721e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.88,1.0 1.2,1.3,1.5,1.6,1.8 1.9,2.0,2.0,2.2), mean=1.47, stddev=0.232], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.8,1.9 2.0,2.1,2.3,2.6,2.8 3.0,3.1,3.2,3.8), mean=2.35, stddev=0.36]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.257143, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09348, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.5, stddev=0.00258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.57,0.61 0.64,0.67,0.74,0.81,0.84 0.89,0.92,0.95,0.98), mean=0.743, stddev=0.0826], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08543, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.58,0.76 0.81,0.85,0.95,1.1,1.1 1.2,1.2,1.2,1.2), mean=0.958, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.77,0.79,0.81 0.83,0.87,0.95,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.961, stddev=0.103], bias-{mean,stddev}=-0.09753,0.05832, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.67,0.85,1.2 1.3,1.4,1.5,1.7,1.9 2.0,2.1,2.1,2.2), mean=1.52, stddev=0.264], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.30,0.41 0.42,0.43,0.46,0.48,0.50 0.50,0.54,0.54,0.60), mean=0.455, stddev=0.0425], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.0011, stddev=0.000186], oderiv-count=5.91494e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.66,0.79,1.1 1.3,1.3,1.5,1.6,1.9 2.0,2.1,2.1,2.2), mean=1.51, stddev=0.271], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.8,1.8,1.9 2.1,2.3,2.5,2.8,3.1 3.4,3.5,3.6,3.8), mean=2.54, stddev=0.415]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.257143, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09735, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.56, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.58,0.62 0.64,0.68,0.77,0.86,0.91 0.93,0.96,1.0,1.1), mean=0.772, stddev=0.103], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08869, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.53,0.54,0.71 0.76,0.88,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=0.991, stddev=0.159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.78,0.79,0.83 0.86,0.92,0.99,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.998, stddev=0.106], bias-{mean,stddev}=-0.07825,0.04883, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.15e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.85,1.2 1.3,1.4,1.6,1.8,2.0 2.0,2.3,2.3,2.4), mean=1.61, stddev=0.281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.32,0.39 0.40,0.43,0.45,0.47,0.49 0.49,0.50,0.50,0.53), mean=0.446, stddev=0.0394], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00117, stddev=0.000177], oderiv-count=4.85568e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.80,0.85,1.1 1.3,1.4,1.6,1.8,1.9 2.0,2.3,2.4,2.5), mean=1.61, stddev=0.292], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.1,2.1 2.3,2.5,2.7,3.0,3.2 3.4,3.8,3.8,4.1), mean=2.78, stddev=0.384]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.257143, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09816, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.57, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.56,0.61 0.64,0.67,0.76,0.87,0.95 1.0,1.0,1.1,1.1), mean=0.776, stddev=0.12], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08851, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.63,0.72 0.79,0.88,0.99,1.1,1.2 1.2,1.2,1.3,1.3), mean=0.99, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.77,0.78,0.81 0.86,0.91,0.99,1.1,1.1 1.2,1.2,1.2,1.4), mean=0.996, stddev=0.107], bias-{mean,stddev}=-0.07488,0.0411, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.49e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.82,1.1,1.2 1.3,1.3,1.5,1.7,1.7 1.8,1.9,1.9,2.0), mean=1.5, stddev=0.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.33,0.36 0.38,0.40,0.43,0.46,0.48 0.49,0.49,0.50,0.54), mean=0.427, stddev=0.0421], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00148, stddev=0.000187], oderiv-count=3.87597e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.82,1.1,1.2 1.3,1.3,1.5,1.7,1.8 1.8,1.9,1.9,2.0), mean=1.51, stddev=0.217], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.2,2.3 2.3,2.5,2.8,3.1,3.4 3.5,3.7,3.9,4.1), mean=2.81, stddev=0.402]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.257143, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.093, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.49, stddev=0.00289], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.54,0.57 0.60,0.63,0.71,0.84,0.90 0.95,1.0,1.0,1.1), mean=0.735, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08592, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.53,0.55,0.71 0.74,0.79,0.95,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.955, stddev=0.183], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.77,0.78,0.82 0.84,0.88,0.97,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.968, stddev=0.0935], bias-{mean,stddev}=-0.08252,0.04268, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.81e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.81,0.91,1.0 1.1,1.1,1.2,1.4,1.4 1.5,1.5,1.5,1.9), mean=1.25, stddev=0.162], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.30,0.32 0.34,0.37,0.40,0.43,0.45 0.46,0.47,0.47,0.50), mean=0.397, stddev=0.0444], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.003), mean=0.00209, stddev=0.000241], oderiv-count=2.89709e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.77,0.89,0.98 1.1,1.1,1.2,1.4,1.5 1.5,1.6,1.6,1.9), mean=1.25, stddev=0.176], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.2 2.2,2.5,2.8,3.2,3.4 3.6,3.7,3.7,3.8), mean=2.83, stddev=0.438]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.257143, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09062, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.45, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.49,0.52,0.55 0.57,0.61,0.70,0.83,0.89 0.92,0.96,0.97,1.0), mean=0.715, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0861, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.49,0.50,0.61 0.68,0.77,0.93,1.1,1.2 1.3,1.3,1.3,1.3), mean=0.952, stddev=0.208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.71,0.77,0.82 0.84,0.89,0.96,1.1,1.1 1.1,1.1,1.2,1.2), mean=0.969, stddev=0.0952], bias-{mean,stddev}=-0.09277,0.0605, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.68,0.77,0.83 0.90,0.97,1.1,1.2,1.3 1.3,1.5,1.5,2.1), mean=1.11, stddev=0.184], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.23 0.25,0.29,0.36,0.41,0.44 0.45,0.47,0.48,0.58), mean=0.353, stddev=0.0739], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.003,0.004 0.004,0.004,0.004,0.005), mean=0.00309, stddev=0.000445], oderiv-count=1.81805e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.72,0.74,0.86 0.88,0.96,1.1,1.2,1.3 1.4,1.5,1.5,2.1), mean=1.12, stddev=0.187], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.2,2.2,2.4 2.5,2.6,3.2,3.6,3.9 4.0,4.1,4.2,4.3), mean=3.16, stddev=0.53]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.257143, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0968, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.55, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.57,0.57,0.61 0.62,0.66,0.75,0.89,0.92 0.96,0.99,1.0,1.1), mean=0.766, stddev=0.114], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09312, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.59,0.67 0.76,0.88,1.0,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.03, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.91,0.92,0.93 0.94,0.97,1.0,1.1,1.1 1.2,1.3,1.3,1.3), mean=1.05, stddev=0.0855], bias-{mean,stddev}=-0.08997,0.0804, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.74,0.75,0.84 0.91,1.0,1.2,1.3,1.4 1.5,1.6,1.8,1.8), mean=1.19, stddev=0.202], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.18 0.22,0.30,0.35,0.42,0.46 0.47,0.48,0.49,0.49), mean=0.35, stddev=0.0817], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.005,0.005,0.005,0.006,0.007 0.007,0.007,0.008,0.009), mean=0.00565, stddev=0.000796], oderiv-count=607104
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.70,0.70,0.83 0.90,1.0,1.2,1.3,1.4 1.6,1.6,1.7,1.9), mean=1.17, stddev=0.215], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.7,2.7,2.9 3.1,3.3,3.9,4.5,4.7 5.0,5.3,5.3,5.4), mean=3.91, stddev=0.641]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.257143, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.005, max-change=0.75, params-rms=0.1355, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.6 1.6,1.6,1.6,1.6), mean=1.53, stddev=0.0193], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.86,0.88,0.90 0.95,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.08, stddev=0.099], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1981, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.4,1.5,1.6,1.7,1.7 1.8,1.9,1.9,1.9), mean=1.58, stddev=0.146], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.0 2.1,2.1,2.2,2.3,2.4 2.4,2.5,2.5,2.7), mean=2.24, stddev=0.132], bias-{mean,stddev}=-0.05114,0.1241, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.01e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.8 1.9,2.0,2.2,2.5,2.6 2.7,2.8,2.8,2.9), mean=2.22, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.34 0.35,0.36,0.39,0.41,0.42 0.43,0.45,0.46,0.47), mean=0.387, stddev=0.0277], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00942, stddev=0.00139], oderiv-count=639744
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.8 1.9,2.0,2.2,2.5,2.6 2.7,2.9,2.9,3.0), mean=2.23, stddev=0.301], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.2,4.5,4.7,5.0 5.3,5.6,6.4,7.3,7.6 8.0,8.4,8.7,10), mean=6.46, stddev=1.02]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, params-rms=0.2822, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.2,3.2,3.2,3.2 3.2,3.2,3.2,3.2,3.2 3.2,3.2,3.2,3.2), mean=3.19, stddev=0.00569], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.9 1.9,2.0,2.3,2.5,2.6 2.7,2.7,2.7,2.8), mean=2.24, stddev=0.262], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-4e-08 -3e-08,-2e-08,-1e-09,2e-08,3e-08 5e-08,5e-08,5e-08,6e-08), mean=4.54e-10, stddev=2.6e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,3.4,3.5,3.6 3.6,3.7,3.9,4.1,4.3 4.4,4.5,4.5,4.7), mean=3.92, stddev=0.263]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00271165, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.227, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.15,0.26,0.56 0.89,1.3,1.9,2.2,2.3 2.4,2.6,2.7,3.3), mean=1.72, stddev=0.569], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(13,13,13,13 13,14,14,15,15 16,17,17,17), mean=14.4, stddev=0.904], bias-{mean,stddev}=0.00142,0.325, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1429, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.74,0.82,0.98 1.0,1.1,1.1,1.2,1.2 1.3,1.3,1.3,1.6), mean=1.14, stddev=0.103], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.4 1.4,1.5,1.6,1.7,1.7 1.8,1.8,1.9,2.0), mean=1.61, stddev=0.12], bias-{mean,stddev}=-0.06582,0.1819, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.28e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.74,0.77,0.90 0.94,1.0,1.2,1.4,1.5 1.6,1.8,1.8,2.0), mean=1.2, stddev=0.239], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.40 0.41,0.43,0.48,0.52,0.55 0.59,0.62,0.63,0.66), mean=0.48, stddev=0.0592], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.004,0.005,0.005,0.005 0.006,0.006,0.007,0.01), mean=0.0049, stddev=0.000709], oderiv-count=620160
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.74,0.80,0.88 0.93,1.0,1.2,1.4,1.5 1.7,1.8,1.9,1.9), mean=1.21, stddev=0.244], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.4,1.5 1.5,1.6,1.8,2.0,2.1 2.2,2.3,2.3,3.3), mean=1.83, stddev=0.268]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00271165, l2-regularize=0.0005, max-change=0.75, params-rms=0.1436, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00189], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.85,0.86,0.93 0.98,1.0,1.1,1.3,1.3 1.4,1.4,1.4,1.4), mean=1.14, stddev=0.13], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-4e-08 -3e-08,-2e-08,-3e-09,2e-08,3e-08 4e-08,4e-08,5e-08,6e-08), mean=1.06e-09, stddev=2.43e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.5,1.6,1.7,1.8,1.8 1.9,1.9,1.9,2.0), mean=1.69, stddev=0.119]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0135583, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1911, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.07,0.27 0.68,0.99,1.5,1.9,2.1 2.3,2.4,2.5,3.5), mean=1.42, stddev=0.556], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,12 12,12,12,12,12 12,12,12,13), mean=12.1, stddev=0.234], bias-{mean,stddev}=4.839e-09,0.2314, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-06 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000787, stddev=0.0012], oderiv-count=609280
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/234.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/235.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.19155 tdnnf2.linear:3.98935 tdnnf2.affine:4.50406 tdnnf3.linear:3.45706 tdnnf3.affine:4.27975 tdnnf4.linear:3.1813 tdnnf4.affine:3.96097 tdnnf5.linear:2.91437 tdnnf5.affine:3.37556 tdnnf6.linear:2.68475 tdnnf6.affine:2.97896 tdnnf7.linear:2.53535 tdnnf7.affine:2.89209 tdnnf8.linear:2.40942 tdnnf8.affine:2.80992 tdnnf9.linear:2.46695 tdnnf9.affine:2.89193 tdnnf10.linear:2.52678 tdnnf10.affine:3.11809 tdnnf11.linear:2.63099 tdnnf11.affine:3.26119 tdnnf12.linear:2.80184 tdnnf12.affine:3.45123 tdnnf13.linear:3.10472 tdnnf13.affine:3.91339 prefinal-l:4.17224 prefinal-chain.affine:4.42715 prefinal-chain.linear:4.60015 output.affine:12.0424 prefinal-xent.affine:2.41857 prefinal-xent.linear:1.57584 output-xent.affine:10.1002 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.4275 tdnnf2.linear:15.3812 tdnnf2.affine:15.5079 tdnnf3.linear:13.8976 tdnnf3.affine:14.8644 tdnnf4.linear:13.0731 tdnnf4.affine:13.8116 tdnnf5.linear:12.0476 tdnnf5.affine:11.9352 tdnnf6.linear:11.5561 tdnnf6.affine:11.0311 tdnnf7.linear:11.5564 tdnnf7.affine:10.9757 tdnnf8.linear:11.9653 tdnnf8.affine:11.0105 tdnnf9.linear:12.4609 tdnnf9.affine:11.4004 tdnnf10.linear:12.5645 tdnnf10.affine:11.3708 tdnnf11.linear:11.9046 tdnnf11.affine:11.0482 tdnnf12.linear:11.5998 tdnnf12.affine:11.0914 tdnnf13.linear:12.3909 tdnnf13.affine:11.9975 prefinal-l:12.2661 prefinal-chain.affine:17.9983 prefinal-chain.linear:25.5407 output.affine:117.25 prefinal-xent.affine:13.1215 prefinal-xent.linear:12.9953 output-xent.affine:98.2633 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.334068 tdnnf2.linear:0.258232 tdnnf2.affine:0.289166 tdnnf3.linear:0.248648 tdnnf3.affine:0.285729 tdnnf4.linear:0.242049 tdnnf4.affine:0.284914 tdnnf5.linear:0.240696 tdnnf5.affine:0.282152 tdnnf6.linear:0.231845 tdnnf6.affine:0.269506 tdnnf7.linear:0.218738 tdnnf7.affine:0.262905 tdnnf8.linear:0.200798 tdnnf8.affine:0.254825 tdnnf9.linear:0.197402 tdnnf9.affine:0.253117 tdnnf10.linear:0.200483 tdnnf10.affine:0.273787 tdnnf11.linear:0.220064 tdnnf11.affine:0.294365 tdnnf12.linear:0.24067 tdnnf12.affine:0.310746 tdnnf13.linear:0.250325 tdnnf13.affine:0.326342 prefinal-l:0.340429 prefinal-chain.affine:0.245398 prefinal-chain.linear:0.179541 output.affine:0.102507 prefinal-xent.affine:0.183658 prefinal-xent.linear:0.120857 output-xent.affine:0.102871 ]
# Accounting: time=2 threads=1
# Ended (code 0) at Mon Feb 24 11:54:01 CST 2020, elapsed time 2 seconds
