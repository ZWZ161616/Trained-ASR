# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/23.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/22.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/23.mdl 
# Started at Mon Feb 24 05:54:26 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/23.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1306, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.77,0.86,1.0 1.2,1.5,1.8,2.2,2.5 2.8,2.9,3.4,3.7), mean=1.86, stddev=0.528], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.49,0.53,0.57 0.67,0.78,1.3,1.8,2.1 2.4,2.5,2.6,3.3), mean=1.36, stddev=0.566], bias-{mean,stddev}=-0.09204,0.2296, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.34e+06, self-repaired-proportion=0.101427, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.005,0.03,0.13,0.22,0.28 0.33,0.35,0.36,0.40), mean=0.135, stddev=0.105], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.03,0.03 0.05,0.11,0.38,0.55,0.75 0.80,0.81,0.81,0.83), mean=0.374, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.09 0.10,0.11,0.12,0.14), mean=0.0491, stddev=0.026], oderiv-count=1.31193e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0004,0.0008,0.003 0.007,0.03,0.13,0.21,0.28 0.34,0.36,0.36,0.40), mean=0.134, stddev=0.104], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.008,0.02 0.04,0.10,0.22,0.29,0.31 0.32,0.35,0.35,0.37), mean=0.198, stddev=0.0982]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1412, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3), mean=2.26, stddev=0.00301], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.61,0.63,0.70 0.80,0.97,1.2,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.11, stddev=0.198], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.3,1.3,1.5,1.6,1.7 1.8,1.9,1.9,2.1), mean=1.48, stddev=0.177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.4,1.4,1.5,1.6,1.6 1.7,1.7,1.8,1.8), mean=1.49, stddev=0.114], bias-{mean,stddev}=-0.1192,0.09545, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.35e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.4,1.5,1.7,1.9,2.0 2.0,2.1,2.2,2.2), mean=1.71, stddev=0.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.38,0.39 0.39,0.43,0.52,0.57,0.58 0.59,0.60,0.61,0.63), mean=0.504, stddev=0.0678], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.007), mean=0.00167, stddev=0.000588], oderiv-count=1.19478e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.3,1.3 1.4,1.5,1.7,1.9,2.0 2.0,2.1,2.1,2.2), mean=1.7, stddev=0.217], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.8,1.9,2.0 2.1,2.4,2.8,3.1,3.3 3.5,3.6,3.6,3.8), mean=2.77, stddev=0.444]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1236, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.98, stddev=0.0032], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.76,0.78,0.83 0.86,0.90,0.98,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.984, stddev=0.103], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.0 1.1,1.2,1.3,1.4,1.5 1.6,1.6,1.7,1.7), mean=1.29, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.29, stddev=0.111], bias-{mean,stddev}=-0.1008,0.05266, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.56e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.7 1.7,1.8,1.8,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.91, stddev=0.205], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.39,0.40 0.42,0.44,0.52,0.56,0.56 0.57,0.58,0.59,0.60), mean=0.503, stddev=0.0575], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.002,0.002,0.002,0.003), mean=0.00108, stddev=0.000345], oderiv-count=1.07626e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.6,1.7,1.9,2.1,2.2 2.4,2.4,2.4,2.5), mean=1.9, stddev=0.227], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.2,2.2,2.4 2.5,2.6,3.1,3.4,3.6 3.8,3.9,4.0,5.0), mean=3.07, stddev=0.456]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.72, stddev=0.00272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.68,0.73 0.75,0.79,0.85,0.93,0.95 0.98,1.0,1.0,1.1), mean=0.855, stddev=0.0802], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1028, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.92,0.92,0.97 1.0,1.1,1.1,1.3,1.3 1.4,1.5,1.5,1.5), mean=1.16, stddev=0.123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.97,0.98,1.0 1.1,1.1,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.16, stddev=0.0923], bias-{mean,stddev}=-0.09871,0.04623, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.62e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.7,1.9,2.1,2.2 2.3,2.3,2.3,2.5), mean=1.92, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.38,0.40 0.42,0.44,0.49,0.54,0.55 0.56,0.56,0.57,0.60), mean=0.488, stddev=0.0507], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.000896, stddev=0.000341], oderiv-count=1.00672e+07
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.9, stddev=0.228], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.1,2.5 2.6,2.8,3.1,3.6,3.9 4.1,4.1,4.2,4.9), mean=3.2, stddev=0.514]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.63,0.65,0.67 0.72,0.74,0.80,0.86,0.91 0.93,0.98,0.98,1.1), mean=0.805, stddev=0.0787], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09797, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,0.90,0.94 0.97,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.1, stddev=0.104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.90,0.93,0.96 0.98,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.5), mean=1.1, stddev=0.0947], bias-{mean,stddev}=-0.09924,0.04651, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.6 1.7,1.8,1.9,2.1,2.3 2.3,2.4,2.5,2.6), mean=1.95, stddev=0.221], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.41 0.42,0.45,0.49,0.53,0.55 0.56,0.58,0.58,0.61), mean=0.494, stddev=0.0486], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0006 0.0006,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.002,0.003), mean=0.000843, stddev=0.00033], oderiv-count=8.8841e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.6 1.7,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.7), mean=1.93, stddev=0.225], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.9,2.2,2.5 2.6,2.8,3.1,3.6,4.1 4.3,4.5,4.7,5.1), mean=3.24, stddev=0.569]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09941, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.59, stddev=0.00555], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.64,0.67 0.69,0.73,0.79,0.85,0.89 0.93,0.95,0.96,1.0), mean=0.791, stddev=0.0777], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09438, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.86,0.87,0.90 0.93,0.99,1.0,1.1,1.2 1.2,1.3,1.4,1.4), mean=1.06, stddev=0.107], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.84,0.86,0.91 0.94,0.99,1.1,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.06, stddev=0.0989], bias-{mean,stddev}=-0.09452,0.0417, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.28e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.6,1.6 1.7,1.8,1.9,2.1,2.2 2.3,2.4,2.5,2.7), mean=1.95, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.39,0.41 0.43,0.44,0.48,0.51,0.53 0.55,0.55,0.56,0.57), mean=0.477, stddev=0.0415], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0006 0.0006,0.0007,0.0008,0.0009,0.001 0.001,0.001,0.002,0.002), mean=0.000842, stddev=0.000251], oderiv-count=7.93306e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.5,1.6 1.7,1.8,1.9,2.1,2.2 2.4,2.5,2.5,2.6), mean=1.95, stddev=0.232], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.2,2.4 2.7,2.9,3.2,3.8,4.0 4.2,4.5,4.6,4.9), mean=3.3, stddev=0.569]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1037, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.67,0.68,0.71 0.74,0.76,0.82,0.89,0.92 0.94,1.0,1.0,1.1), mean=0.826, stddev=0.0773], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09629, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.72,0.74,0.89 0.91,0.98,1.1,1.2,1.2 1.3,1.3,1.3,1.5), mean=1.08, stddev=0.131], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.89,0.90 0.93,0.98,1.1,1.2,1.2 1.3,1.3,1.4,1.5), mean=1.08, stddev=0.117], bias-{mean,stddev}=-0.09686,0.05071, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.66e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.6 1.7,1.9,2.1,2.3,2.4 2.5,2.6,2.7,3.2), mean=2.06, stddev=0.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.41 0.42,0.44,0.48,0.51,0.54 0.54,0.54,0.55,0.59), mean=0.48, stddev=0.0421], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0006,0.0007,0.0008,0.0009,0.001 0.001,0.001,0.002,0.002), mean=0.000835, stddev=0.000231], oderiv-count=6.95546e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.6 1.7,1.8,2.1,2.3,2.4 2.5,2.6,2.7,3.3), mean=2.06, stddev=0.311], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.9,2.6 2.7,2.9,3.3,3.9,4.3 4.6,4.9,5.0,6.3), mean=3.42, stddev=0.687]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1029, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.7 1.7,1.7,1.7,1.7), mean=1.65, stddev=0.00417], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.64,0.65,0.69 0.72,0.75,0.82,0.88,0.92 0.94,0.97,0.99,1.1), mean=0.819, stddev=0.0796], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09574, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.75,0.77,0.82 0.91,0.98,1.1,1.2,1.2 1.3,1.3,1.4,1.4), mean=1.07, stddev=0.133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.87,0.89 0.92,0.95,1.1,1.2,1.2 1.3,1.3,1.4,1.4), mean=1.08, stddev=0.126], bias-{mean,stddev}=-0.08067,0.04353, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.85e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,1.4,1.4,1.6 1.7,1.9,2.1,2.3,2.4 2.6,2.8,2.9,3.1), mean=2.1, stddev=0.315], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.39,0.40 0.41,0.42,0.46,0.49,0.51 0.52,0.53,0.54,0.55), mean=0.462, stddev=0.037], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.001,0.001,0.002), mean=0.000823, stddev=0.000186], oderiv-count=5.72717e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.3,1.4,1.5 1.7,1.9,2.1,2.3,2.4 2.6,2.9,2.9,3.2), mean=2.1, stddev=0.328], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.4,2.4,2.7 2.9,3.0,3.6,4.1,4.3 4.7,5.1,5.2,5.4), mean=3.58, stddev=0.639]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1035, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0.00552], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.63,0.66,0.69 0.72,0.74,0.82,0.90,0.94 0.98,1.0,1.0,1.0), mean=0.823, stddev=0.0879], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09588, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.65,0.66,0.84 0.89,0.96,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.07, stddev=0.158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.80,0.81,0.87 0.91,0.97,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.08, stddev=0.131], bias-{mean,stddev}=-0.0675,0.03449, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.31e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.6 1.7,1.9,2.1,2.3,2.4 2.6,2.6,2.8,3.1), mean=2.1, stddev=0.312], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.36,0.38 0.41,0.43,0.46,0.50,0.52 0.53,0.53,0.54,0.54), mean=0.462, stddev=0.0431], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.001), mean=0.000946, stddev=0.00014], oderiv-count=5.01984e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.6 1.7,1.9,2.1,2.3,2.4 2.6,2.7,2.8,3.4), mean=2.09, stddev=0.33], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.5,2.7 2.9,3.1,3.4,4.0,4.3 4.4,4.8,4.9,6.2), mean=3.52, stddev=0.584]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1072, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.72, stddev=0.00486], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.67,0.70 0.72,0.76,0.85,0.94,0.98 1.0,1.1,1.1,1.2), mean=0.852, stddev=0.103], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09886, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.68,0.80 0.83,0.95,1.1,1.2,1.3 1.4,1.5,1.5,1.5), mean=1.1, stddev=0.186], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.81,0.82,0.86 0.90,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.11, stddev=0.142], bias-{mean,stddev}=-0.05605,0.03678, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.7e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.4,1.7 1.8,1.9,2.2,2.4,2.5 2.7,2.9,2.9,3.3), mean=2.19, stddev=0.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.32,0.38 0.40,0.41,0.45,0.49,0.50 0.51,0.52,0.52,0.54), mean=0.449, stddev=0.0435], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.001), mean=0.00106, stddev=0.000136], oderiv-count=3.86227e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.6 1.8,1.9,2.2,2.4,2.6 2.7,2.8,2.8,3.4), mean=2.18, stddev=0.34], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.9,2.9,3.1 3.1,3.4,3.7,4.2,4.5 4.8,4.9,5.0,5.8), mean=3.81, stddev=0.541]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.8, stddev=0.00629], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.68,0.69,0.71 0.76,0.78,0.88,0.99,1.1 1.1,1.2,1.2,1.3), mean=0.893, stddev=0.121], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.71,0.72,0.78 0.88,0.96,1.2,1.3,1.4 1.5,1.5,1.6,1.6), mean=1.16, stddev=0.21], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.89,0.89,0.96 0.99,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.17, stddev=0.128], bias-{mean,stddev}=-0.04041,0.03659, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.84e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.6,1.8 1.9,2.1,2.4,2.6,2.8 2.8,3.0,3.1,3.4), mean=2.35, stddev=0.348], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.32,0.36 0.38,0.41,0.44,0.47,0.48 0.48,0.49,0.49,0.50), mean=0.435, stddev=0.0398], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00126, stddev=0.000183], oderiv-count=2.8263e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.5,1.7 1.9,2.0,2.4,2.6,2.8 2.9,3.0,3.0,3.2), mean=2.35, stddev=0.359], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.0,3.1,3.3 3.5,3.7,4.1,4.7,5.0 5.1,5.4,5.4,5.7), mean=4.21, stddev=0.556]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.86, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.66,0.69,0.73 0.77,0.81,0.91,1.0,1.1 1.2,1.2,1.3,1.3), mean=0.92, stddev=0.134], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1065, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.62,0.71 0.79,0.89,1.2,1.4,1.5 1.6,1.6,1.7,1.7), mean=1.17, stddev=0.272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.94,1.0 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.2, stddev=0.142], bias-{mean,stddev}=-0.03284,0.04187, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.27e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.5 1.7,1.9,2.3,2.6,2.8 2.8,3.0,3.0,4.1), mean=2.28, stddev=0.446], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.24,0.31 0.33,0.36,0.42,0.46,0.47 0.49,0.50,0.51,0.52), mean=0.413, stddev=0.0584], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003), mean=0.00175, stddev=0.000241], oderiv-count=1.84742e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.2,1.4 1.7,2.0,2.3,2.7,2.8 2.9,3.2,3.2,4.2), mean=2.31, stddev=0.477], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.2,3.3,3.4 3.5,3.8,4.4,5.1,5.6 5.8,6.6,6.6,6.9), mean=4.51, stddev=0.788]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.76, stddev=0.00414], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.64,0.67,0.69 0.73,0.77,0.86,0.98,1.0 1.1,1.2,1.2,1.3), mean=0.874, stddev=0.119], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1037, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.66,0.70,0.73 0.79,0.86,1.1,1.4,1.5 1.6,1.7,1.7,1.8), mean=1.14, stddev=0.269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.94,0.96,0.99 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.17, stddev=0.113], bias-{mean,stddev}=-0.0328,0.05759, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.22e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.2,1.4 1.5,1.7,2.0,2.4,2.6 2.7,2.8,2.8,3.0), mean=2.03, stddev=0.412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.23,0.27 0.28,0.31,0.39,0.46,0.48 0.49,0.50,0.51,0.53), mean=0.387, stddev=0.0744], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.004,0.005 0.005,0.005,0.005,0.006), mean=0.00387, stddev=0.000594], oderiv-count=614720
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.0,1.1,1.3 1.5,1.7,2.0,2.4,2.6 2.7,2.9,2.9,2.9), mean=2.03, stddev=0.428], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,3.3,3.4,3.5 3.7,3.8,4.4,5.1,5.4 5.5,5.7,5.8,5.9), mean=4.45, stddev=0.668]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.005, max-change=0.75, params-rms=0.1064, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.2,1.2,1.2,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.2, stddev=0.0055], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.69,0.70,0.71 0.74,0.78,0.86,0.91,0.94 0.97,0.98,1.0,1.0), mean=0.848, stddev=0.0754], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.189, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.94,1.0,1.2 1.3,1.4,1.5,1.7,1.8 1.8,1.9,1.9,2.0), mean=1.5, stddev=0.2], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.8,1.9 1.9,2.0,2.1,2.3,2.3 2.4,2.5,2.5,2.5), mean=2.13, stddev=0.172], bias-{mean,stddev}=-0.02595,0.1231, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.82e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.4,1.5 1.6,1.7,2.0,2.3,2.5 2.6,2.8,2.9,3.2), mean=2.03, stddev=0.359], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.29,0.30,0.33 0.34,0.36,0.39,0.41,0.42 0.44,0.44,0.45,0.46), mean=0.386, stddev=0.0344], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.008 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00989, stddev=0.00111], oderiv-count=594048
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.4,1.5 1.6,1.7,2.0,2.3,2.5 2.6,2.7,2.8,3.0), mean=2.04, stddev=0.347], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,3.5,3.7,3.8 3.9,4.1,4.5,5.1,5.6 6.2,6.2,6.4,6.6), mean=4.66, stddev=0.669]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, params-rms=0.2314, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.6,2.6,2.6 2.6,2.6,2.6,2.6,2.6 2.6,2.6,2.6,2.6), mean=2.62, stddev=0.00324], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.5 1.6,1.7,1.9,2.0,2.0 2.1,2.1,2.1,2.2), mean=1.84, stddev=0.159], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-08,-7e-08,-5e-08,-4e-08 -3e-08,-2e-08,-4e-09,2e-08,3e-08 3e-08,4e-08,5e-08,7e-08), mean=-9.07e-10, stddev=2.4e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.7,2.8,2.9 2.9,3.0,3.2,3.4,3.5 3.6,3.8,3.8,4.0), mean=3.21, stddev=0.251]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0127717, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.1414, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.05,0.11,0.24 0.37,0.55,1.1,1.5,1.6 1.7,1.8,1.8,2.3), mean=1.03, stddev=0.465], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7.3,7.3,7.4,7.9 8.1,8.3,8.9,9.5,10 10,11,11,11), mean=8.95, stddev=0.761], bias-{mean,stddev}=0.0002649,0.2444, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1521, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.83,1.0,1.0 1.1,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.4), mean=1.21, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.5,1.6,1.7,1.8,1.9 1.9,2.0,2.1,2.1), mean=1.72, stddev=0.141], bias-{mean,stddev}=0.01664,0.1421, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.31e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.83,0.86,0.90 0.93,1.0,1.2,1.3,1.4 1.5,1.5,1.6,1.7), mean=1.17, stddev=0.178], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.41 0.42,0.43,0.46,0.49,0.51 0.53,0.54,0.54,0.57), mean=0.464, stddev=0.0386], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.004,0.004,0.005,0.005 0.005,0.006,0.006,0.01), mean=0.00445, stddev=0.000804], oderiv-count=628864
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.83,0.90 0.94,1.0,1.2,1.3,1.4 1.5,1.6,1.6,1.6), mean=1.18, stddev=0.19], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.6,1.7,1.9,2.0,2.1 2.1,2.2,2.2,2.4), mean=1.86, stddev=0.197]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0127717, l2-regularize=0.0005, max-change=0.75, params-rms=0.1624, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.84, stddev=0.000488], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,1.0,1.0,1.1 1.1,1.2,1.3,1.4,1.5 1.5,1.6,1.6,1.7), mean=1.29, stddev=0.136], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-4e-08 -3e-08,-2e-08,-2e-10,2e-08,2e-08 3e-08,5e-08,5e-08,7e-08), mean=-4.98e-12, stddev=2.32e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.8,1.8 1.9,1.9,2.0,2.1,2.1 2.2,2.2,2.2,2.2), mean=2, stddev=0.108]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0638587, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1751, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.15 0.45,0.85,1.3,1.8,2.0 2.1,2.3,2.4,3.4), mean=1.28, stddev=0.559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(10,10,10,11 11,11,11,11,12 12,12,12,12), mean=11.1, stddev=0.347], bias-{mean,stddev}=-4.574e-08,0.2266, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000765, stddev=0.00121], oderiv-count=604928
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/22.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/23.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.26776 tdnnf2.linear:4.6144 tdnnf2.affine:5.05697 tdnnf3.linear:4.32097 tdnnf3.affine:5.09676 tdnnf4.linear:4.06122 tdnnf4.affine:4.71726 tdnnf5.linear:3.77263 tdnnf5.affine:4.47214 tdnnf6.linear:3.63356 tdnnf6.affine:4.25297 tdnnf7.linear:3.66149 tdnnf7.affine:4.22577 tdnnf8.linear:3.40852 tdnnf8.affine:4.09434 tdnnf9.linear:3.34589 tdnnf9.affine:4.06681 tdnnf10.linear:3.37003 tdnnf10.affine:4.11081 tdnnf11.linear:3.50504 tdnnf11.affine:4.36438 tdnnf12.linear:3.65336 tdnnf12.affine:4.57715 tdnnf13.linear:4.00095 tdnnf13.affine:5.16827 prefinal-l:2.20173 prefinal-chain.affine:4.19248 prefinal-chain.linear:3.46491 output.affine:11.554 prefinal-xent.affine:3.38191 prefinal-xent.linear:2.3304 output-xent.affine:11.9705 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.0907 tdnnf2.linear:18.0756 tdnnf2.affine:16.9903 tdnnf3.linear:15.825 tdnnf3.affine:14.7063 tdnnf4.linear:13.7419 tdnnf4.affine:13.2119 tdnnf5.linear:12.9395 tdnnf5.affine:12.6018 tdnnf6.linear:12.7244 tdnnf6.affine:12.1365 tdnnf7.linear:13.2732 tdnnf7.affine:12.3871 tdnnf8.linear:13.1734 tdnnf8.affine:12.2982 tdnnf9.linear:13.2446 tdnnf9.affine:12.303 tdnnf10.linear:13.7241 tdnnf10.affine:12.6774 tdnnf11.linear:14.4125 tdnnf11.affine:13.3312 tdnnf12.linear:14.8752 tdnnf12.affine:13.6483 tdnnf13.linear:14.1185 tdnnf13.affine:13.3008 prefinal-l:9.6264 prefinal-chain.affine:17.1637 prefinal-chain.linear:20.9403 output.affine:73.5526 prefinal-xent.affine:13.8653 prefinal-xent.linear:14.6972 output-xent.affine:90.1745 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.283544 tdnnf2.linear:0.254787 tdnnf2.affine:0.296879 tdnnf3.linear:0.271609 tdnnf3.affine:0.345086 tdnnf4.linear:0.293954 tdnnf4.affine:0.356326 tdnnf5.linear:0.292079 tdnnf5.affine:0.354958 tdnnf6.linear:0.285786 tdnnf6.affine:0.349218 tdnnf7.linear:0.275205 tdnnf7.affine:0.338674 tdnnf8.linear:0.260294 tdnnf8.affine:0.334504 tdnnf9.linear:0.253817 tdnnf9.affine:0.331757 tdnnf10.linear:0.246803 tdnnf10.affine:0.326646 tdnnf11.linear:0.244053 tdnnf11.affine:0.328405 tdnnf12.linear:0.245966 tdnnf12.affine:0.336402 tdnnf13.linear:0.282651 tdnnf13.affine:0.387924 prefinal-l:0.230331 prefinal-chain.affine:0.245398 prefinal-chain.linear:0.165734 output.affine:0.159619 prefinal-xent.affine:0.24493 prefinal-xent.linear:0.158627 output-xent.affine:0.133546 ]
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 05:54:30 CST 2020, elapsed time 4 seconds
