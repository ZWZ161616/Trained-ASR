# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/4.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/3.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/4.mdl 
# Started at Mon Feb 24 05:07:54 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/4.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1028, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.62,0.65 0.70,1.1,1.5,1.8,2.0 2.2,2.4,2.5,2.8), mean=1.45, stddev=0.474], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.52,0.54 0.56,0.63,1.0,1.4,1.7 2.0,2.1,2.3,2.7), mean=1.07, stddev=0.455], bias-{mean,stddev}=0.005615,0.3493, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.48e+06, self-repaired-proportion=0.240411, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,6e-05 0.0003,0.006,0.17,0.37,0.42 0.54,0.72,0.79,1.1), mean=0.202, stddev=0.205], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.002 0.007,0.06,0.42,0.86,0.91 0.94,0.99,1.0,1.0), mean=0.459, stddev=0.353], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.09,0.10 0.11,0.13,0.13,0.14), mean=0.0521, stddev=0.0314], oderiv-count=1.28895e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-05 0.0007,0.006,0.16,0.36,0.41 0.51,0.63,0.69,0.96), mean=0.197, stddev=0.19], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.001 0.007,0.04,0.25,0.30,0.32 0.33,0.34,0.34,0.39), mean=0.197, stddev=0.121]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1255, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=2.01, stddev=0.00458], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.70,0.75 0.80,0.88,0.99,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.995, stddev=0.138], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.94,1.0,1.0 1.1,1.1,1.3,1.4,1.5 1.5,1.6,1.6,1.7), mean=1.28, stddev=0.159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.1,1.1 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.28, stddev=0.114], bias-{mean,stddev}=-0.03804,0.4372, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.3e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.99,1.0 1.1,1.2,1.4,1.6,1.6 1.7,1.9,1.9,1.9), mean=1.38, stddev=0.227], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.33,0.35,0.37 0.39,0.42,0.49,0.55,0.59 0.64,0.67,0.67,0.70), mean=0.493, stddev=0.0816], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.003 0.003,0.003,0.004,0.006), mean=0.00185, stddev=0.00067], oderiv-count=1.2202e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.72,1.1,1.1 1.2,1.3,1.4,1.6,1.7 1.8,1.9,1.9,1.9), mean=1.44, stddev=0.216], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.6,1.6,1.7 1.8,2.0,2.3,2.6,2.7 2.7,2.9,2.9,3.0), mean=2.28, stddev=0.315]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.8, stddev=0.00463], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.72,0.74,0.76 0.80,0.83,0.90,0.96,1.0 1.0,1.1,1.1,1.1), mean=0.898, stddev=0.0821], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1031, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.91,0.91,0.96 1.0,1.1,1.2,1.2,1.3 1.4,1.4,1.4,1.7), mean=1.16, stddev=0.129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.96,0.99 1.0,1.1,1.2,1.2,1.3 1.4,1.4,1.5,1.6), mean=1.16, stddev=0.114], bias-{mean,stddev}=-0.08248,0.3373, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.94e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.2 1.3,1.4,1.7,1.9,2.0 2.0,2.2,2.2,2.4), mean=1.65, stddev=0.262], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.37 0.38,0.41,0.49,0.56,0.58 0.59,0.61,0.61,0.67), mean=0.484, stddev=0.0749], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0007 0.0007,0.0007,0.0009,0.001,0.002 0.002,0.002,0.002,0.003), mean=0.00105, stddev=0.000409], oderiv-count=1.08983e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.3 1.3,1.5,1.7,1.9,2.0 2.1,2.2,2.3,2.5), mean=1.7, stddev=0.261], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.8,1.8,2.0 2.1,2.4,2.7,3.2,3.4 3.5,3.6,3.6,3.9), mean=2.77, stddev=0.475]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09976, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.62,0.64,0.67 0.70,0.74,0.80,0.85,0.88 0.90,0.92,0.94,1.0), mean=0.795, stddev=0.069], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09344, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.81,0.83,0.87 0.91,0.97,1.0,1.1,1.2 1.3,1.3,1.3,1.3), mean=1.05, stddev=0.11], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.87,0.87,0.90 0.94,0.97,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.05, stddev=0.0899], bias-{mean,stddev}=-0.06139,0.3134, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.46e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,1.0,1.2,1.3 1.4,1.5,1.7,1.9,2.1 2.2,2.2,2.4,2.5), mean=1.73, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.37,0.38 0.39,0.41,0.47,0.55,0.57 0.58,0.60,0.61,0.63), mean=0.48, stddev=0.0682], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0005 0.0005,0.0006,0.0007,0.001,0.001 0.001,0.002,0.002,0.004), mean=0.000833, stddev=0.000382], oderiv-count=9.8736e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,1.1,1.3,1.4 1.4,1.5,1.8,2.0,2.1 2.2,2.2,2.4,2.5), mean=1.76, stddev=0.269], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.8,2.1 2.3,2.5,3.0,3.3,3.5 3.7,4.0,4.1,4.1), mean=2.93, stddev=0.485]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09281, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.48, stddev=0.00239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.60,0.63 0.65,0.68,0.74,0.79,0.83 0.85,0.87,0.90,0.92), mean=0.739, stddev=0.0666], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08825, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.75,0.77,0.83 0.86,0.92,0.99,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.994, stddev=0.0983], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.84,0.85,0.87 0.89,0.93,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=0.995, stddev=0.0815], bias-{mean,stddev}=-0.02414,0.3242, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.34e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.3 1.3,1.6,1.8,2.0,2.2 2.2,2.3,2.3,2.5), mean=1.8, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.36 0.39,0.41,0.48,0.54,0.58 0.59,0.61,0.63,0.64), mean=0.482, stddev=0.0696], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0004,0.0005,0.0005 0.0005,0.0005,0.0006,0.0009,0.001 0.001,0.002,0.002,0.003), mean=0.000754, stddev=0.000353], oderiv-count=8.75763e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.2,1.2,1.4 1.5,1.6,1.8,2.1,2.2 2.2,2.4,2.4,2.5), mean=1.83, stddev=0.277], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.8,2.2 2.4,2.6,3.0,3.5,3.7 3.9,4.1,4.2,4.5), mean=3.03, stddev=0.555]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08718, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.39, stddev=0.00357], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.59,0.60 0.63,0.65,0.70,0.74,0.76 0.77,0.80,0.83,0.92), mean=0.695, stddev=0.0548], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08483, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.76,0.78,0.80 0.83,0.87,0.96,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.955, stddev=0.0922], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.78,0.79,0.81 0.83,0.89,0.95,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.955, stddev=0.0911], bias-{mean,stddev}=-0.1106,0.2898, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.77e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.4,1.5,1.8,2.0,2.1 2.2,2.2,2.3,2.6), mean=1.75, stddev=0.269], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.37 0.39,0.41,0.46,0.51,0.53 0.54,0.56,0.57,0.59), mean=0.46, stddev=0.0559], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0004,0.0005,0.0005 0.0005,0.0005,0.0006,0.0008,0.001 0.001,0.002,0.002,0.003), mean=0.000747, stddev=0.000379], oderiv-count=8.01715e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.4 1.4,1.5,1.7,2.0,2.1 2.1,2.2,2.3,2.6), mean=1.75, stddev=0.258], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,2.0,2.3 2.4,2.7,3.0,3.5,3.7 3.8,4.0,4.1,4.5), mean=3.07, stddev=0.488]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09419, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.51, stddev=0.00335], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.61,0.65 0.66,0.70,0.75,0.81,0.84 0.85,0.87,0.90,1.0), mean=0.75, stddev=0.0673], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09938, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.77,0.84,0.95 0.98,1.0,1.1,1.2,1.3 1.3,1.3,1.4,1.4), mean=1.12, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.85,0.88,0.92 0.96,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.12, stddev=0.124], bias-{mean,stddev}=-0.1027,0.3244, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.61e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,1.4,1.6,1.9 2.0,2.1,2.4,2.7,2.8 2.9,3.1,3.2,3.4), mean=2.35, stddev=0.388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.35 0.37,0.40,0.47,0.52,0.54 0.56,0.56,0.57,0.58), mean=0.461, stddev=0.0623], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0004,0.0004,0.0004 0.0004,0.0004,0.0005,0.0006,0.0007 0.0008,0.001,0.001,0.01), mean=0.000616, stddev=0.000873], oderiv-count=7.00435e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,1.5,1.7,1.8 2.0,2.1,2.4,2.7,2.8 2.9,3.2,3.2,3.6), mean=2.42, stddev=0.402], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,2.6,2.6,2.9 3.2,3.5,4.0,4.7,5.2 5.4,5.8,5.8,6.3), mean=4.11, stddev=0.818]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08952, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.43, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.56,0.59,0.61 0.63,0.66,0.71,0.77,0.79 0.81,0.84,0.86,0.87), mean=0.713, stddev=0.0628], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08835, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.76,0.76,0.82 0.86,0.90,0.99,1.1,1.1 1.2,1.2,1.2,1.2), mean=0.993, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.80,0.80,0.82 0.86,0.89,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.994, stddev=0.105], bias-{mean,stddev}=-0.07145,0.3089, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.81e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,1.3,1.3,1.5 1.6,1.8,2.0,2.3,2.5 2.6,2.8,2.8,3.2), mean=2.06, stddev=0.376], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.34,0.37 0.38,0.40,0.45,0.51,0.52 0.54,0.56,0.57,0.58), mean=0.451, stddev=0.0568], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0004,0.0004,0.0005 0.0005,0.0005,0.0006,0.0007,0.0008 0.0009,0.001,0.001,0.005), mean=0.000679, stddev=0.000412], oderiv-count=6.13402e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,1.4,1.4,1.6 1.7,1.8,2.1,2.4,2.5 2.7,2.9,3.1,3.2), mean=2.11, stddev=0.377], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,2.3,2.4,2.7 3.0,3.2,3.6,4.1,4.3 4.5,4.7,4.8,5.8), mean=3.62, stddev=0.619]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0899, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.44, stddev=0.00239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.58,0.59 0.63,0.66,0.71,0.77,0.81 0.84,0.86,0.86,0.88), mean=0.716, stddev=0.0693], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0899, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.66,0.67,0.79 0.87,0.91,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.01, stddev=0.129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.75,0.75,0.81 0.84,0.89,1.0,1.1,1.2 1.2,1.4,1.4,1.4), mean=1.01, stddev=0.135], bias-{mean,stddev}=-0.06035,0.2913, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.14e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.54,1.3,1.5 1.7,1.9,2.1,2.4,2.5 2.6,2.9,3.0,3.1), mean=2.12, stddev=0.385], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.35,0.37 0.39,0.41,0.46,0.51,0.53 0.55,0.57,0.57,0.58), mean=0.46, stddev=0.0605], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.0006,0.0006,0.0007,0.0008,0.0009 0.001,0.001,0.001,0.005), mean=0.000766, stddev=0.000438], oderiv-count=4.8816e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.73,1.3,1.6 1.7,1.9,2.2,2.4,2.5 2.6,2.8,2.9,3.1), mean=2.13, stddev=0.37], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,1.6,2.5,2.7 2.8,3.1,3.6,4.1,4.3 4.4,4.6,4.7,5.2), mean=3.58, stddev=0.626]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09149, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.46, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.59,0.62,0.63 0.64,0.67,0.72,0.79,0.82 0.85,0.89,0.89,0.91), mean=0.729, stddev=0.0677], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08606, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.70,0.70,0.76 0.83,0.89,0.98,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.967, stddev=0.109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.72,0.77,0.80 0.82,0.86,0.94,1.1,1.1 1.2,1.2,1.3,1.4), mean=0.966, stddev=0.125], bias-{mean,stddev}=-0.04531,0.2895, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.54e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.5 1.6,1.8,2.0,2.3,2.4 2.5,2.6,2.6,3.1), mean=2, stddev=0.337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.34,0.37 0.39,0.42,0.46,0.51,0.53 0.55,0.56,0.56,0.58), mean=0.46, stddev=0.0534], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.000941, stddev=0.000164], oderiv-count=3.67738e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.1,1.1,1.5 1.7,1.8,2.0,2.3,2.5 2.7,2.7,2.8,3.1), mean=2.05, stddev=0.343], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.2,2.3,2.6 2.8,3.0,3.4,3.8,4.1 4.4,4.6,4.7,5.0), mean=3.42, stddev=0.52]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09496, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.52, stddev=0.00517], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.63,0.65 0.67,0.69,0.75,0.82,0.85 0.89,0.91,0.92,0.96), mean=0.756, stddev=0.0719], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08967, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.68,0.79 0.82,0.88,1.0,1.1,1.2 1.2,1.2,1.3,1.5), mean=1, stddev=0.143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.78,0.79,0.85 0.87,0.90,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.01, stddev=0.115], bias-{mean,stddev}=-0.06387,0.3123, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.82e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,1.1,1.2,1.4 1.7,1.8,2.1,2.3,2.5 2.6,2.7,2.7,2.8), mean=2.06, stddev=0.35], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.34,0.36 0.38,0.41,0.45,0.50,0.51 0.52,0.55,0.55,0.55), mean=0.449, stddev=0.0517], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0009,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.00114, stddev=0.000194], oderiv-count=2.81619e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,1.1,1.2,1.5 1.7,1.9,2.1,2.4,2.6 2.6,2.8,2.8,3.1), mean=2.13, stddev=0.363], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.3,2.3,2.9 3.0,3.2,3.6,4.0,4.2 4.3,4.6,4.6,5.5), mean=3.58, stddev=0.509]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.62,0.64,0.66 0.69,0.73,0.79,0.86,0.90 0.93,0.98,0.99,1.1), mean=0.797, stddev=0.0842], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09378, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.71,0.77 0.82,0.88,1.0,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.05, stddev=0.169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.78,0.79,0.82 0.87,0.91,1.0,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.05, stddev=0.155], bias-{mean,stddev}=-0.02335,0.3265, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.2e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.93,1.2,1.5 1.7,1.8,2.2,2.4,2.6 2.7,2.8,2.8,3.0), mean=2.17, stddev=0.385], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.27,0.34,0.36 0.38,0.40,0.45,0.49,0.51 0.52,0.54,0.54,0.60), mean=0.448, stddev=0.0556], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.0015, stddev=0.00021], oderiv-count=1.7952e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.2,1.6 1.7,1.9,2.3,2.6,2.7 2.8,2.8,2.9,3.2), mean=2.24, stddev=0.399], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.7,3.0 3.3,3.5,3.8,4.3,4.4 4.6,4.7,4.7,4.8), mean=3.84, stddev=0.468]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.65,0.67 0.71,0.73,0.80,0.86,0.89 0.92,0.95,0.98,1.1), mean=0.798, stddev=0.0768], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09461, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.64,0.74 0.78,0.83,1.1,1.2,1.3 1.4,1.5,1.5,1.6), mean=1.05, stddev=0.209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.78,0.80,0.87 0.90,0.95,1.1,1.2,1.2 1.3,1.3,1.4,1.6), mean=1.06, stddev=0.136], bias-{mean,stddev}=-0.02925,0.3247, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.32e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,1.0,1.1,1.5 1.6,1.8,2.2,2.4,2.6 2.7,2.9,2.9,3.3), mean=2.11, stddev=0.406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.28,0.32 0.35,0.39,0.44,0.48,0.51 0.53,0.55,0.55,0.57), mean=0.434, stddev=0.0625], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.003,0.004 0.004,0.004,0.004,0.005), mean=0.00316, stddev=0.000438], oderiv-count=608192
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,1.0,1.1,1.5 1.6,1.8,2.1,2.4,2.6 2.7,2.8,2.8,3.3), mean=2.12, stddev=0.407], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.9,2.9,3.1 3.2,3.4,3.7,4.2,4.4 4.6,4.7,5.1,5.6), mean=3.79, stddev=0.495]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.005, max-change=0.75, params-rms=0.09406, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.06, stddev=0.00142], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.62,0.65,0.66 0.68,0.71,0.75,0.79,0.81 0.82,0.82,0.83,0.87), mean=0.751, stddev=0.0485], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1573, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.68,0.70,0.80 0.90,1.1,1.3,1.4,1.5 1.6,1.6,1.7,1.7), mean=1.24, stddev=0.241], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.6,1.6,1.8,1.9,2.0 2.0,2.2,2.2,2.3), mean=1.77, stddev=0.178], bias-{mean,stddev}=-0.000973,0.4926, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.15e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.65,0.75,1.0 1.2,1.4,1.8,2.4,2.6 2.7,2.8,3.1,3.2), mean=1.85, stddev=0.546], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.20,0.28 0.31,0.34,0.40,0.45,0.48 0.51,0.53,0.54,0.56), mean=0.395, stddev=0.0736], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.007,0.008,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0086, stddev=0.00165], oderiv-count=607104
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.72,0.78,0.98 1.2,1.4,1.8,2.3,2.6 2.7,2.9,3.0,3.2), mean=1.86, stddev=0.549], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,2.6,2.6,2.8 3.0,3.2,3.7,4.2,4.5 4.7,4.9,5.0,5.1), mean=3.71, stddev=0.608]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, params-rms=0.1825, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.1 2.1,2.1,2.1,2.1,2.1 2.1,2.1,2.1,2.1), mean=2.06, stddev=0.00365], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.4,1.5,1.5,1.6 1.6,1.7,1.7,1.7), mean=1.46, stddev=0.109], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-4e-08 -3e-08,-2e-08,-4e-09,2e-08,2e-08 3e-08,3e-08,4e-08,4e-08), mean=-2.94e-09, stddev=2.12e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.0 2.1,2.1,2.3,2.5,2.6 2.6,2.6,2.6,2.7), mean=2.31, stddev=0.187]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0146746, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.06747, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.008,0.02,0.05 0.11,0.17,0.40,0.75,0.89 0.97,1.1,1.1,1.3), mean=0.452, stddev=0.295], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.3,3.5 3.6,3.8,4.1,4.6,4.9 5.1,5.3,5.8,6.0), mean=4.25, stddev=0.561], bias-{mean,stddev}=5.147e-05,0.1712, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1218, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.48,0.48,0.67 0.72,0.85,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.962, stddev=0.158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.4,1.5,1.5 1.5,1.6,1.6,1.7), mean=1.37, stddev=0.118], bias-{mean,stddev}=0.06336,0.3183, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.07e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.55,0.63 0.75,0.89,1.2,1.4,1.4 1.5,1.6,1.6,1.7), mean=1.13, stddev=0.258], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.31,0.33 0.36,0.41,0.48,0.53,0.56 0.58,0.62,0.62,0.63), mean=0.473, stddev=0.0745], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.004,0.004 0.005,0.006,0.006,0.008), mean=0.00385, stddev=0.000632], oderiv-count=623424
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.62,0.68 0.80,0.93,1.2,1.4,1.4 1.6,1.6,1.6,1.7), mean=1.16, stddev=0.254], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.2,1.3 1.4,1.5,1.8,2.0,2.0 2.1,2.1,2.2,2.2), mean=1.74, stddev=0.247]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0146746, l2-regularize=0.0005, max-change=0.75, params-rms=0.1454, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.7,1.7,1.7,1.7), mean=1.65, stddev=0.00267], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.82,0.86,0.94 1.0,1.1,1.2,1.3,1.3 1.3,1.3,1.3,1.4), mean=1.16, stddev=0.111], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-3e-08 -2e-08,-1e-08,3e-09,2e-08,3e-08 3e-08,3e-08,4e-08,4e-08), mean=2.66e-09, stddev=1.94e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.7,1.8,1.8,1.9 1.9,2.0,2.1,2.3), mean=1.78, stddev=0.115]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0733732, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1112, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.11 0.14,0.26,0.70,1.2,1.4 1.6,1.8,1.9,3.0), mean=0.746, stddev=0.485], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6.1,6.1,6.3,6.3 6.4,6.7,7.1,7.4,7.5 7.7,7.8,8.0,8.6), mean=7.05, stddev=0.446], bias-{mean,stddev}=-1.904e-07,0.2217, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 9e-05,0.0002,0.0004,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000697, stddev=0.00123], oderiv-count=592960
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/3.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/4.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.78609 tdnnf2.linear:4.67558 tdnnf2.affine:5.55109 tdnnf3.linear:4.59673 tdnnf3.affine:5.44642 tdnnf4.linear:4.288 tdnnf4.affine:5.11748 tdnnf5.linear:3.94104 tdnnf5.affine:4.80068 tdnnf6.linear:3.68721 tdnnf6.affine:4.48535 tdnnf7.linear:3.89769 tdnnf7.affine:4.89938 tdnnf8.linear:3.48231 tdnnf8.affine:4.5565 tdnnf9.linear:3.47241 tdnnf9.affine:4.4461 tdnnf10.linear:3.48337 tdnnf10.affine:4.45722 tdnnf11.linear:3.59659 tdnnf11.affine:4.52834 tdnnf12.linear:3.82346 tdnnf12.affine:4.86287 tdnnf13.linear:4.04916 tdnnf13.affine:5.32996 prefinal-l:2.25766 prefinal-chain.affine:4.33617 prefinal-chain.linear:3.4529 output.affine:11.1505 prefinal-xent.affine:3.76614 prefinal-xent.linear:2.86638 output-xent.affine:14.4778 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:17.6976 tdnnf2.linear:16.0688 tdnnf2.affine:15.4013 tdnnf3.linear:14.4207 tdnnf3.affine:13.765 tdnnf4.linear:12.7692 tdnnf4.affine:12.4939 tdnnf5.linear:11.8796 tdnnf5.affine:11.8799 tdnnf6.linear:11.1594 tdnnf6.affine:11.411 tdnnf7.linear:12.0559 tdnnf7.affine:13.2904 tdnnf8.linear:11.4586 tdnnf8.affine:11.8642 tdnnf9.linear:11.5069 tdnnf9.affine:11.9895 tdnnf10.linear:11.7104 tdnnf10.affine:11.5035 tdnnf11.linear:12.1553 tdnnf11.affine:12.031 tdnnf12.linear:12.8232 tdnnf12.affine:12.5619 tdnnf13.linear:12.8226 tdnnf13.affine:12.6591 prefinal-l:8.51364 prefinal-chain.affine:15.2909 prefinal-chain.linear:16.5158 output.affine:35.9913 prefinal-xent.affine:11.62 prefinal-xent.linear:13.1632 output-xent.affine:58.2766 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.403126 tdnnf2.linear:0.306382 tdnnf2.affine:0.365238 tdnnf3.linear:0.333397 tdnnf3.affine:0.397595 tdnnf4.linear:0.34811 tdnnf4.affine:0.40419 tdnnf5.linear:0.344639 tdnnf5.affine:0.397644 tdnnf6.linear:0.341738 tdnnf6.affine:0.384858 tdnnf7.linear:0.339378 tdnnf7.affine:0.385864 tdnnf8.linear:0.314447 tdnnf8.affine:0.38458 tdnnf9.linear:0.313894 tdnnf9.affine:0.364994 tdnnf10.linear:0.313379 tdnnf10.affine:0.386229 tdnnf11.linear:0.31139 tdnnf11.affine:0.373773 tdnnf12.linear:0.315392 tdnnf12.affine:0.385589 tdnnf13.linear:0.3324 tdnnf13.affine:0.421175 prefinal-l:0.273075 prefinal-chain.affine:0.285134 prefinal-chain.linear:0.223645 output.affine:0.351154 prefinal-xent.affine:0.327407 prefinal-xent.linear:0.228468 output-xent.affine:0.275388 ]
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 05:07:58 CST 2020, elapsed time 4 seconds
