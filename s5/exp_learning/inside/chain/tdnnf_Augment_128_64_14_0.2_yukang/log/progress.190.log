# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/190.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/189.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/190.mdl 
# Started at Mon Feb 24 10:47:57 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/190.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1541, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.4,1.6 1.7,1.8,2.1,2.5,3.1 3.2,3.4,3.4,3.6), mean=2.23, stddev=0.516], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.61,0.63,0.70 0.79,0.94,1.5,2.1,2.5 2.8,3.0,3.3,3.9), mean=1.61, stddev=0.665], bias-{mean,stddev}=-0.1522,0.2103, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.36e+06, self-repaired-proportion=0.0195842, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.009,0.03 0.03,0.05,0.11,0.20,0.27 0.29,0.34,0.35,0.39), mean=0.129, stddev=0.0907], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.05,0.09 0.11,0.18,0.30,0.50,0.67 0.73,0.75,0.76,0.81), mean=0.343, stddev=0.197], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.06,0.08,0.09,0.14), mean=0.0395, stddev=0.0178], oderiv-count=1.28666e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.03 0.03,0.05,0.11,0.20,0.26 0.29,0.34,0.35,0.37), mean=0.128, stddev=0.087], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.11 0.12,0.15,0.22,0.29,0.31 0.32,0.33,0.33,0.38), mean=0.218, stddev=0.0728]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.4, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1263, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=2.02, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.77,0.80,0.82 0.85,0.90,1.0,1.1,1.1 1.2,1.3,1.4,1.4), mean=1, stddev=0.119], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.4,1.5,1.6 1.7,1.8,1.8,1.8), mean=1.4, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.3,1.4,1.5,1.5 1.6,1.6,1.7,1.7), mean=1.4, stddev=0.11], bias-{mean,stddev}=-0.1783,0.1052, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.61e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.4 1.5,1.6,1.8,2.1,2.2 2.2,2.3,2.4,2.5), mean=1.83, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.39 0.41,0.45,0.53,0.58,0.59 0.60,0.61,0.61,0.62), mean=0.517, stddev=0.0676], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.006,0.006,0.007), mean=0.00169, stddev=0.000956], oderiv-count=1.19901e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.1,1.1,1.4 1.4,1.6,1.8,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.83, stddev=0.288], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.1 2.3,2.5,2.9,3.2,3.6 3.8,3.9,3.9,4.3), mean=2.89, stddev=0.497]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.4, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.11, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.76, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.70,0.73 0.77,0.80,0.87,0.95,1.0 1.0,1.1,1.1,1.2), mean=0.875, stddev=0.0925], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1121, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.87,0.88,1.0 1.1,1.2,1.2,1.4,1.4 1.5,1.6,1.6,1.7), mean=1.26, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.2,1.3,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.26, stddev=0.1], bias-{mean,stddev}=-0.1812,0.09254, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.75e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,1.3,1.3,1.6 1.7,1.8,2.0,2.2,2.4 2.5,2.5,2.6,2.8), mean=2.03, stddev=0.272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.39,0.41 0.45,0.47,0.52,0.55,0.57 0.58,0.58,0.59,0.59), mean=0.511, stddev=0.049], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0007,0.0008,0.0009,0.001,0.002 0.003,0.004,0.004,0.005), mean=0.00114, stddev=0.000736], oderiv-count=1.07238e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,1.2,1.3,1.6 1.7,1.8,2.0,2.2,2.4 2.4,2.5,2.5,2.8), mean=2, stddev=0.277], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.7,1.9,2.3 2.6,2.8,3.2,3.6,3.8 3.9,4.2,4.5,4.8), mean=3.19, stddev=0.533]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.4, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1055, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.00563], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.67,0.67,0.70 0.74,0.77,0.84,0.90,0.95 0.99,1.0,1.0,1.1), mean=0.84, stddev=0.0835], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.108, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.63,0.71,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.21, stddev=0.147], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,1.0 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.6,2.0), mean=1.21, stddev=0.149], bias-{mean,stddev}=-0.1748,0.1038, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.74e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.85,1.1,1.8 1.9,2.0,2.2,2.4,2.6 2.7,2.8,2.9,3.2), mean=2.21, stddev=0.342], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.42 0.43,0.46,0.51,0.54,0.56 0.57,0.57,0.58,0.59), mean=0.503, stddev=0.0474], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.0006,0.0006,0.0007,0.0008,0.001 0.002,0.003,0.003,0.005), mean=0.000871, stddev=0.000629], oderiv-count=9.8384e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,1.0,1.1,1.7 1.9,2.0,2.2,2.4,2.5 2.7,2.7,2.9,3.4), mean=2.18, stddev=0.345], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.5,1.6,2.8 2.8,3.0,3.4,3.9,4.2 4.5,4.8,5.0,5.7), mean=3.45, stddev=0.648]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.4, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09847, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.58, stddev=0.00263], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.62,0.64,0.66 0.68,0.72,0.78,0.85,0.88 0.91,0.94,0.98,1.0), mean=0.784, stddev=0.0777], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09686, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.64,0.93 0.96,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.09, stddev=0.121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.85,0.87,0.92 0.93,0.99,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.09, stddev=0.112], bias-{mean,stddev}=-0.1444,0.07243, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.98e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,0.92,1.6 1.8,1.9,2.0,2.3,2.4 2.5,2.6,2.7,2.7), mean=2.04, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.42 0.46,0.48,0.52,0.54,0.56 0.56,0.58,0.58,0.58), mean=0.509, stddev=0.0408], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.0009 0.001,0.002,0.003,0.003), mean=0.000848, stddev=0.000371], oderiv-count=8.85248e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.88,0.89,1.5 1.7,1.8,2.0,2.2,2.4 2.5,2.6,2.6,2.7), mean=2.01, stddev=0.301], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,2.5 2.6,2.7,3.0,3.5,3.6 3.9,4.3,4.4,4.9), mean=3.08, stddev=0.502]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.4, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09199, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.47, stddev=0.00169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.59,0.61 0.64,0.67,0.73,0.79,0.82 0.84,0.88,0.90,0.96), mean=0.732, stddev=0.0714], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08811, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.66,0.69,0.86 0.89,0.91,0.99,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.991, stddev=0.106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.83,0.84,0.84 0.87,0.90,0.99,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.992, stddev=0.0997], bias-{mean,stddev}=-0.1431,0.06239, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.16e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.2,1.2,1.3 1.5,1.6,1.8,2.0,2.1 2.2,2.3,2.3,2.4), mean=1.81, stddev=0.254], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.39,0.43 0.45,0.47,0.50,0.53,0.54 0.55,0.57,0.57,0.62), mean=0.496, stddev=0.041], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.000937, stddev=0.000204], oderiv-count=7.77888e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.1,1.2,1.3 1.5,1.6,1.8,1.9,2.1 2.2,2.2,2.3,2.3), mean=1.78, stddev=0.244], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.0,2.0,2.2 2.3,2.5,2.7,3.1,3.3 3.4,3.5,3.6,4.1), mean=2.77, stddev=0.388]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.4, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09382, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.5, stddev=0.00297], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.59,0.63 0.65,0.68,0.74,0.81,0.85 0.88,0.89,0.90,0.98), mean=0.747, stddev=0.0768], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.089, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.69,0.82 0.86,0.91,1.0,1.1,1.1 1.2,1.2,1.2,1.4), mean=1, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.81,0.84 0.87,0.91,0.98,1.1,1.1 1.2,1.2,1.2,1.3), mean=1, stddev=0.104], bias-{mean,stddev}=-0.1275,0.06542, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.72e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.82,1.2,1.4 1.6,1.6,1.8,2.0,2.1 2.2,2.3,2.3,2.5), mean=1.81, stddev=0.268], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.35,0.42 0.43,0.45,0.48,0.51,0.52 0.54,0.55,0.55,0.58), mean=0.478, stddev=0.0415], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0008 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.00095, stddev=0.000201], oderiv-count=6.69875e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.85,1.1,1.4 1.5,1.6,1.8,2.0,2.1 2.2,2.3,2.3,2.4), mean=1.8, stddev=0.266], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,2.1,2.3 2.4,2.6,2.8,3.1,3.4 3.5,3.6,3.8,4.0), mean=2.85, stddev=0.398]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.4, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09687, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00369], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.58,0.60,0.62 0.67,0.70,0.77,0.83,0.88 0.91,0.96,0.97,1.0), mean=0.77, stddev=0.0837], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.61,0.62,0.76 0.85,0.89,1.0,1.1,1.2 1.2,1.2,1.3,1.3), mean=1.01, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.81,0.84 0.89,0.91,1.0,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.01, stddev=0.111], bias-{mean,stddev}=-0.09703,0.07632, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.94,0.95,1.3 1.5,1.7,1.8,2.1,2.3 2.5,2.7,2.7,2.9), mean=1.87, stddev=0.348], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.39 0.42,0.44,0.47,0.49,0.50 0.51,0.53,0.54,0.68), mean=0.461, stddev=0.0461], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0009,0.0009,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.000971, stddev=0.00016], oderiv-count=5.78976e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.89,0.91,1.3 1.5,1.6,1.8,2.1,2.3 2.5,2.7,2.8,2.9), mean=1.85, stddev=0.359], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.2,2.2,2.4 2.6,2.7,3.0,3.4,3.7 4.0,4.2,4.2,4.4), mean=3.07, stddev=0.482]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.4, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1008, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.61, stddev=0.00189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.59,0.62,0.64 0.68,0.72,0.79,0.88,0.94 0.96,1.0,1.0,1.1), mean=0.8, stddev=0.0979], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09193, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.61,0.61,0.71 0.79,0.90,1.0,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.03, stddev=0.162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.77,0.78,0.86 0.90,0.94,1.0,1.1,1.2 1.2,1.2,1.3,1.3), mean=1.03, stddev=0.108], bias-{mean,stddev}=-0.08111,0.06113, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.23e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.93,1.0,1.3 1.5,1.6,1.9,2.1,2.3 2.4,2.6,2.6,2.7), mean=1.87, stddev=0.334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.38 0.40,0.42,0.45,0.47,0.49 0.49,0.50,0.50,0.52), mean=0.446, stddev=0.0427], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00108, stddev=0.000154], oderiv-count=4.9248e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.90,0.97,1.3 1.5,1.6,1.8,2.1,2.3 2.4,2.6,2.6,2.7), mean=1.86, stddev=0.337], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.4,2.5,2.6 2.7,2.8,3.1,3.6,3.7 3.9,4.4,4.4,4.7), mean=3.22, stddev=0.441]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.4, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1026, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.64, stddev=0.00162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.61,0.63,0.65 0.68,0.73,0.80,0.89,0.96 1.0,1.1,1.1,1.2), mean=0.813, stddev=0.109], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09305, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.54,0.69,0.79 0.83,0.90,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.04, stddev=0.157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.80,0.80,0.85 0.89,0.95,1.0,1.2,1.2 1.2,1.3,1.4,1.4), mean=1.05, stddev=0.122], bias-{mean,stddev}=-0.07667,0.04885, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.64e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.92,1.3,1.4 1.5,1.6,1.8,1.9,2.1 2.1,2.2,2.2,2.3), mean=1.76, stddev=0.228], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.35,0.36 0.38,0.40,0.44,0.46,0.47 0.48,0.49,0.49,0.50), mean=0.429, stddev=0.0415], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00132, stddev=0.000161], oderiv-count=3.87597e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.95,1.3,1.3 1.4,1.5,1.8,1.9,2.0 2.1,2.1,2.1,2.3), mean=1.74, stddev=0.241], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.6,2.6,2.7 2.8,2.9,3.3,3.7,4.1 4.3,4.5,4.7,4.7), mean=3.37, stddev=0.494]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.4, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09962, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.59, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.59,0.62 0.64,0.67,0.78,0.89,0.96 1.0,1.0,1.0,1.1), mean=0.788, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09149, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.51,0.57,0.70 0.78,0.83,1.0,1.2,1.3 1.3,1.3,1.4,1.4), mean=1.02, stddev=0.197], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.83,0.86 0.89,0.93,1.0,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.03, stddev=0.101], bias-{mean,stddev}=-0.08682,0.05634, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.97e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.90,0.90,1.1 1.3,1.4,1.5,1.6,1.7 1.8,1.9,1.9,2.2), mean=1.51, stddev=0.208], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.26,0.31 0.32,0.36,0.41,0.45,0.46 0.47,0.48,0.49,0.49), mean=0.399, stddev=0.0537], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00185, stddev=0.000223], oderiv-count=2.81619e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.95,0.96,1.1 1.3,1.4,1.5,1.6,1.8 1.8,1.9,1.9,2.2), mean=1.49, stddev=0.209], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.5,2.5,2.7 2.8,3.0,3.5,4.1,4.3 4.6,4.7,4.7,5.0), mean=3.55, stddev=0.595]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.4, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0983, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.57, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.56,0.59,0.61 0.63,0.67,0.78,0.88,0.93 0.96,1.0,1.0,1.1), mean=0.778, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09141, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.58,0.59,0.69 0.74,0.81,1.0,1.2,1.3 1.3,1.3,1.3,1.5), mean=1.01, stddev=0.211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.83,0.84,0.86 0.88,0.94,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.03, stddev=0.112], bias-{mean,stddev}=-0.09575,0.07464, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.82,0.83,0.97 1.1,1.2,1.4,1.5,1.6 1.7,1.9,2.0,2.6), mean=1.36, stddev=0.243], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.19,0.23 0.26,0.29,0.37,0.43,0.46 0.47,0.50,0.52,0.64), mean=0.366, stddev=0.0806], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.004,0.004,0.004), mean=0.00273, stddev=0.000388], oderiv-count=1.86048e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.83,0.84,0.98 1.1,1.2,1.3,1.5,1.6 1.7,1.9,1.9,2.6), mean=1.36, stddev=0.243], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.8,2.9 3.0,3.2,3.9,4.6,5.1 5.3,5.5,5.6,5.6), mean=3.95, stddev=0.785]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.4, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.67, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.63,0.65 0.69,0.73,0.82,0.94,0.99 1.0,1.0,1.1,1.1), mean=0.829, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09677, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.63,0.64,0.70 0.79,0.91,1.1,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.07, stddev=0.21], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,0.92,0.93 0.96,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.09, stddev=0.0977], bias-{mean,stddev}=-0.09685,0.09775, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.96e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.87,0.88,0.95 1.1,1.3,1.4,1.6,1.7 1.8,1.8,1.8,1.9), mean=1.4, stddev=0.224], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.18 0.21,0.29,0.36,0.43,0.47 0.49,0.51,0.52,0.53), mean=0.356, stddev=0.0923], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.005,0.006,0.006 0.007,0.008,0.008,0.009), mean=0.00531, stddev=0.00082], oderiv-count=612544
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.88,0.90,0.98 1.1,1.2,1.4,1.6,1.7 1.7,1.8,1.8,1.9), mean=1.42, stddev=0.227], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.4,3.4,3.6 3.7,3.9,4.6,5.5,6.0 6.4,6.8,6.8,7.0), mean=4.75, stddev=0.891]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.4, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.005, max-change=0.75, params-rms=0.1367, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.55, stddev=0.00162], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.78,0.85,0.88 0.93,0.99,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.09, stddev=0.113], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2042, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.3 1.4,1.5,1.6,1.8,1.8 1.9,1.9,1.9,2.0), mean=1.63, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.1 2.2,2.2,2.3,2.4,2.5 2.5,2.6,2.6,2.6), mean=2.31, stddev=0.128], bias-{mean,stddev}=-0.07623,0.1239, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.99e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.9,1.9,2.1 2.2,2.3,2.5,2.8,2.9 3.1,3.2,3.3,3.6), mean=2.54, stddev=0.326], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.35,0.36,0.39,0.41,0.42 0.43,0.44,0.45,0.46), mean=0.386, stddev=0.029], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00919, stddev=0.00117], oderiv-count=615808
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,2.0,2.1 2.1,2.2,2.5,2.8,3.0 3.0,3.1,3.2,3.6), mean=2.52, stddev=0.329], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.0,5.5,5.9,6.2 6.5,6.9,7.7,8.5,8.9 9.3,10,11,15), mean=7.81, stddev=1.23]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, params-rms=0.3043, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,3.4,3.4,3.4 3.4,3.4,3.4,3.4,3.4 3.4,3.4,3.4,3.4), mean=3.44, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.7,2.0 2.1,2.2,2.4,2.6,2.8 2.9,2.9,2.9,3.0), mean=2.42, stddev=0.281], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-08,-7e-08,-7e-08,-4e-08 -3e-08,-2e-08,-3e-09,2e-08,3e-08 3e-08,4e-08,4e-08,6e-08), mean=-5.71e-10, stddev=2.52e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.7,3.7,3.7,3.8 3.8,3.9,4.1,4.4,4.6 4.7,4.8,5.0,5.1), mean=4.19, stddev=0.311]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00376783, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2368, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.16,0.25,0.55 0.90,1.3,1.9,2.3,2.4 2.5,2.7,2.9,3.7), mean=1.8, stddev=0.602], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(13,13,13,14 14,14,15,16,16 17,17,18,18), mean=15, stddev=1.06], bias-{mean,stddev}=0.00138,0.3417, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1523, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.73,0.82,1.1 1.1,1.2,1.2,1.3,1.3 1.3,1.4,1.4,1.7), mean=1.21, stddev=0.113], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.6,1.6,1.7,1.8,1.9 1.9,2.0,2.0,2.0), mean=1.72, stddev=0.133], bias-{mean,stddev}=-0.09697,0.1882, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.13e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.91,0.92,0.99 1.0,1.1,1.3,1.5,1.7 1.8,1.9,1.9,2.1), mean=1.32, stddev=0.247], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.37,0.38 0.42,0.44,0.48,0.52,0.55 0.59,0.62,0.63,0.68), mean=0.483, stddev=0.0583], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.004,0.004,0.005,0.005 0.005,0.006,0.007,0.008), mean=0.00457, stddev=0.000591], oderiv-count=610368
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.82,0.83,0.95 1.0,1.1,1.3,1.5,1.7 1.7,1.9,1.9,2.0), mean=1.29, stddev=0.252], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.7,1.9,2.2,2.3 2.3,2.4,2.5,4.2), mean=1.97, stddev=0.315]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00376783, l2-regularize=0.0005, max-change=0.75, params-rms=0.1509, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00138], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.79,0.94,0.97 1.0,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.2, stddev=0.135], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-3e-08,-3e-08 -2e-08,-1e-08,2e-09,2e-08,3e-08 3e-08,4e-08,5e-08,5e-08), mean=3.96e-09, stddev=2e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.7,1.8,1.9,1.9 2.0,2.0,2.0,2.2), mean=1.79, stddev=0.125]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0188391, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1843, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.08,0.24 0.64,0.93,1.4,1.9,2.0 2.2,2.3,2.4,3.2), mean=1.37, stddev=0.549], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,12,12,12,12 12,12,12,12), mean=11.7, stddev=0.231], bias-{mean,stddev}=2.933e-08,0.2549, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,5e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.00077, stddev=0.0012], oderiv-count=598400
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/189.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/190.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.63254 tdnnf2.linear:4.83608 tdnnf2.affine:5.5228 tdnnf3.linear:4.12603 tdnnf3.affine:4.86341 tdnnf4.linear:3.9485 tdnnf4.affine:4.753 tdnnf5.linear:3.6715 tdnnf5.affine:4.1683 tdnnf6.linear:3.29467 tdnnf6.affine:3.7764 tdnnf7.linear:3.28359 tdnnf7.affine:3.63768 tdnnf8.linear:3.13627 tdnnf8.affine:3.59669 tdnnf9.linear:3.1988 tdnnf9.affine:3.62625 tdnnf10.linear:3.24839 tdnnf10.affine:3.85397 tdnnf11.linear:3.34024 tdnnf11.affine:4.06412 tdnnf12.linear:3.50127 tdnnf12.affine:4.29974 tdnnf13.linear:3.86475 tdnnf13.affine:4.78401 prefinal-l:4.36081 prefinal-chain.affine:5.1559 prefinal-chain.linear:5.59816 output.affine:15.352 prefinal-xent.affine:2.79214 prefinal-xent.linear:1.83749 output-xent.affine:12.6901 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.025 tdnnf2.linear:16.1722 tdnnf2.affine:16.0797 tdnnf3.linear:14.0831 tdnnf3.affine:14.5367 tdnnf4.linear:13.5008 tdnnf4.affine:14.0087 tdnnf5.linear:12.6037 tdnnf5.affine:12.5325 tdnnf6.linear:11.7742 tdnnf6.affine:11.4152 tdnnf7.linear:12.0088 tdnnf7.affine:11.5068 tdnnf8.linear:12.3987 tdnnf8.affine:11.6181 tdnnf9.linear:12.9005 tdnnf9.affine:11.8226 tdnnf10.linear:13.1293 tdnnf10.affine:11.9547 tdnnf11.linear:12.7516 tdnnf11.affine:11.7687 tdnnf12.linear:12.5819 tdnnf12.affine:11.7805 tdnnf13.linear:13.3889 tdnnf13.affine:12.4839 prefinal-l:12.3713 prefinal-chain.affine:18.5509 prefinal-chain.linear:27.5378 output.affine:122.371 prefinal-xent.affine:13.9939 prefinal-xent.linear:13.6583 output-xent.affine:95.1034 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.367806 tdnnf2.linear:0.297097 tdnnf2.affine:0.341467 tdnnf3.linear:0.290915 tdnnf3.affine:0.331284 tdnnf4.linear:0.290089 tdnnf4.affine:0.338045 tdnnf5.linear:0.288907 tdnnf5.affine:0.329374 tdnnf6.linear:0.277898 tdnnf6.affine:0.328858 tdnnf7.linear:0.272928 tdnnf7.affine:0.315577 tdnnf8.linear:0.252099 tdnnf8.affine:0.308911 tdnnf9.linear:0.248043 tdnnf9.affine:0.306197 tdnnf10.linear:0.24673 tdnnf10.affine:0.321621 tdnnf11.linear:0.261479 tdnnf11.affine:0.344513 tdnnf12.linear:0.277879 tdnnf12.affine:0.364691 tdnnf13.linear:0.287347 tdnnf13.affine:0.38219 prefinal-l:0.347183 prefinal-chain.affine:0.278506 prefinal-chain.linear:0.203765 output.affine:0.125462 prefinal-xent.affine:0.200325 prefinal-xent.linear:0.1347 output-xent.affine:0.133452 ]
# Accounting: time=5 threads=1
# Ended (code 0) at Mon Feb 24 10:48:02 CST 2020, elapsed time 5 seconds
