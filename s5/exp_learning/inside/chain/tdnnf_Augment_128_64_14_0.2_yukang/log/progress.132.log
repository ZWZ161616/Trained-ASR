# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/132.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/131.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/132.mdl 
# Started at Mon Feb 24 09:20:37 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/132.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1487, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.3,1.3,1.5 1.6,1.8,2.1,2.5,2.8 3.2,3.3,3.4,3.6), mean=2.15, stddev=0.484], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.58,0.61,0.68 0.80,0.93,1.5,2.0,2.5 2.7,2.8,3.1,3.7), mean=1.56, stddev=0.626], bias-{mean,stddev}=-0.1595,0.2137, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.41e+06, self-repaired-proportion=0.0481205, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.004,0.009 0.01,0.04,0.10,0.19,0.26 0.29,0.34,0.35,0.42), mean=0.12, stddev=0.0908], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.05 0.08,0.14,0.31,0.48,0.66 0.71,0.77,0.77,0.82), mean=0.329, stddev=0.204], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.07 0.10,0.13,0.15,0.20), mean=0.05, stddev=0.0288], oderiv-count=1.27287e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.007 0.01,0.04,0.10,0.19,0.25 0.30,0.34,0.36,0.41), mean=0.122, stddev=0.0921], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.04,0.05 0.07,0.14,0.21,0.29,0.31 0.32,0.33,0.35,0.36), mean=0.206, stddev=0.084]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.359788, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.135, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.1 2.2,2.2,2.2,2.2,2.2 2.2,2.2,2.2,2.2), mean=2.16, stddev=0.00648], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.70,0.73,0.85 0.90,0.97,1.1,1.2,1.2 1.3,1.4,1.4,1.5), mean=1.07, stddev=0.139], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1338, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.3,1.4,1.5,1.6,1.7 1.8,1.9,1.9,2.1), mean=1.5, stddev=0.175], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.4,1.4,1.5,1.6,1.7 1.7,1.8,1.8,1.9), mean=1.51, stddev=0.122], bias-{mean,stddev}=-0.1783,0.1137, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.84e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.5 1.7,1.8,2.0,2.3,2.3 2.4,2.5,2.5,2.8), mean=2, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.39 0.40,0.45,0.54,0.58,0.59 0.59,0.60,0.61,0.61), mean=0.518, stddev=0.0684], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.006,0.006,0.007), mean=0.00173, stddev=0.00103], oderiv-count=1.16724e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.2,1.5 1.7,1.8,2.0,2.2,2.4 2.4,2.4,2.5,2.8), mean=2, stddev=0.291], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,2.0,2.4 2.6,2.7,3.2,3.6,3.7 3.8,3.9,4.1,4.1), mean=3.16, stddev=0.508]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.359788, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.87, stddev=0.00324], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.71,0.75,0.77 0.80,0.84,0.93,1.0,1.1 1.1,1.1,1.1,1.3), mean=0.929, stddev=0.097], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1159, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,1.0,1.1 1.2,1.2,1.3,1.4,1.5 1.6,1.6,1.7,1.7), mean=1.3, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.5), mean=1.31, stddev=0.101], bias-{mean,stddev}=-0.1635,0.07674, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.5,1.7 1.7,1.9,2.1,2.3,2.4 2.4,2.5,2.5,2.7), mean=2.06, stddev=0.251], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.47,0.52,0.55,0.57 0.57,0.58,0.59,0.61), mean=0.514, stddev=0.0449], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.002 0.002,0.004,0.005,0.006), mean=0.00122, stddev=0.00074], oderiv-count=1.12474e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.5,1.6 1.7,1.8,2.1,2.3,2.4 2.4,2.5,2.5,2.8), mean=2.07, stddev=0.263], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.9,2.3,2.5 2.7,2.9,3.3,3.8,4.0 4.1,4.3,4.3,4.4), mean=3.31, stddev=0.51]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.359788, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1082, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.73, stddev=0.00258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.70,0.70,0.73 0.76,0.80,0.86,0.91,0.95 0.99,1.0,1.1,1.2), mean=0.862, stddev=0.0798], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1144, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.66,0.79,1.1 1.1,1.2,1.3,1.4,1.5 1.5,1.6,1.6,1.6), mean=1.28, stddev=0.16], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.29, stddev=0.109], bias-{mean,stddev}=-0.1813,0.1006, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.78e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.93,1.4,1.8 1.9,2.0,2.2,2.5,2.7 2.7,2.8,2.8,3.1), mean=2.24, stddev=0.335], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.41,0.42 0.44,0.47,0.51,0.55,0.56 0.57,0.57,0.58,0.60), mean=0.506, stddev=0.0432], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.003,0.003,0.006), mean=0.000956, stddev=0.000718], oderiv-count=9.9792e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.94,1.3,1.7 1.9,2.0,2.3,2.5,2.7 2.7,2.8,2.8,3.1), mean=2.26, stddev=0.343], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.5,2.1,2.9 3.0,3.2,3.6,4.1,4.4 4.5,4.8,5.0,5.2), mean=3.65, stddev=0.603]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.359788, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1034, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.65, stddev=0.0028], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.64,0.67,0.70 0.72,0.76,0.83,0.88,0.93 0.96,0.98,1.0,1.1), mean=0.823, stddev=0.0794], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1057, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.66,0.85,1.0 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.5,1.5), mean=1.19, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.94,0.99,1.0 1.0,1.1,1.2,1.3,1.4 1.4,1.4,1.4,1.4), mean=1.19, stddev=0.117], bias-{mean,stddev}=-0.1596,0.07114, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.95,1.3,1.8 1.9,2.0,2.2,2.5,2.6 2.7,2.9,2.9,3.0), mean=2.22, stddev=0.323], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.41,0.45 0.46,0.47,0.51,0.55,0.56 0.57,0.58,0.58,0.59), mean=0.512, stddev=0.0395], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.002,0.005), mean=0.000891, stddev=0.000498], oderiv-count=8.77344e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.94,1.4,1.8 1.9,2.0,2.3,2.5,2.6 2.7,3.0,3.0,3.2), mean=2.26, stddev=0.342], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.5,2.3,2.9 3.0,3.1,3.4,3.8,4.1 4.4,4.7,4.8,5.4), mean=3.5, stddev=0.553]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.359788, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.098, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.57, stddev=0.0028], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.62,0.65,0.66 0.68,0.72,0.78,0.84,0.87 0.91,0.95,0.99,1.1), mean=0.78, stddev=0.0769], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09612, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.71,0.75,0.92 0.96,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.5), mean=1.08, stddev=0.121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.82,0.85,0.90 0.94,0.99,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.08, stddev=0.106], bias-{mean,stddev}=-0.1476,0.06561, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.3e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,1.1,1.2,1.6 1.6,1.8,1.9,2.2,2.3 2.3,2.4,2.5,2.6), mean=1.93, stddev=0.27], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.43 0.45,0.47,0.50,0.52,0.54 0.55,0.55,0.56,0.58), mean=0.496, stddev=0.0378], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.002,0.002,0.004), mean=0.000991, stddev=0.00033], oderiv-count=7.68077e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,1.1,1.3,1.5 1.6,1.8,1.9,2.2,2.3 2.4,2.5,2.5,2.6), mean=1.93, stddev=0.282], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,2.0,2.2,2.4 2.6,2.7,2.9,3.2,3.5 3.7,3.9,3.9,4.5), mean=2.99, stddev=0.417]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.359788, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09911, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.59, stddev=0.00309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.63,0.64,0.67 0.68,0.72,0.78,0.86,0.90 0.95,0.98,1.0,1.0), mean=0.789, stddev=0.0827], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09418, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.69,0.86 0.92,0.97,1.1,1.2,1.2 1.2,1.3,1.3,1.5), mean=1.06, stddev=0.124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.87,0.92 0.94,0.98,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.06, stddev=0.102], bias-{mean,stddev}=-0.1331,0.06542, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.49e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,1.1,1.1,1.3 1.6,1.7,1.9,2.1,2.3 2.3,2.4,2.5,2.7), mean=1.89, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.36,0.41 0.44,0.46,0.49,0.51,0.53 0.55,0.56,0.57,0.59), mean=0.484, stddev=0.042], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.00102, stddev=0.000221], oderiv-count=6.88211e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,1.1,1.1,1.3 1.6,1.7,1.9,2.0,2.2 2.3,2.5,2.5,2.8), mean=1.88, stddev=0.284], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.9,2.2,2.5 2.6,2.7,2.9,3.3,3.6 3.8,4.0,4.0,4.3), mean=2.99, stddev=0.429]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.359788, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1027, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.7 1.7,1.7,1.7,1.7), mean=1.64, stddev=0.00483], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.63,0.65,0.67 0.70,0.74,0.82,0.89,0.92 0.96,1.0,1.0,1.0), mean=0.817, stddev=0.0874], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09533, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.63,0.66,0.78 0.89,0.97,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.07, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.82,0.84,0.91 0.94,0.98,1.1,1.1,1.2 1.3,1.3,1.3,1.4), mean=1.07, stddev=0.108], bias-{mean,stddev}=-0.1086,0.07943, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,1.0,1.1,1.5 1.6,1.7,1.9,2.1,2.3 2.6,2.7,2.8,2.9), mean=1.93, stddev=0.34], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.34,0.40 0.41,0.44,0.46,0.49,0.51 0.52,0.53,0.53,0.55), mean=0.461, stddev=0.0411], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00103, stddev=0.00017], oderiv-count=5.66458e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.1,1.1,1.5 1.5,1.7,1.9,2.1,2.3 2.6,2.7,2.9,3.2), mean=1.92, stddev=0.346], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.5,2.5,2.7 2.7,2.8,3.1,3.5,3.9 4.2,4.4,4.5,5.3), mean=3.21, stddev=0.493]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.359788, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1042, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.67, stddev=0.00406], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.58,0.63,0.66 0.70,0.74,0.82,0.91,0.97 0.99,1.0,1.1,1.1), mean=0.827, stddev=0.102], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09588, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.62,0.64,0.76 0.81,0.90,1.1,1.2,1.3 1.3,1.3,1.4,1.4), mean=1.07, stddev=0.177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.83,0.85,0.90 0.94,0.97,1.1,1.2,1.2 1.2,1.3,1.4,1.4), mean=1.08, stddev=0.116], bias-{mean,stddev}=-0.09009,0.0646, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.4e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,1.0,1.1,1.3 1.4,1.7,1.9,2.2,2.3 2.5,2.5,2.7,2.7), mean=1.92, stddev=0.334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.36 0.40,0.42,0.45,0.47,0.49 0.50,0.51,0.51,0.52), mean=0.448, stddev=0.0419], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00117, stddev=0.000161], oderiv-count=5.03712e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.2,1.3 1.4,1.7,1.9,2.2,2.3 2.4,2.6,2.6,2.8), mean=1.92, stddev=0.328], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.5,2.6,2.7 2.8,3.0,3.3,3.6,3.8 4.1,4.4,4.6,4.8), mean=3.31, stddev=0.429]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.359788, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1079, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.73, stddev=0.00305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.62,0.64,0.66 0.69,0.75,0.84,0.95,1.0 1.1,1.1,1.1,1.2), mean=0.855, stddev=0.124], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09857, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.64,0.72 0.80,0.94,1.1,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.1, stddev=0.2], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.88,0.91,0.94 0.96,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.11, stddev=0.126], bias-{mean,stddev}=-0.07258,0.05167, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.65e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,1.1,1.3,1.4 1.5,1.7,1.9,2.2,2.3 2.4,2.5,2.5,2.6), mean=1.92, stddev=0.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.30,0.34 0.38,0.40,0.44,0.47,0.48 0.49,0.49,0.49,0.50), mean=0.431, stddev=0.0462], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00137, stddev=0.000182], oderiv-count=3.9239e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,1.2,1.3,1.4 1.5,1.7,1.9,2.1,2.3 2.4,2.5,2.5,2.6), mean=1.91, stddev=0.307], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.8,2.8,2.9 3.0,3.1,3.5,3.9,4.2 4.5,4.9,5.0,5.5), mean=3.57, stddev=0.516]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.359788, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0.00189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.59,0.62,0.64 0.67,0.70,0.81,0.94,0.98 1.1,1.1,1.1,1.2), mean=0.822, stddev=0.126], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09579, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.52,0.57,0.74 0.79,0.87,1.0,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.06, stddev=0.223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.82,0.87,0.90 0.94,0.98,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.08, stddev=0.11], bias-{mean,stddev}=-0.09003,0.05408, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.92e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,1.1,1.1,1.2 1.3,1.4,1.6,1.8,1.9 2.0,2.1,2.1,2.4), mean=1.62, stddev=0.246], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.25,0.31 0.34,0.37,0.41,0.44,0.45 0.46,0.47,0.47,0.51), mean=0.399, stddev=0.0507], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00192, stddev=0.000271], oderiv-count=2.85158e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,1.1,1.1,1.2 1.3,1.4,1.6,1.8,1.9 2.0,2.1,2.1,2.3), mean=1.61, stddev=0.247], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.7,2.7,2.9 2.9,3.1,3.6,4.2,4.4 4.6,4.9,5.0,5.2), mean=3.65, stddev=0.569]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.359788, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1014, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.60,0.62 0.65,0.70,0.78,0.91,0.97 1.0,1.1,1.1,1.1), mean=0.802, stddev=0.121], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09449, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.60,0.62 0.69,0.80,1.0,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.04, stddev=0.262], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.81,0.83,0.88 0.92,0.95,1.1,1.1,1.2 1.3,1.3,1.3,1.5), mean=1.06, stddev=0.124], bias-{mean,stddev}=-0.09876,0.07679, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.2e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.79,0.82,0.89 1.1,1.2,1.4,1.6,1.7 1.8,2.0,2.0,2.2), mean=1.39, stddev=0.27], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.21 0.24,0.29,0.36,0.43,0.46 0.47,0.48,0.49,0.55), mean=0.357, stddev=0.0806], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003,0.003 0.004,0.004,0.004,0.005), mean=0.00295, stddev=0.000499], oderiv-count=1.84416e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.84,0.85,0.93 1.0,1.2,1.3,1.6,1.7 1.8,2.0,2.0,2.2), mean=1.37, stddev=0.256], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.4,2.6,2.8 2.9,3.2,3.7,4.4,4.7 5.0,5.1,5.2,6.0), mean=3.8, stddev=0.706]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.359788, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1045, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.67, stddev=0.00224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.61,0.62,0.65 0.70,0.73,0.81,0.93,0.99 1.0,1.1,1.1,1.1), mean=0.828, stddev=0.116], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09572, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.58,0.61 0.72,0.82,1.0,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.05, stddev=0.265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.89,0.94 0.96,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.08, stddev=0.0993], bias-{mean,stddev}=-0.1169,0.1022, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.83,0.86,0.90 0.98,1.1,1.3,1.5,1.6 1.6,1.7,1.7,2.1), mean=1.3, stddev=0.241], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.16 0.18,0.23,0.33,0.41,0.44 0.47,0.48,0.49,0.56), mean=0.326, stddev=0.0981], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.005,0.005,0.006,0.007,0.007 0.008,0.009,0.009,0.01), mean=0.0059, stddev=0.00104], oderiv-count=596224
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.79,0.82,0.87 0.96,1.0,1.3,1.5,1.6 1.7,1.7,1.8,2.2), mean=1.28, stddev=0.257], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.9,3.2,3.3 3.5,3.7,4.4,5.0,5.3 5.5,5.7,5.8,6.0), mean=4.43, stddev=0.671]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.359788, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.005, max-change=0.75, params-rms=0.1284, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.45, stddev=0.00685], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.79,0.81,0.84 0.88,0.94,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.02, stddev=0.102], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2151, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.6,1.7,1.8,1.9 1.9,2.0,2.0,2.1), mean=1.72, stddev=0.136], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.2 2.2,2.3,2.4,2.5,2.6 2.7,2.7,2.7,2.8), mean=2.43, stddev=0.149], bias-{mean,stddev}=-0.0449,0.132, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.07e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,2.0 2.0,2.1,2.4,2.7,2.8 2.9,3.0,3.0,3.4), mean=2.4, stddev=0.298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.35 0.36,0.37,0.40,0.42,0.43 0.44,0.46,0.46,0.46), mean=0.396, stddev=0.0299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0101, stddev=0.00136], oderiv-count=604928
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 2.0,2.1,2.3,2.6,2.7 2.8,2.9,2.9,3.2), mean=2.33, stddev=0.288], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.3,5.6,5.7,5.9 6.1,6.3,6.9,7.6,8.0 8.4,9.0,9.8,10), mean=7, stddev=0.896]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, params-rms=0.292, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.3,3.3 3.3,3.3,3.3,3.3,3.3 3.3,3.3,3.3,3.3), mean=3.3, stddev=0.00138], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.7,1.9 2.1,2.1,2.3,2.5,2.6 2.7,2.8,2.8,2.9), mean=2.32, stddev=0.24], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-4e-08,-4e-08 -3e-08,-2e-08,-6e-09,2e-08,2e-08 4e-08,4e-08,4e-08,6e-08), mean=-2.62e-09, stddev=2.44e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.5,3.5,3.6,3.7 3.7,3.8,4.0,4.2,4.3 4.5,4.6,4.7,5.2), mean=4.03, stddev=0.286]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00575729, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2287, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.14,0.23,0.51 0.81,1.2,1.9,2.2,2.4 2.5,2.6,2.7,3.4), mean=1.72, stddev=0.612], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,13,13 14,14,14,15,16 16,17,17,17), mean=14.5, stddev=0.984], bias-{mean,stddev}=0.001164,0.3088, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.156, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.82,0.85,1.1 1.1,1.2,1.3,1.3,1.3 1.4,1.4,1.4,1.7), mean=1.24, stddev=0.109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.6,1.7,1.7,1.8,1.9 1.9,2.0,2.0,2.2), mean=1.76, stddev=0.117], bias-{mean,stddev}=-0.08379,0.2171, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.29e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.77,0.80,0.82 0.91,0.99,1.2,1.4,1.6 1.7,1.9,1.9,2.0), mean=1.22, stddev=0.271], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.38,0.39 0.40,0.44,0.47,0.53,0.57 0.59,0.62,0.64,0.68), mean=0.486, stddev=0.0626], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.005,0.005,0.006 0.006,0.006,0.007,0.01), mean=0.00497, stddev=0.000741], oderiv-count=610368
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.75,0.82,0.85 0.90,0.96,1.2,1.5,1.6 1.7,1.9,2.0,2.1), mean=1.22, stddev=0.281], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.5 1.5,1.6,1.8,2.0,2.1 2.1,2.2,2.2,2.8), mean=1.81, stddev=0.234]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00575729, l2-regularize=0.0005, max-change=0.75, params-rms=0.1531, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.73, stddev=0.00138], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.98,0.99,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.22, stddev=0.117], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-3e-08,-3e-08 -3e-08,-2e-08,-1e-09,1e-08,2e-08 3e-08,3e-08,3e-08,4e-08), mean=-1.32e-09, stddev=1.84e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.7,1.8,1.8,2.0,2.0 2.0,2.1,2.1,2.1), mean=1.85, stddev=0.115]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0287865, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1863, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.25 0.64,0.93,1.4,1.9,2.1 2.2,2.3,2.4,3.4), mean=1.38, stddev=0.555], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,12,12,12,12 12,12,12,12), mean=11.8, stddev=0.216], bias-{mean,stddev}=1.422e-08,0.241, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,9e-06 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000774, stddev=0.0012], oderiv-count=623424
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/131.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/132.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.62079 tdnnf2.linear:5.23593 tdnnf2.affine:5.97673 tdnnf3.linear:4.4281 tdnnf3.affine:5.16381 tdnnf4.linear:4.13068 tdnnf4.affine:5.07612 tdnnf5.linear:4.01924 tdnnf5.affine:4.69028 tdnnf6.linear:3.60304 tdnnf6.affine:4.19018 tdnnf7.linear:3.47475 tdnnf7.affine:3.97546 tdnnf8.linear:3.38542 tdnnf8.affine:3.80926 tdnnf9.linear:3.3979 tdnnf9.affine:3.92134 tdnnf10.linear:3.48707 tdnnf10.affine:4.14562 tdnnf11.linear:3.59597 tdnnf11.affine:4.27446 tdnnf12.linear:3.7143 tdnnf12.affine:4.43936 tdnnf13.linear:4.0753 tdnnf13.affine:4.94736 prefinal-l:3.39072 prefinal-chain.affine:5.41552 prefinal-chain.linear:4.96809 output.affine:15.4072 prefinal-xent.affine:2.9992 prefinal-xent.linear:1.856 output-xent.affine:13.362 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.1387 tdnnf2.linear:17.2782 tdnnf2.affine:17.2915 tdnnf3.linear:14.9387 tdnnf3.affine:14.976 tdnnf4.linear:13.8525 tdnnf4.affine:14.8291 tdnnf5.linear:13.236 tdnnf5.affine:13.6695 tdnnf6.linear:12.544 tdnnf6.affine:12.438 tdnnf7.linear:12.6859 tdnnf7.affine:12.1717 tdnnf8.linear:13.1515 tdnnf8.affine:12.2973 tdnnf9.linear:13.336 tdnnf9.affine:12.3369 tdnnf10.linear:13.8171 tdnnf10.affine:12.6577 tdnnf11.linear:13.3064 tdnnf11.affine:12.3185 tdnnf12.linear:12.9798 tdnnf12.affine:12.1771 tdnnf13.linear:13.3757 tdnnf13.affine:12.3769 prefinal-l:11.6214 prefinal-chain.affine:19.5342 prefinal-chain.linear:26.4327 output.affine:117.927 prefinal-xent.affine:14.359 prefinal-xent.linear:13.8578 output-xent.affine:95.9498 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.344048 tdnnf2.linear:0.303802 tdnnf2.affine:0.345885 tdnnf3.linear:0.297374 tdnnf3.affine:0.344869 tdnnf4.linear:0.296648 tdnnf4.affine:0.342396 tdnnf5.linear:0.303228 tdnnf5.affine:0.343825 tdnnf6.linear:0.2884 tdnnf6.affine:0.340073 tdnnf7.linear:0.273586 tdnnf7.affine:0.327482 tdnnf8.linear:0.258497 tdnnf8.affine:0.310816 tdnnf9.linear:0.255052 tdnnf9.affine:0.317515 tdnnf10.linear:0.252097 tdnnf10.affine:0.327724 tdnnf11.linear:0.270195 tdnnf11.affine:0.346321 tdnnf12.linear:0.286646 tdnnf12.affine:0.364911 tdnnf13.linear:0.305869 tdnnf13.affine:0.400751 prefinal-l:0.292338 prefinal-chain.affine:0.277278 prefinal-chain.linear:0.188352 output.affine:0.130855 prefinal-xent.affine:0.208236 prefinal-xent.linear:0.134 output-xent.affine:0.139188 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 09:20:40 CST 2020, elapsed time 3 seconds
