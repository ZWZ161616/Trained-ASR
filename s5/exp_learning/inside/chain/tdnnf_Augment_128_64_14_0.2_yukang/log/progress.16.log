# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/16.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/15.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/16.mdl 
# Started at Mon Feb 24 05:31:32 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/16.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1277, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.70,0.71,0.96 1.2,1.4,1.8,2.2,2.5 2.6,2.9,3.5,3.6), mean=1.81, stddev=0.547], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.47,0.49,0.52 0.62,0.76,1.3,1.8,2.1 2.3,2.5,2.6,3.3), mean=1.33, stddev=0.566], bias-{mean,stddev}=-0.0779,0.2432, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.29e+06, self-repaired-proportion=0.0711853, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.004 0.006,0.03,0.13,0.23,0.30 0.34,0.37,0.37,0.40), mean=0.143, stddev=0.112], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.06,0.11,0.38,0.63,0.78 0.80,0.82,0.84,0.90), mean=0.39, stddev=0.256], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.07,0.09 0.10,0.11,0.13,0.16), mean=0.0488, stddev=0.0268], oderiv-count=1.23611e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0005,0.0007,0.002 0.006,0.02,0.13,0.24,0.30 0.34,0.37,0.37,0.39), mean=0.143, stddev=0.113], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.009,0.02 0.04,0.08,0.23,0.30,0.32 0.33,0.35,0.36,0.38), mean=0.202, stddev=0.105]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1408, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3), mean=2.25, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.63,0.65,0.72 0.80,0.96,1.1,1.3,1.3 1.4,1.4,1.5,1.5), mean=1.11, stddev=0.197], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.4,1.6,1.7 1.7,1.9,1.9,2.0), mean=1.45, stddev=0.182], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.3 1.3,1.4,1.5,1.5,1.6 1.6,1.7,1.7,1.8), mean=1.46, stddev=0.118], bias-{mean,stddev}=-0.1106,0.1137, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.3,1.4 1.4,1.5,1.7,1.9,2.0 2.0,2.0,2.1,2.1), mean=1.7, stddev=0.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.38,0.39 0.41,0.43,0.50,0.56,0.57 0.59,0.60,0.60,0.63), mean=0.498, stddev=0.0659], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.007), mean=0.00165, stddev=0.000586], oderiv-count=1.15876e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.4,1.5,1.7,1.9,2.0 2.0,2.1,2.1,2.2), mean=1.7, stddev=0.209], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.8,1.9,2.0 2.1,2.3,2.8,3.1,3.2 3.3,3.5,3.6,3.8), mean=2.73, stddev=0.415]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1234, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.97, stddev=0.00939], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.75,0.79,0.83 0.86,0.91,0.98,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.982, stddev=0.098], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.1,1.3,1.4,1.5 1.5,1.6,1.6,1.7), mean=1.28, stddev=0.136], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.1,1.1 1.1,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.28, stddev=0.117], bias-{mean,stddev}=-0.09798,0.05969, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.47e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.5,1.6 1.7,1.7,1.9,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.91, stddev=0.212], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.41 0.41,0.44,0.51,0.56,0.57 0.58,0.59,0.59,0.60), mean=0.503, stddev=0.0577], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.001,0.001,0.001 0.002,0.002,0.002,0.003), mean=0.00105, stddev=0.000332], oderiv-count=1.11116e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.5,1.6 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.91, stddev=0.216], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.2,2.2,2.3 2.5,2.7,3.1,3.4,3.7 3.9,4.1,4.3,4.4), mean=3.1, stddev=0.485]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1072, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.72, stddev=0.00244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.67,0.70,0.73 0.76,0.79,0.85,0.92,0.95 0.97,1.0,1.0,1.1), mean=0.854, stddev=0.0762], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1016, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.90,0.95 1.0,1.1,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.14, stddev=0.121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.99 1.0,1.1,1.1,1.2,1.3 1.3,1.3,1.4,1.4), mean=1.15, stddev=0.097], bias-{mean,stddev}=-0.09291,0.05002, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.71e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.7,1.9,2.1,2.2 2.2,2.3,2.4,2.5), mean=1.91, stddev=0.214], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.40 0.42,0.44,0.49,0.54,0.55 0.56,0.56,0.56,0.58), mean=0.487, stddev=0.0503], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0006 0.0006,0.0007,0.0008,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.000872, stddev=0.000336], oderiv-count=1.03312e+07
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.6,1.7,1.9,2.1,2.2 2.3,2.3,2.3,2.6), mean=1.9, stddev=0.223], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.2,2.2,2.4 2.6,2.8,3.1,3.6,3.8 4.0,4.2,4.2,4.7), mean=3.17, stddev=0.491]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0997, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.62,0.65,0.68 0.70,0.74,0.79,0.86,0.88 0.90,0.96,0.97,1.0), mean=0.794, stddev=0.0712], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09574, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.89,0.91 0.95,0.98,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.08, stddev=0.0995], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.89,0.94 0.97,1.0,1.1,1.1,1.2 1.3,1.3,1.3,1.3), mean=1.08, stddev=0.0898], bias-{mean,stddev}=-0.08687,0.04596, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.68e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.7 1.7,1.8,2.0,2.1,2.3 2.3,2.4,2.5,2.6), mean=1.97, stddev=0.215], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.40 0.41,0.45,0.50,0.53,0.56 0.57,0.57,0.59,0.61), mean=0.49, stddev=0.0516], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.0006,0.0006,0.0007,0.0009,0.001 0.001,0.001,0.002,0.003), mean=0.000799, stddev=0.00033], oderiv-count=8.77344e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.7 1.7,1.8,1.9,2.1,2.2 2.3,2.4,2.5,2.7), mean=1.95, stddev=0.224], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.1,2.3,2.5 2.7,2.9,3.1,3.7,4.0 4.1,4.5,4.5,5.0), mean=3.28, stddev=0.535]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09712, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.63,0.64,0.66 0.69,0.72,0.77,0.83,0.86 0.89,0.91,0.95,0.99), mean=0.774, stddev=0.0705], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09278, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.82,0.84,0.88 0.92,0.97,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.04, stddev=0.102], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.83,0.86,0.90 0.92,0.97,1.0,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.05, stddev=0.0982], bias-{mean,stddev}=-0.08704,0.04201, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.28e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.8,1.8,2.0,2.1,2.3 2.4,2.6,2.6,2.8), mean=1.99, stddev=0.219], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.39,0.40 0.41,0.43,0.48,0.51,0.53 0.54,0.55,0.56,0.57), mean=0.473, stddev=0.0443], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.0006,0.0006,0.0007,0.0009,0.001 0.001,0.002,0.002,0.003), mean=0.000792, stddev=0.000298], oderiv-count=7.52659e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.7,1.8,2.0,2.2,2.3 2.4,2.5,2.6,2.8), mean=2, stddev=0.222], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.4,2.4,2.6 2.7,2.9,3.3,3.8,4.1 4.2,4.4,4.5,5.0), mean=3.38, stddev=0.503]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0.00827], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.67,0.68,0.70 0.72,0.75,0.82,0.90,0.92 0.97,0.99,1.0,1.1), mean=0.828, stddev=0.0836], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09709, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.79,0.82,0.92 0.95,1.0,1.1,1.2,1.2 1.3,1.3,1.4,1.5), mean=1.09, stddev=0.125], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.88,0.89,0.93 0.95,0.98,1.1,1.2,1.2 1.3,1.3,1.4,1.4), mean=1.09, stddev=0.114], bias-{mean,stddev}=-0.09386,0.05747, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.39e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,1.4,1.4,1.7 1.8,2.0,2.2,2.4,2.5 2.6,2.7,2.7,3.3), mean=2.17, stddev=0.307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.41 0.42,0.44,0.49,0.52,0.53 0.54,0.55,0.55,0.61), mean=0.484, stddev=0.0434], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.0006,0.0006,0.0007,0.0009,0.0009 0.001,0.001,0.001,0.004), mean=0.000764, stddev=0.000312], oderiv-count=7.0288e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,1.3,1.5,1.7 1.8,1.9,2.1,2.4,2.5 2.6,2.7,2.7,3.3), mean=2.14, stddev=0.317], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.8,2.2,2.6 2.8,3.0,3.4,4.0,4.4 4.6,5.1,5.2,6.1), mean=3.51, stddev=0.696]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1007, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.61, stddev=0.00476], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.63,0.65,0.69 0.71,0.74,0.80,0.86,0.90 0.93,0.94,0.95,1.1), mean=0.802, stddev=0.0732], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09336, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.71,0.75,0.81 0.89,0.94,1.1,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.05, stddev=0.127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.80,0.80,0.85 0.89,0.93,1.0,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.05, stddev=0.127], bias-{mean,stddev}=-0.07535,0.04467, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.4,1.4,1.6 1.8,2.0,2.1,2.3,2.5 2.6,2.7,2.8,2.9), mean=2.13, stddev=0.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.39,0.40 0.41,0.43,0.46,0.50,0.51 0.52,0.53,0.53,0.55), mean=0.463, stddev=0.0389], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0006,0.0006 0.0006,0.0007,0.0007,0.0009,0.0009 0.001,0.001,0.001,0.002), mean=0.000778, stddev=0.000185], oderiv-count=5.80019e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.4,1.4,1.6 1.8,2.0,2.1,2.4,2.5 2.6,2.7,2.8,2.9), mean=2.13, stddev=0.305], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.6,2.6,2.7 2.9,3.1,3.6,4.1,4.4 4.7,5.1,5.2,5.4), mean=3.65, stddev=0.631]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1019, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.00258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.61,0.65,0.67 0.71,0.74,0.81,0.88,0.92 0.95,0.97,1.0,1.0), mean=0.811, stddev=0.0813], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09453, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.65,0.84 0.89,0.94,1.1,1.2,1.2 1.3,1.4,1.4,1.4), mean=1.06, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.79,0.83,0.87 0.89,0.94,1.0,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.06, stddev=0.133], bias-{mean,stddev}=-0.06471,0.04042, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.3,1.3,1.6 1.8,2.0,2.2,2.3,2.5 2.6,2.7,2.8,3.0), mean=2.14, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.36,0.38 0.41,0.43,0.47,0.50,0.52 0.53,0.54,0.54,0.56), mean=0.465, stddev=0.0438], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0007,0.0007 0.0007,0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.001), mean=0.000883, stddev=0.000137], oderiv-count=4.70016e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.3,1.7 1.8,1.9,2.2,2.3,2.5 2.6,2.8,2.9,3.1), mean=2.15, stddev=0.327], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.4,2.5,2.8 2.9,3.3,3.5,3.9,4.3 4.6,4.7,4.8,5.8), mean=3.6, stddev=0.55]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1049, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.68, stddev=0.0116], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.62,0.65,0.69 0.72,0.75,0.84,0.91,0.95 0.98,1.0,1.1,1.2), mean=0.834, stddev=0.0954], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09681, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.67,0.72,0.79 0.85,0.94,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.08, stddev=0.167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.82,0.83,0.86 0.91,0.97,1.1,1.2,1.3 1.3,1.3,1.3,1.3), mean=1.09, stddev=0.136], bias-{mean,stddev}=-0.05468,0.03733, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.55e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.4,1.7 1.9,2.1,2.2,2.4,2.6 2.7,2.8,2.8,3.0), mean=2.23, stddev=0.308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.34,0.38 0.41,0.42,0.45,0.49,0.51 0.51,0.52,0.53,0.56), mean=0.455, stddev=0.0425], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.001), mean=0.00101, stddev=0.000128], oderiv-count=3.75955e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.7 1.8,2.0,2.2,2.5,2.6 2.7,2.9,2.9,3.0), mean=2.23, stddev=0.328], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.9,2.9,3.1 3.2,3.4,3.7,4.1,4.5 4.7,5.0,5.2,5.6), mean=3.81, stddev=0.513]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0.00783], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.71 0.74,0.78,0.86,0.95,1.0 1.1,1.1,1.1,1.2), mean=0.876, stddev=0.11], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1022, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.68,0.69,0.82 0.86,0.98,1.1,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.14, stddev=0.196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.85,0.90,0.96 1.0,1.1,1.1,1.3,1.3 1.3,1.4,1.4,1.4), mean=1.15, stddev=0.123], bias-{mean,stddev}=-0.04114,0.03988, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.88e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.5,1.9 2.0,2.2,2.4,2.6,2.8 2.9,3.0,3.0,3.3), mean=2.4, stddev=0.335], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.34,0.36 0.40,0.42,0.45,0.48,0.49 0.49,0.50,0.51,0.51), mean=0.444, stddev=0.0374], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002), mean=0.0012, stddev=0.000165], oderiv-count=2.71507e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.8 1.9,2.1,2.4,2.7,2.7 2.9,3.0,3.0,3.4), mean=2.38, stddev=0.352], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.9,3.0,3.2,3.4 3.5,3.6,4.1,4.6,4.9 5.1,5.3,5.4,5.6), mean=4.14, stddev=0.547]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1155, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.85, stddev=0.00493], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.71,0.75 0.78,0.81,0.90,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.916, stddev=0.12], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.62,0.65,0.73 0.78,0.92,1.2,1.4,1.5 1.5,1.6,1.6,1.6), mean=1.16, stddev=0.254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,0.91,0.96 1.0,1.1,1.2,1.3,1.3 1.4,1.5,1.5,1.7), mean=1.18, stddev=0.147], bias-{mean,stddev}=-0.03238,0.04577, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.17e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.6 1.8,2.0,2.4,2.7,2.8 3.0,3.0,3.0,3.9), mean=2.36, stddev=0.431], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.28,0.33 0.36,0.39,0.43,0.47,0.49 0.50,0.51,0.51,0.54), mean=0.427, stddev=0.0553], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00166, stddev=0.000233], oderiv-count=1.8311e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.4 1.7,1.9,2.4,2.6,2.8 2.9,3.0,3.0,3.7), mean=2.3, stddev=0.45], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,3.1,3.2,3.3 3.4,3.7,4.2,4.8,5.1 5.4,5.7,5.8,6.3), mean=4.27, stddev=0.666]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.79, stddev=0.00426], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.69,0.71 0.75,0.79,0.87,0.98,1.0 1.1,1.2,1.2,1.3), mean=0.885, stddev=0.115], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.68,0.68,0.76 0.81,0.92,1.1,1.4,1.5 1.6,1.7,1.7,1.8), mean=1.16, stddev=0.256], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.95,0.95,0.98 1.0,1.1,1.2,1.3,1.3 1.4,1.5,1.5,1.5), mean=1.18, stddev=0.132], bias-{mean,stddev}=-0.02827,0.06127, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.24e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.5 1.6,1.8,2.1,2.5,2.7 2.9,3.0,3.1,3.2), mean=2.16, stddev=0.436], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.27,0.29 0.31,0.34,0.41,0.46,0.48 0.50,0.51,0.52,0.54), mean=0.402, stddev=0.0663], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.004,0.004 0.005,0.005,0.005,0.005), mean=0.00363, stddev=0.000535], oderiv-count=609280
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.4 1.5,1.7,2.1,2.5,2.7 2.8,3.0,3.1,3.3), mean=2.11, stddev=0.46], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.1,3.2,3.4 3.5,3.8,4.2,4.9,5.1 5.3,5.5,5.5,5.6), mean=4.3, stddev=0.608]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.005, max-change=0.75, params-rms=0.1035, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.2,1.2,1.2,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.17, stddev=0.00646], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.68,0.70,0.72 0.73,0.76,0.83,0.88,0.91 0.92,0.96,0.96,0.98), mean=0.826, stddev=0.066], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.183, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.78,0.81,1.1 1.2,1.3,1.4,1.7,1.8 1.8,1.8,1.9,1.9), mean=1.45, stddev=0.224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.8,1.9,2.1,2.2,2.3 2.3,2.4,2.5,2.6), mean=2.06, stddev=0.181], bias-{mean,stddev}=-0.02972,0.1534, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.3e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.5,1.6,2.0,2.3,2.5 2.7,3.0,3.0,3.4), mean=2.02, stddev=0.412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.30,0.31 0.34,0.35,0.39,0.41,0.42 0.43,0.45,0.45,0.46), mean=0.384, stddev=0.0389], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.008 0.008,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00962, stddev=0.00112], oderiv-count=627776
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.2,1.4 1.4,1.6,2.0,2.3,2.4 2.7,3.0,3.1,3.4), mean=2, stddev=0.429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.5,3.5,3.7 3.8,4.0,4.3,4.9,5.3 5.6,5.8,5.8,6.3), mean=4.48, stddev=0.563]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, params-rms=0.2239, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.5,2.5 2.5,2.5,2.5,2.5,2.5 2.5,2.5,2.5,2.5), mean=2.53, stddev=0.000691], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.5 1.6,1.7,1.8,1.9,1.9 2.0,2.1,2.1,2.1), mean=1.79, stddev=0.145], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-4e-08 -3e-08,-2e-08,-5e-09,2e-08,3e-08 4e-08,5e-08,6e-08,7e-08), mean=-1.06e-09, stddev=2.56e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.6,2.7 2.8,2.8,3.0,3.2,3.3 3.3,3.4,3.5,3.7), mean=3.03, stddev=0.223]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0134423, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.123, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.03,0.07,0.19 0.29,0.43,0.94,1.3,1.4 1.5,1.6,1.7,2.1), mean=0.885, stddev=0.429], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6.3,6.3,6.3,6.8 7.0,7.2,7.7,8.3,8.8 9.0,9.2,9.8,9.8), mean=7.78, stddev=0.72], bias-{mean,stddev}=0.0001826,0.2316, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1472, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.79,0.83,0.99 1.0,1.1,1.2,1.3,1.3 1.3,1.3,1.3,1.4), mean=1.17, stddev=0.12], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.5,1.7,1.8,1.8 1.9,1.9,2.0,2.0), mean=1.66, stddev=0.133], bias-{mean,stddev}=0.02891,0.125, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.06e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.86,0.89,0.95 0.98,1.1,1.2,1.3,1.4 1.5,1.5,1.6,1.6), mean=1.2, stddev=0.171], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.39,0.41 0.42,0.43,0.47,0.50,0.51 0.52,0.53,0.54,0.56), mean=0.466, stddev=0.0373], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.004,0.004,0.005,0.005 0.005,0.005,0.006,0.01), mean=0.00428, stddev=0.000768], oderiv-count=594048
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.82,0.86,0.90 0.96,1.0,1.2,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.18, stddev=0.182], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.6,1.7,1.8,2.0,2.1 2.1,2.2,2.2,2.3), mean=1.84, stddev=0.198]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0134423, l2-regularize=0.0005, max-change=0.75, params-rms=0.1618, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.83, stddev=0.00146], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.98,0.98,1.0 1.1,1.2,1.3,1.4,1.5 1.5,1.6,1.6,1.6), mean=1.29, stddev=0.136], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-4e-08 -3e-08,-2e-08,1e-09,2e-08,3e-08 3e-08,4e-08,5e-08,7e-08), mean=1.23e-10, stddev=2.31e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.9,1.9 1.9,1.9,2.0,2.1,2.1 2.2,2.2,2.3,2.3), mean=2.02, stddev=0.103]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0672113, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1662, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.13 0.36,0.75,1.2,1.7,1.9 2.1,2.2,2.3,3.4), mean=1.21, stddev=0.555], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9.8,9.8,9.8,9.9 10,10,10,11,11 11,11,11,11), mean=10.6, stddev=0.391], bias-{mean,stddev}=-7.359e-08,0.2256, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,6e-06 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000756, stddev=0.00122], oderiv-count=629952
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/15.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/16.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.23448 tdnnf2.linear:4.55107 tdnnf2.affine:5.14651 tdnnf3.linear:4.41915 tdnnf3.affine:5.07094 tdnnf4.linear:4.10942 tdnnf4.affine:4.65751 tdnnf5.linear:3.73613 tdnnf5.affine:4.39999 tdnnf6.linear:3.65356 tdnnf6.affine:4.24994 tdnnf7.linear:3.66797 tdnnf7.affine:4.2944 tdnnf8.linear:3.31266 tdnnf8.affine:4.00614 tdnnf9.linear:3.38399 tdnnf9.affine:4.06968 tdnnf10.linear:3.39527 tdnnf10.affine:4.1228 tdnnf11.linear:3.48696 tdnnf11.affine:4.3192 tdnnf12.linear:3.61032 tdnnf12.affine:4.5628 tdnnf13.linear:3.81761 tdnnf13.affine:4.90897 prefinal-l:2.15016 prefinal-chain.affine:4.13221 prefinal-chain.linear:3.32782 output.affine:11.2178 prefinal-xent.affine:3.26086 prefinal-xent.linear:2.44189 output-xent.affine:11.9826 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:21.6248 tdnnf2.linear:18.0184 tdnnf2.affine:16.6559 tdnnf3.linear:15.7973 tdnnf3.affine:14.5745 tdnnf4.linear:13.7254 tdnnf4.affine:13.0572 tdnnf5.linear:12.7615 tdnnf5.affine:12.3054 tdnnf6.linear:12.4308 tdnnf6.affine:11.9256 tdnnf7.linear:13.3143 tdnnf7.affine:12.4897 tdnnf8.linear:12.8851 tdnnf8.affine:11.9906 tdnnf9.linear:13.0405 tdnnf9.affine:12.1302 tdnnf10.linear:13.4256 tdnnf10.affine:12.4138 tdnnf11.linear:14.1337 tdnnf11.affine:13.1016 tdnnf12.linear:14.7838 tdnnf12.affine:13.5027 tdnnf13.linear:14.2814 tdnnf13.affine:13.4217 prefinal-l:9.37065 prefinal-chain.affine:16.6535 prefinal-chain.linear:20.2693 output.affine:64.2309 prefinal-xent.affine:13.3984 prefinal-xent.linear:14.6425 output-xent.affine:85.7288 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.289048 tdnnf2.linear:0.252551 tdnnf2.affine:0.309339 tdnnf3.linear:0.278844 tdnnf3.affine:0.347886 tdnnf4.linear:0.299357 tdnnf4.affine:0.356708 tdnnf5.linear:0.293448 tdnnf5.affine:0.357705 tdnnf6.linear:0.293622 tdnnf6.affine:0.354273 tdnnf7.linear:0.272933 tdnnf7.affine:0.340127 tdnnf8.linear:0.256442 tdnnf8.affine:0.333441 tdnnf9.linear:0.260259 tdnnf9.affine:0.336516 tdnnf10.linear:0.253406 tdnnf10.affine:0.333454 tdnnf11.linear:0.248402 tdnnf11.affine:0.332445 tdnnf12.linear:0.244777 tdnnf12.affine:0.339032 tdnnf13.linear:0.267779 tdnnf13.affine:0.366132 prefinal-l:0.230556 prefinal-chain.affine:0.248963 prefinal-chain.linear:0.16514 output.affine:0.179042 prefinal-xent.affine:0.245156 prefinal-xent.linear:0.166775 output-xent.affine:0.141255 ]
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 05:31:36 CST 2020, elapsed time 4 seconds
