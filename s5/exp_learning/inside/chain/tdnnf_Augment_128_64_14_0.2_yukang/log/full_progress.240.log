# nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/239.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/240.mdl 
# Started at Mon Feb 24 12:00:51 CST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/239.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/240.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.04801, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.53,0.56 0.59,0.62,0.69,0.78,0.84 0.88,0.93,0.93,0.98), mean=0.705, stddev=0.0973], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.24,0.25 0.27,0.30,0.49,0.70,0.78 0.83,0.85,0.86,0.92), mean=0.508, stddev=0.193], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.14,0.17 0.21,0.29,0.56,0.94,1.1 1.2,1.3,1.4,1.5), mean=0.621, stddev=0.349], bias-{mean,stddev}=0.001004,0.02965, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0.05,0.08,0.09,0.21), mean=0.00672, stddev=0.0264], oderiv-count=183808
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.244444, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0309, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.45,0.45 0.45,0.46,0.49,0.52,0.53 0.54,0.54,0.58,0.58), mean=0.493, stddev=0.0302], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.19 0.20,0.22,0.25,0.27,0.29 0.30,0.32,0.32,0.34), mean=0.245, stddev=0.0315], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.22 0.26,0.29,0.43,0.62,0.70 0.74,0.81,0.83,0.86), mean=0.463, stddev=0.174], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03424, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.32 0.34,0.36,0.38,0.41,0.44 0.45,0.47,0.48,0.49), mean=0.385, stddev=0.0387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.32,0.34 0.35,0.36,0.39,0.40,0.42 0.43,0.44,0.44,0.46), mean=0.386, stddev=0.0272], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.005,0.009,0.02 0.05,0.09,0.27,0.53,0.66 0.73,0.78,0.80,0.85), mean=0.314, stddev=0.227], bias-{mean,stddev}=0.001244,0.01645, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.58,-0.41,0.18 0.52,1.0,1.7,2.3,2.6 3.1,3.2,3.7,4.3), mean=1.68, stddev=0.869], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,0.01,0.10,0.16 0.26,0.35,0.54,0.66,0.75 0.81,0.89,0.94,0.98), mean=0.522, stddev=0.194], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.0007,0.001 0.002,0.003,0.003,0.004), mean=0.00038, stddev=0.000784], oderiv-count=635520
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.244444, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02645, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.38,0.38 0.39,0.39,0.42,0.44,0.46 0.47,0.50,0.52,0.57), mean=0.422, stddev=0.0351], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.16,0.17 0.18,0.19,0.21,0.23,0.24 0.25,0.26,0.26,0.27), mean=0.21, stddev=0.0252], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.19 0.21,0.25,0.36,0.53,0.60 0.66,0.68,0.71,0.72), mean=0.395, stddev=0.152], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03298, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.31,0.32 0.33,0.34,0.37,0.40,0.42 0.43,0.43,0.44,0.44), mean=0.372, stddev=0.0345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.31,0.32 0.33,0.34,0.38,0.39,0.40 0.41,0.42,0.44,0.47), mean=0.372, stddev=0.0298], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.007,0.02 0.04,0.09,0.26,0.50,0.61 0.72,0.76,0.79,0.86), mean=0.301, stddev=0.22], bias-{mean,stddev}=0.002061,0.009745, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.55e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.7,-4.9,-4.9,-4.1 -2.7,-1.4,1.3,3.0,4.3 6.1,6.7,6.9,9.2), mean=1.1, stddev=2.81], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.4,-0.96,-0.54 -0.39,-0.009,0.53,1.1,1.5 1.7,2.0,2.1,2.9), mean=0.548, stddev=0.739], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0005,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.000629, stddev=0.000635], oderiv-count=833856
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.244444, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02437, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.35 0.35,0.36,0.39,0.40,0.42 0.42,0.45,0.46,0.50), mean=0.389, stddev=0.029], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.17,0.18,0.19,0.21,0.22 0.23,0.24,0.25,0.26), mean=0.194, stddev=0.021], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.16,0.17 0.19,0.22,0.33,0.49,0.56 0.61,0.62,0.66,0.67), mean=0.363, stddev=0.143], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03069, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.29 0.31,0.32,0.35,0.37,0.38 0.40,0.40,0.41,0.44), mean=0.346, stddev=0.0306], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.29,0.30 0.31,0.33,0.35,0.36,0.37 0.39,0.40,0.41,0.44), mean=0.346, stddev=0.0278], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.007,0.02 0.04,0.08,0.23,0.47,0.58 0.66,0.71,0.72,0.78), mean=0.28, stddev=0.205], bias-{mean,stddev}=0.001578,0.009895, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.001,0.001 0.002,0.002,0.002,0.002), mean=0.00049, stddev=0.000616], oderiv-count=475200
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.244444, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02225, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.31,0.31 0.32,0.33,0.36,0.38,0.38 0.39,0.40,0.40,0.40), mean=0.355, stddev=0.0228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.15,0.16,0.18,0.19,0.20 0.21,0.21,0.22,0.23), mean=0.177, stddev=0.0192], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.16 0.18,0.21,0.32,0.44,0.50 0.54,0.57,0.59,0.60), mean=0.333, stddev=0.125], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02618, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.26,0.28,0.30,0.31,0.33 0.34,0.34,0.34,0.39), mean=0.295, stddev=0.0257], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.25 0.27,0.28,0.29,0.31,0.32 0.33,0.34,0.34,0.36), mean=0.295, stddev=0.0228], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.006,0.02 0.03,0.07,0.21,0.39,0.49 0.56,0.62,0.63,0.68), mean=0.24, stddev=0.174], bias-{mean,stddev}=0.0006684,0.008274, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.244444, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02034, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.29 0.30,0.31,0.32,0.34,0.35 0.35,0.36,0.36,0.39), mean=0.325, stddev=0.021], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.15,0.16,0.18,0.19 0.20,0.20,0.20,0.22), mean=0.162, stddev=0.0184], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.15 0.16,0.19,0.29,0.41,0.46 0.49,0.52,0.54,0.54), mean=0.305, stddev=0.114], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02325, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.22,0.22 0.23,0.24,0.26,0.28,0.30 0.31,0.31,0.32,0.34), mean=0.262, stddev=0.0244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.23,0.23 0.24,0.25,0.26,0.28,0.29 0.30,0.31,0.32,0.34), mean=0.262, stddev=0.021], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.002,0.006,0.02 0.03,0.07,0.19,0.35,0.44 0.49,0.54,0.55,0.61), mean=0.214, stddev=0.153], bias-{mean,stddev}=-0.0006725,0.006586, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.002,0.002 0.003,0.003,0.003,0.005), mean=0.000739, stddev=0.0011], oderiv-count=140160
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.244444, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01934, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.27 0.28,0.29,0.31,0.32,0.33 0.34,0.34,0.34,0.38), mean=0.309, stddev=0.0203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.13,0.14,0.15,0.17,0.18 0.18,0.19,0.19,0.20), mean=0.154, stddev=0.0167], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.14 0.15,0.18,0.27,0.40,0.45 0.48,0.49,0.50,0.54), mean=0.288, stddev=0.112], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02205, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.23,0.25,0.27,0.28 0.29,0.29,0.30,0.31), mean=0.248, stddev=0.0245], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.22,0.23,0.25,0.26,0.27 0.28,0.29,0.29,0.30), mean=0.249, stddev=0.0189], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.004,0.006,0.02 0.03,0.06,0.17,0.34,0.41 0.48,0.52,0.53,0.59), mean=0.202, stddev=0.147], bias-{mean,stddev}=0.0004535,0.00565, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.002,0.003 0.003,0.004,0.004,0.007), mean=0.00109, stddev=0.00137], oderiv-count=110016
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.244444, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0185, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.24,0.27 0.27,0.28,0.29,0.31,0.32 0.33,0.33,0.34,0.35), mean=0.295, stddev=0.0211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.12,0.13,0.15,0.16,0.17 0.17,0.18,0.19,0.21), mean=0.147, stddev=0.0188], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.12,0.12 0.14,0.17,0.27,0.37,0.42 0.45,0.48,0.49,0.51), mean=0.276, stddev=0.107], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02141, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.24,0.26,0.27 0.28,0.29,0.29,0.29), mean=0.241, stddev=0.0232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.21 0.22,0.23,0.24,0.26,0.26 0.27,0.28,0.28,0.28), mean=0.242, stddev=0.0183], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.002,0.004,0.01 0.03,0.06,0.16,0.32,0.40 0.46,0.51,0.52,0.55), mean=0.195, stddev=0.144], bias-{mean,stddev}=-2.421e-06,0.005168, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.13e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-10,-9.6,-6.7,-5.6 -3.9,-2.0,2.1,6.4,8.1 11,13,13,20), mean=2.5, stddev=5.16], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.8,-1.8,-1.5 -0.82,-0.35,0.33,1.3,1.8 2.4,2.9,3.6,4.3), mean=0.459, stddev=1.2]
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.244444, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01869, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.26,0.27 0.27,0.28,0.30,0.32,0.32 0.33,0.34,0.34,0.35), mean=0.298, stddev=0.0212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.12,0.13,0.15,0.16,0.17 0.18,0.19,0.19,0.20), mean=0.148, stddev=0.0186], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.13 0.14,0.17,0.27,0.38,0.43 0.46,0.49,0.50,0.51), mean=0.278, stddev=0.111], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0221, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.22,0.23,0.25,0.27,0.28 0.29,0.30,0.30,0.31), mean=0.249, stddev=0.0251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.23,0.23,0.25,0.27,0.27 0.28,0.29,0.29,0.29), mean=0.249, stddev=0.0191], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.002,0.003,0.01 0.02,0.06,0.16,0.33,0.43 0.49,0.54,0.55,0.57), mean=0.199, stddev=0.151], bias-{mean,stddev}=0.0007651,0.00502, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.21e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.37,-0.28,-0.08,0.16 0.70,1.1,2.3,3.3,3.8 3.9,5.0,5.1,6.0), mean=2.28, stddev=1.25], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.57,-0.16,0.06,0.17 0.22,0.30,0.43,0.61,0.71 0.74,0.77,0.82,0.84), mean=0.441, stddev=0.202], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.001,0.002 0.002,0.002,0.003,0.003), mean=0.000662, stddev=0.000826], oderiv-count=198720
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.244444, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.27,0.28 0.28,0.29,0.31,0.33,0.33 0.34,0.34,0.34,0.36), mean=0.31, stddev=0.0197], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.11,0.12 0.13,0.14,0.15,0.17,0.18 0.19,0.19,0.19,0.20), mean=0.154, stddev=0.0214], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.12,0.13 0.14,0.18,0.27,0.39,0.45 0.47,0.51,0.55,0.57), mean=0.288, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02345, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.22,0.23 0.23,0.24,0.26,0.29,0.30 0.31,0.32,0.32,0.33), mean=0.264, stddev=0.0269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.23 0.24,0.25,0.26,0.28,0.29 0.29,0.31,0.31,0.32), mean=0.265, stddev=0.0194], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.005,0.005,0.02 0.03,0.07,0.18,0.36,0.45 0.51,0.55,0.57,0.60), mean=0.214, stddev=0.157], bias-{mean,stddev}=0.0004367,0.005299, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.244444, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01998, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.28 0.29,0.30,0.32,0.33,0.35 0.36,0.37,0.38,0.38), mean=0.319, stddev=0.0241], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.13 0.13,0.14,0.16,0.18,0.19 0.19,0.20,0.20,0.23), mean=0.158, stddev=0.0212], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.13 0.15,0.17,0.27,0.40,0.47 0.51,0.52,0.56,0.57), mean=0.295, stddev=0.123], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02447, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.23 0.24,0.25,0.28,0.30,0.31 0.32,0.33,0.34,0.34), mean=0.275, stddev=0.0289], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.23,0.24 0.25,0.26,0.28,0.29,0.30 0.31,0.32,0.32,0.32), mean=0.276, stddev=0.021], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.002,0.004,0.02 0.03,0.07,0.19,0.36,0.47 0.52,0.58,0.62,0.65), mean=0.222, stddev=0.165], bias-{mean,stddev}=0.001252,0.006824, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.004,0.006 0.007,0.007,0.008,0.01), mean=0.00208, stddev=0.00256], oderiv-count=45504
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.244444, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02135, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.29,0.31 0.31,0.32,0.34,0.36,0.37 0.38,0.38,0.39,0.39), mean=0.341, stddev=0.023], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.13,0.13 0.14,0.15,0.17,0.19,0.20 0.20,0.21,0.22,0.23), mean=0.169, stddev=0.0219], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.14 0.15,0.18,0.29,0.44,0.51 0.55,0.56,0.58,0.60), mean=0.315, stddev=0.133], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02616, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.23,0.23 0.24,0.26,0.30,0.32,0.34 0.34,0.36,0.38,0.39), mean=0.294, stddev=0.0369], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.26,0.28,0.30,0.31,0.32 0.33,0.34,0.34,0.35), mean=0.295, stddev=0.0224], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.005,0.007,0.02 0.03,0.07,0.19,0.39,0.50 0.57,0.62,0.63,0.70), mean=0.237, stddev=0.178], bias-{mean,stddev}=0.00061,0.008658, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.004,0.006 0.007,0.007,0.007,0.008), mean=0.00208, stddev=0.00246], oderiv-count=84864
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.244444, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02329, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.33 0.34,0.35,0.37,0.39,0.40 0.41,0.41,0.41,0.41), mean=0.372, stddev=0.0233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.16,0.17,0.19,0.20,0.21 0.22,0.23,0.23,0.25), mean=0.185, stddev=0.0225], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.16 0.17,0.21,0.32,0.48,0.54 0.58,0.60,0.63,0.66), mean=0.345, stddev=0.14], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02952, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.27,0.28 0.28,0.30,0.33,0.37,0.37 0.38,0.39,0.39,0.41), mean=0.332, stddev=0.0354], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.29,0.30 0.30,0.31,0.33,0.35,0.36 0.37,0.38,0.39,0.41), mean=0.333, stddev=0.0231], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.003,0.007,0.01 0.04,0.08,0.23,0.44,0.56 0.63,0.70,0.72,0.83), mean=0.268, stddev=0.199], bias-{mean,stddev}=-0.0009903,0.01073, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.244444, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.005, max-change=0.75, params-rms=0.04453, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.44,0.45 0.45,0.47,0.50,0.53,0.55 0.56,0.58,0.58,0.59), mean=0.502, stddev=0.0364], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.29,0.30 0.31,0.32,0.35,0.38,0.40 0.41,0.43,0.43,0.47), mean=0.355, stddev=0.0337], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.15,0.17 0.21,0.27,0.45,0.64,0.73 0.79,0.82,0.84,0.87), mean=0.464, stddev=0.197], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.04789, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.29,0.30 0.33,0.35,0.38,0.42,0.43 0.44,0.46,0.49,0.50), mean=0.381, stddev=0.0418], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.47,0.48 0.49,0.50,0.54,0.58,0.59 0.60,0.61,0.61,0.62), mean=0.54, stddev=0.0403], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.15,0.18 0.21,0.26,0.47,0.70,0.79 0.86,0.90,0.92,0.97), mean=0.494, stddev=0.222], bias-{mean,stddev}=0.002053,0.01525, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, params-rms=0.04886, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.48,0.49 0.50,0.51,0.55,0.58,0.60 0.61,0.62,0.64,0.65), mean=0.551, stddev=0.0389], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.33 0.35,0.36,0.39,0.42,0.44 0.45,0.48,0.48,0.49), mean=0.389, stddev=0.0393], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.16,0.18 0.23,0.30,0.48,0.69,0.82 0.85,0.92,0.93,0.99), mean=0.507, stddev=0.219], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00263351, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.02195, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,0.003,0.004,0.01 0.02,0.04,0.09,0.23,0.31 0.36,0.43,0.46,0.94), mean=0.133, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.3,1.4,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.39, stddev=0.0694], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.50,0.85 0.91,1.0,1.3,1.7,1.8 1.9,2.0,2.0,2.0), mean=1.35, stddev=0.366], bias-{mean,stddev}=-2.478e-07,0.03532, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.0266, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.17 0.18,0.19,0.21,0.23,0.25 0.26,0.27,0.27,0.30), mean=0.211, stddev=0.0263], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.27,0.27 0.27,0.28,0.30,0.32,0.32 0.33,0.34,0.34,0.34), mean=0.3, stddev=0.0194], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.10 0.12,0.16,0.26,0.39,0.44 0.47,0.50,0.52,0.53), mean=0.276, stddev=0.12], bias-{mean,stddev}=0.0003032,0.009644, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.007,0.009 0.01,0.01,0.01,0.01), mean=0.00267, stddev=0.00399], oderiv-count=6528
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00263351, l2-regularize=0.0005, max-change=0.75, params-rms=0.01694, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.17 0.18,0.18,0.19,0.20,0.21 0.21,0.21,0.22,0.22), mean=0.191, stddev=0.0135], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.11 0.11,0.12,0.14,0.15,0.15 0.16,0.17,0.17,0.17), mean=0.134, stddev=0.0166], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.10,0.16,0.25,0.28 0.30,0.31,0.32,0.33), mean=0.176, stddev=0.0753], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0131676, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.01872, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.002,0.006,0.02 0.03,0.04,0.10,0.19,0.26 0.30,0.34,0.36,0.49), mean=0.12, stddev=0.0892], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.2,1.2,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.19, stddev=0.0444], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.67,0.68,0.72 0.78,0.88,1.2,1.4,1.5 1.6,1.6,1.6,1.7), mean=1.16, stddev=0.274], bias-{mean,stddev}=-8.218e-09,0.01367, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040

LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.06311 tdnnf2.linear:3.95537 tdnnf2.affine:4.38722 tdnnf3.linear:3.38547 tdnnf3.affine:4.22281 tdnnf4.linear:3.1191 tdnnf4.affine:3.92951 tdnnf5.linear:2.84758 tdnnf5.affine:3.35182 tdnnf6.linear:2.60398 tdnnf6.affine:2.97674 tdnnf7.linear:2.47576 tdnnf7.affine:2.82262 tdnnf8.linear:2.36767 tdnnf8.affine:2.74138 tdnnf9.linear:2.39254 tdnnf9.affine:2.8295 tdnnf10.linear:2.48317 tdnnf10.affine:3.00238 tdnnf11.linear:2.55733 tdnnf11.affine:3.13313 tdnnf12.linear:2.73317 tdnnf12.affine:3.34996 tdnnf13.linear:2.98139 tdnnf13.affine:3.78044 prefinal-l:4.03036 prefinal-chain.affine:4.33792 prefinal-chain.linear:4.42214 output.affine:11.3858 prefinal-xent.affine:2.40969 prefinal-xent.linear:1.5332 output-xent.affine:9.56016 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.3121 tdnnf2.linear:15.3327 tdnnf2.affine:15.4927 tdnnf3.linear:13.8749 tdnnf3.affine:14.7896 tdnnf4.linear:12.9255 tdnnf4.affine:13.6329 tdnnf5.linear:11.9327 tdnnf5.affine:11.8343 tdnnf6.linear:11.5263 tdnnf6.affine:10.9654 tdnnf7.linear:11.4835 tdnnf7.affine:10.8916 tdnnf8.linear:11.9233 tdnnf8.affine:10.9627 tdnnf9.linear:12.375 tdnnf9.affine:11.2956 tdnnf10.linear:12.4788 tdnnf10.affine:11.2827 tdnnf11.linear:11.747 tdnnf11.affine:10.9133 tdnnf12.linear:11.4434 tdnnf12.affine:10.9609 tdnnf13.linear:12.1428 tdnnf13.affine:11.7665 prefinal-l:12.0965 prefinal-chain.affine:17.8273 prefinal-chain.linear:25.0964 output.affine:115.868 prefinal-xent.affine:12.9435 prefinal-xent.linear:12.8749 output-xent.affine:98.5624 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.331931 tdnnf2.linear:0.259074 tdnnf2.affine:0.284516 tdnnf3.linear:0.245681 tdnnf3.affine:0.288315 tdnnf4.linear:0.243281 tdnnf4.affine:0.29075 tdnnf5.linear:0.240519 tdnnf5.affine:0.285535 tdnnf6.linear:0.226754 tdnnf6.affine:0.271693 tdnnf7.linear:0.215536 tdnnf7.affine:0.258898 tdnnf8.linear:0.198527 tdnnf8.affine:0.249907 tdnnf9.linear:0.193234 tdnnf9.affine:0.250272 tdnnf10.linear:0.19917 tdnnf10.affine:0.266003 tdnnf11.linear:0.217049 tdnnf11.affine:0.286304 tdnnf12.linear:0.2383 tdnnf12.affine:0.304747 tdnnf13.linear:0.24459 tdnnf13.affine:0.320038 prefinal-l:0.33076 prefinal-chain.affine:0.242925 prefinal-chain.linear:0.175563 output.affine:0.0980056 prefinal-xent.affine:0.185727 prefinal-xent.linear:0.118972 output-xent.affine:0.0971079 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 12:00:54 CST 2020, elapsed time 3 seconds
