# nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/69.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/70.mdl 
# Started at Mon Feb 24 07:46:42 CST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/69.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/70.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.04139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.46,0.47,0.50 0.52,0.55,0.60,0.68,0.71 0.74,0.75,0.78,0.80), mean=0.609, stddev=0.0763], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.23,0.42,0.63,0.67 0.73,0.76,0.79,0.83), mean=0.431, stddev=0.183], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.13 0.17,0.24,0.47,0.82,0.98 1.1,1.2,1.2,1.3), mean=0.532, stddev=0.306], bias-{mean,stddev}=-0.00194,0.03322, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.61e+05, self-repaired-proportion=0.272681, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-1.0,-0.83,-0.67 -0.46,-0.26,0.002,0.34,0.71 0.82,1.4,1.5,2.3), mean=0.0738, stddev=0.507], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.5,-1.5,-1.3 -0.98,-0.38,0.21,0.90,1.6 2.0,2.3,2.5,3.1), mean=0.257, stddev=0.949], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.008,0.05,0.09,0.17,0.25 0.33,0.44,0.44,0.58), mean=0.12, stddev=0.107], oderiv-count=344640
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.026455, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03924, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.57,0.57 0.59,0.60,0.63,0.65,0.67 0.68,0.68,0.68,0.70), mean=0.627, stddev=0.0312], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.25,0.27,0.31,0.35,0.37 0.40,0.41,0.42,0.44), mean=0.31, stddev=0.0471], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.27,0.29 0.32,0.38,0.56,0.78,0.89 0.95,1.0,1.0,1.1), mean=0.588, stddev=0.219], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.04338, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.41,0.42 0.43,0.45,0.49,0.52,0.55 0.56,0.57,0.57,0.59), mean=0.489, stddev=0.0423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.42,0.43 0.44,0.46,0.49,0.52,0.54 0.54,0.56,0.57,0.59), mean=0.489, stddev=0.0361], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.01,0.03 0.05,0.12,0.34,0.65,0.83 0.92,0.99,1.0,1.1), mean=0.398, stddev=0.288], bias-{mean,stddev}=-0.002902,0.0177, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.026455, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03395, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.48,0.51 0.51,0.52,0.54,0.57,0.58 0.59,0.60,0.60,0.61), mean=0.542, stddev=0.0302], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.22 0.23,0.24,0.27,0.30,0.31 0.32,0.34,0.36,0.39), mean=0.269, stddev=0.0335], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.24,0.25 0.28,0.33,0.48,0.68,0.76 0.81,0.84,0.90,0.94), mean=0.511, stddev=0.183], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03936, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.38 0.39,0.41,0.44,0.48,0.50 0.51,0.53,0.55,0.57), mean=0.443, stddev=0.0415], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.39 0.40,0.42,0.45,0.47,0.48 0.49,0.50,0.51,0.52), mean=0.444, stddev=0.0303], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.004,0.009,0.03 0.05,0.11,0.31,0.60,0.74 0.82,0.91,0.92,0.99), mean=0.362, stddev=0.259], bias-{mean,stddev}=-0.001844,0.01228, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.88e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,0.27,0.38,0.75 0.93,1.5,2.2,3.1,3.8 4.2,4.6,4.9,5.7), mean=2.26, stddev=1.13], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.54,-0.18,-0.04,0.08 0.24,0.36,0.56,0.76,0.88 1.0,1.1,1.1,1.3), mean=0.551, stddev=0.284]
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.026455, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03081, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.45,0.45 0.46,0.47,0.49,0.51,0.52 0.54,0.54,0.55,0.57), mean=0.492, stddev=0.0264], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.21,0.22,0.24,0.27,0.28 0.29,0.30,0.31,0.32), mean=0.245, stddev=0.0294], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.22,0.23 0.25,0.30,0.44,0.62,0.70 0.73,0.77,0.80,0.83), mean=0.463, stddev=0.168], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03598, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.32,0.34 0.35,0.37,0.40,0.44,0.45 0.47,0.48,0.48,0.53), mean=0.405, stddev=0.0408], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.35 0.35,0.38,0.40,0.43,0.45 0.46,0.47,0.48,0.50), mean=0.406, stddev=0.0328], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.006,0.009,0.02 0.05,0.10,0.29,0.54,0.68 0.76,0.83,0.84,0.95), mean=0.331, stddev=0.238], bias-{mean,stddev}=0.001139,0.01205, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.46e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-0.78,-0.53,0.23 0.57,1.3,2.3,3.7,4.6 4.8,5.3,5.7,6.4), mean=2.44, stddev=1.52], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.71,-0.51,-0.10 0.03,0.17,0.50,0.77,0.87 1.0,1.2,1.3,1.6), mean=0.473, stddev=0.381]
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.026455, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02796, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.38,0.40 0.41,0.42,0.44,0.47,0.48 0.49,0.50,0.52,0.52), mean=0.446, stddev=0.0298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.18 0.19,0.20,0.22,0.25,0.26 0.27,0.28,0.29,0.31), mean=0.222, stddev=0.0274], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.20 0.22,0.27,0.40,0.56,0.64 0.66,0.71,0.74,0.77), mean=0.419, stddev=0.156], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.31,0.32 0.33,0.34,0.38,0.41,0.42 0.44,0.45,0.46,0.49), mean=0.377, stddev=0.0381], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.33 0.34,0.36,0.38,0.40,0.41 0.42,0.43,0.43,0.44), mean=0.378, stddev=0.0262], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.007,0.02 0.04,0.09,0.27,0.51,0.63 0.71,0.77,0.77,0.85), mean=0.309, stddev=0.22], bias-{mean,stddev}=-0.000299,0.008851, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.026455, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02697, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.37,0.38 0.40,0.41,0.43,0.45,0.46 0.47,0.48,0.49,0.49), mean=0.431, stddev=0.0272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.19,0.20,0.21,0.24,0.25 0.25,0.26,0.26,0.28), mean=0.215, stddev=0.0233], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.18,0.19 0.21,0.25,0.37,0.55,0.61 0.66,0.71,0.72,0.75), mean=0.403, stddev=0.153], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03133, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.29,0.31 0.31,0.33,0.35,0.38,0.39 0.41,0.42,0.43,0.49), mean=0.353, stddev=0.0345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.30,0.30 0.32,0.33,0.35,0.37,0.39 0.40,0.40,0.40,0.43), mean=0.354, stddev=0.0261], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.009,0.02 0.04,0.09,0.25,0.48,0.60 0.66,0.72,0.73,0.83), mean=0.289, stddev=0.206], bias-{mean,stddev}=0.0001261,0.009557, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.026455, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02556, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.36 0.37,0.38,0.40,0.43,0.44 0.45,0.47,0.47,0.48), mean=0.408, stddev=0.028], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.17 0.17,0.18,0.20,0.22,0.23 0.24,0.25,0.25,0.28), mean=0.203, stddev=0.0222], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.18 0.20,0.24,0.36,0.52,0.58 0.63,0.66,0.68,0.69), mean=0.382, stddev=0.145], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03006, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.29 0.30,0.31,0.33,0.36,0.38 0.39,0.42,0.42,0.44), mean=0.339, stddev=0.0317], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.30 0.31,0.32,0.34,0.36,0.37 0.38,0.40,0.40,0.42), mean=0.339, stddev=0.0264], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.005,0.008,0.02 0.04,0.08,0.24,0.45,0.57 0.63,0.70,0.72,0.77), mean=0.276, stddev=0.198], bias-{mean,stddev}=-0.0004609,0.008875, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.026455, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02457, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.35 0.36,0.37,0.39,0.41,0.42 0.44,0.45,0.45,0.46), mean=0.392, stddev=0.0265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.16,0.18,0.19,0.21,0.23 0.23,0.25,0.26,0.29), mean=0.195, stddev=0.0239], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.17 0.18,0.22,0.34,0.50,0.57 0.61,0.64,0.66,0.67), mean=0.365, stddev=0.145], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02913, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.29,0.31,0.33,0.35,0.37 0.37,0.38,0.38,0.42), mean=0.328, stddev=0.0277], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.29 0.30,0.31,0.33,0.35,0.36 0.37,0.37,0.38,0.40), mean=0.329, stddev=0.0248], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.006,0.007,0.02 0.04,0.08,0.23,0.45,0.56 0.63,0.68,0.69,0.74), mean=0.267, stddev=0.194], bias-{mean,stddev}=0.001739,0.00744, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.13e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-15,-12,-9.6,-6.7 -5.2,-2.3,2.9,9.4,12 14,16,16,23), mean=3.5, stddev=6.61], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-2.2,-2.0,-1.4 -1.1,-0.29,0.72,1.3,1.7 1.9,2.1,2.1,4.5), mean=0.488, stddev=1.04]
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.026455, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02461, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.35 0.36,0.37,0.39,0.41,0.42 0.43,0.45,0.45,0.45), mean=0.393, stddev=0.0267], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.17,0.18,0.20,0.21,0.22 0.23,0.24,0.25,0.26), mean=0.196, stddev=0.0214], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.16 0.18,0.22,0.35,0.50,0.56 0.61,0.64,0.65,0.69), mean=0.365, stddev=0.147], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.28,0.28 0.29,0.30,0.34,0.36,0.38 0.40,0.42,0.42,0.43), mean=0.339, stddev=0.0356], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.29,0.31 0.31,0.32,0.34,0.36,0.37 0.38,0.39,0.41,0.43), mean=0.34, stddev=0.0237], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.007,0.02 0.04,0.08,0.23,0.45,0.57 0.65,0.70,0.72,0.82), mean=0.274, stddev=0.203], bias-{mean,stddev}=0.0005081,0.007215, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.25e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.31,0.21,0.33,0.68 0.83,1.1,1.9,2.7,3.1 3.2,3.8,3.8,4.2), mean=1.95, stddev=0.871], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.08,0.16 0.27,0.34,0.46,0.56,0.61 0.63,0.69,0.71,0.73), mean=0.443, stddev=0.14]
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.026455, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02511, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.36 0.37,0.38,0.40,0.42,0.43 0.44,0.44,0.45,0.47), mean=0.401, stddev=0.0249], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.16 0.17,0.18,0.20,0.22,0.23 0.24,0.25,0.25,0.27), mean=0.199, stddev=0.0241], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.16 0.18,0.22,0.35,0.51,0.59 0.62,0.65,0.67,0.72), mean=0.372, stddev=0.152], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0313, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.29 0.31,0.33,0.35,0.38,0.39 0.40,0.42,0.42,0.46), mean=0.352, stddev=0.0352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.30,0.31 0.32,0.33,0.35,0.37,0.39 0.40,0.40,0.40,0.44), mean=0.353, stddev=0.0271], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.006,0.02 0.04,0.09,0.23,0.48,0.60 0.68,0.73,0.76,0.80), mean=0.285, stddev=0.21], bias-{mean,stddev}=0.0003722,0.007752, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.58e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.21,-0.19,0.36 0.60,0.99,2.2,3.0,3.6 4.1,4.6,4.7,5.1), mean=2.11, stddev=1.18], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,-0.03,0.02,0.12 0.19,0.32,0.43,0.56,0.63 0.68,0.74,0.81,0.92), mean=0.426, stddev=0.171], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.004,0.005 0.005,0.006,0.006,0.007), mean=0.00172, stddev=0.00204], oderiv-count=27392
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.026455, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02678, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.38 0.39,0.40,0.43,0.45,0.47 0.47,0.48,0.49,0.50), mean=0.427, stddev=0.0303], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.17,0.19,0.21,0.24,0.25 0.26,0.27,0.28,0.29), mean=0.212, stddev=0.0308], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.16,0.18 0.19,0.23,0.37,0.55,0.61 0.66,0.72,0.75,0.77), mean=0.396, stddev=0.164], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0337, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.27,0.30 0.32,0.34,0.38,0.42,0.44 0.45,0.46,0.46,0.48), mean=0.379, stddev=0.0454], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.35,0.36,0.37,0.41,0.42 0.43,0.44,0.45,0.46), mean=0.38, stddev=0.0293], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.004,0.006,0.02 0.04,0.08,0.25,0.51,0.66 0.74,0.80,0.82,0.88), mean=0.304, stddev=0.23], bias-{mean,stddev}=0.001742,0.008411, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.01e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-27,-22,-22,-15 -13,-6.8,5.1,16,22 24,31,34,40), mean=5.26, stddev=13.1], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-2.5,-2.4,-1.8 -1.3,-0.42,0.98,2.9,3.7 4.6,6.5,6.5,7.5), mean=1.25, stddev=2.02]
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.026455, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02894, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.41,0.42 0.42,0.44,0.46,0.49,0.50 0.50,0.51,0.52,0.53), mean=0.462, stddev=0.0294], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.17 0.19,0.20,0.23,0.26,0.27 0.28,0.29,0.30,0.37), mean=0.229, stddev=0.0335], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.17 0.20,0.25,0.39,0.59,0.69 0.72,0.76,0.81,0.84), mean=0.426, stddev=0.18], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03561, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.32 0.34,0.36,0.40,0.44,0.46 0.47,0.48,0.49,0.50), mean=0.4, stddev=0.0487], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.36 0.37,0.38,0.40,0.43,0.44 0.46,0.46,0.46,0.48), mean=0.402, stddev=0.0299], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.006,0.02 0.04,0.10,0.27,0.55,0.68 0.76,0.83,0.91,0.93), mean=0.323, stddev=0.241], bias-{mean,stddev}=0.0004661,0.01006, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.004,0.005 0.006,0.007,0.009,0.01), mean=0.00242, stddev=0.00226], oderiv-count=78336
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.026455, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03071, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.43 0.45,0.46,0.49,0.52,0.53 0.55,0.56,0.57,0.58), mean=0.49, stddev=0.039], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.18 0.20,0.22,0.24,0.27,0.29 0.30,0.31,0.32,0.35), mean=0.243, stddev=0.0337], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.19 0.21,0.25,0.41,0.62,0.72 0.80,0.84,0.85,0.92), mean=0.449, stddev=0.2], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0382, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.30,0.32 0.34,0.38,0.43,0.48,0.50 0.51,0.53,0.53,0.57), mean=0.428, stddev=0.0567], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.38,0.38 0.39,0.40,0.43,0.46,0.48 0.48,0.49,0.49,0.49), mean=0.431, stddev=0.0319], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.01,0.03 0.04,0.11,0.29,0.57,0.72 0.83,0.91,0.94,1.1), mean=0.346, stddev=0.259], bias-{mean,stddev}=-0.0003687,0.01226, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.026455, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.005, max-change=0.75, params-rms=0.02926, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.29 0.31,0.31,0.33,0.34,0.35 0.37,0.38,0.38,0.39), mean=0.33, stddev=0.022], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.18 0.20,0.21,0.23,0.26,0.27 0.28,0.29,0.29,0.33), mean=0.232, stddev=0.0287], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.11 0.13,0.17,0.29,0.44,0.48 0.53,0.56,0.57,0.59), mean=0.302, stddev=0.135], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.05412, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.38,0.39,0.42,0.46,0.49 0.51,0.54,0.54,0.57), mean=0.431, stddev=0.0448], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.55,0.56 0.56,0.57,0.60,0.65,0.67 0.68,0.68,0.73,0.73), mean=0.611, stddev=0.0434], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.18 0.23,0.32,0.50,0.78,0.92 0.98,1.1,1.1,1.1), mean=0.555, stddev=0.259], bias-{mean,stddev}=0.0004873,0.02082, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.02,0.02 0.03,0.03,0.03,0.03), mean=0.0102, stddev=0.00886], oderiv-count=19584
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, params-rms=0.04396, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.44,0.44 0.46,0.48,0.50,0.52,0.53 0.54,0.54,0.55,0.55), mean=0.497, stddev=0.0281], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.27,0.29 0.30,0.32,0.35,0.38,0.39 0.41,0.42,0.43,0.46), mean=0.35, stddev=0.0373], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.14,0.17 0.20,0.27,0.43,0.64,0.71 0.79,0.83,0.86,0.89), mean=0.456, stddev=0.199], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00912469, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.02576, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.002,0.005,0.02 0.03,0.04,0.12,0.27,0.35 0.42,0.48,0.53,0.63), mean=0.16, stddev=0.13], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.6,1.6,1.7,1.7 1.8,1.8,1.8,1.8), mean=1.64, stddev=0.0769], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.50,0.89 1.0,1.1,1.6,2.0,2.2 2.2,2.3,2.4,2.4), mean=1.57, stddev=0.464], bias-{mean,stddev}=-9.163e-06,0.04088, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.03699, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.23,0.25 0.25,0.26,0.29,0.32,0.34 0.36,0.37,0.38,0.41), mean=0.294, stddev=0.0364], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.37,0.37 0.37,0.38,0.41,0.44,0.45 0.46,0.49,0.49,0.50), mean=0.417, stddev=0.0316], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.15 0.17,0.22,0.36,0.54,0.62 0.65,0.70,0.72,0.73), mean=0.384, stddev=0.167], bias-{mean,stddev}=-0.0007376,0.01656, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.003,0.006,0.007 0.008,0.009,0.01,0.01), mean=0.00332, stddev=0.0031], oderiv-count=19584
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00912469, l2-regularize=0.0005, max-change=0.75, params-rms=0.02315, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.22,0.24 0.25,0.25,0.26,0.27,0.28 0.29,0.29,0.29,0.30), mean=0.261, stddev=0.0158], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.15,0.16,0.18,0.20,0.21 0.22,0.22,0.22,0.24), mean=0.184, stddev=0.0221], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.10 0.12,0.14,0.23,0.34,0.37 0.40,0.42,0.44,0.46), mean=0.242, stddev=0.101], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0456235, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.02635, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.003,0.008,0.02 0.04,0.06,0.14,0.28,0.35 0.41,0.47,0.51,0.78), mean=0.171, stddev=0.123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.7,1.7,1.7 1.8,1.8,1.8,1.8), mean=1.67, stddev=0.0548], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.94,0.99 1.1,1.2,1.6,2.0,2.1 2.2,2.3,2.3,2.4), mean=1.63, stddev=0.396], bias-{mean,stddev}=-2.712e-08,0.01861, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040

LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.95503 tdnnf2.linear:5.02258 tdnnf2.affine:5.5568 tdnnf3.linear:4.34513 tdnnf3.affine:5.04061 tdnnf4.linear:3.9431 tdnnf4.affine:4.60796 tdnnf5.linear:3.57887 tdnnf5.affine:4.29176 tdnnf6.linear:3.45268 tdnnf6.affine:4.01181 tdnnf7.linear:3.27158 tdnnf7.affine:3.84866 tdnnf8.linear:3.14508 tdnnf8.affine:3.72918 tdnnf9.linear:3.14958 tdnnf9.affine:3.85503 tdnnf10.linear:3.2137 tdnnf10.affine:4.00783 tdnnf11.linear:3.42747 tdnnf11.affine:4.31496 tdnnf12.linear:3.70434 tdnnf12.affine:4.56011 tdnnf13.linear:3.93147 tdnnf13.affine:4.8913 prefinal-l:2.64863 prefinal-chain.affine:4.9036 prefinal-chain.linear:3.97905 output.affine:13.3552 prefinal-xent.affine:3.35311 prefinal-xent.linear:2.09486 output-xent.affine:13.4524 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.1937 tdnnf2.linear:18.2801 tdnnf2.affine:17.5759 tdnnf3.linear:15.8439 tdnnf3.affine:15.2513 tdnnf4.linear:14.0256 tdnnf4.affine:14.0446 tdnnf5.linear:13.2697 tdnnf5.affine:13.3849 tdnnf6.linear:12.9905 tdnnf6.affine:12.5601 tdnnf7.linear:13.0703 tdnnf7.affine:12.3866 tdnnf8.linear:13.7139 tdnnf8.affine:12.613 tdnnf9.linear:13.6552 tdnnf9.affine:12.7185 tdnnf10.linear:14.1728 tdnnf10.affine:13.0596 tdnnf11.linear:14.1181 tdnnf11.affine:13.0602 tdnnf12.linear:13.8694 tdnnf12.affine:12.9003 tdnnf13.linear:12.7563 tdnnf13.affine:12.0601 prefinal-l:10.9785 prefinal-chain.affine:19.1978 prefinal-chain.linear:23.775 output.affine:103.116 prefinal-xent.affine:15.1692 prefinal-xent.linear:14.2672 output-xent.affine:97.46 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.300194 tdnnf2.linear:0.274162 tdnnf2.affine:0.315013 tdnnf3.linear:0.272792 tdnnf3.affine:0.327523 tdnnf4.linear:0.279444 tdnnf4.affine:0.325902 tdnnf5.linear:0.268047 tdnnf5.affine:0.316694 tdnnf6.linear:0.26467 tdnnf6.affine:0.317188 tdnnf7.linear:0.249179 tdnnf7.affine:0.309154 tdnnf8.linear:0.229488 tdnnf8.affine:0.295383 tdnnf9.linear:0.230093 tdnnf9.affine:0.302547 tdnnf10.linear:0.226925 tdnnf10.affine:0.30752 tdnnf11.linear:0.242106 tdnnf11.affine:0.329475 tdnnf12.linear:0.26746 tdnnf12.affine:0.353414 tdnnf13.linear:0.307357 tdnnf13.affine:0.403402 prefinal-l:0.241237 prefinal-chain.affine:0.255707 prefinal-chain.linear:0.167638 output.affine:0.130002 prefinal-xent.affine:0.221399 prefinal-xent.linear:0.14644 output-xent.affine:0.138002 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 07:46:46 CST 2020, elapsed time 4 seconds
