# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/3.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/2.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/3.mdl 
# Started at Mon Feb 24 05:05:50 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/3.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.0965, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.66,0.67,0.69 0.73,0.98,1.4,1.7,1.9 2.1,2.2,2.2,2.4), mean=1.37, stddev=0.417], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.53,0.55 0.58,0.64,0.93,1.3,1.6 1.9,2.0,2.2,2.5), mean=1.01, stddev=0.412], bias-{mean,stddev}=0.01139,0.4062, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.11e+06, self-repaired-proportion=0.321174, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,6e-07 3e-05,0.004,0.16,0.38,0.49 0.60,0.94,1.0,1.4), mean=0.225, stddev=0.249], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0009,0.04,0.44,0.88,0.94 0.97,1.0,1.0,1.0), mean=0.475, stddev=0.37], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.08,0.10 0.12,0.12,0.13,0.15), mean=0.0533, stddev=0.0325], oderiv-count=1.24989e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-06 5e-05,0.004,0.16,0.37,0.44 0.55,0.80,0.88,1.2), mean=0.21, stddev=0.223], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.002,0.03,0.23,0.29,0.32 0.32,0.34,0.34,0.38), mean=0.187, stddev=0.12]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1192, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.91, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.69,0.73 0.78,0.85,0.93,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.946, stddev=0.124], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1096, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.92,0.95,0.97 1.0,1.1,1.2,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.23, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,1.0,1.1 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.6), mean=1.24, stddev=0.11], bias-{mean,stddev}=-0.01571,0.5166, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.24e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.75,0.90 0.98,1.1,1.3,1.5,1.6 1.7,1.8,1.8,1.8), mean=1.27, stddev=0.253], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.31,0.31,0.34 0.36,0.41,0.51,0.57,0.61 0.67,0.70,0.70,0.71), mean=0.494, stddev=0.0968], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.003 0.003,0.004,0.004,0.007), mean=0.00199, stddev=0.000831], oderiv-count=1.15453e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.66,0.86,0.95 1.0,1.1,1.3,1.5,1.6 1.7,1.8,1.9,2.0), mean=1.31, stddev=0.249], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.4,1.6 1.7,1.8,2.1,2.4,2.5 2.6,2.7,2.8,2.9), mean=2.1, stddev=0.33]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1077, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.72, stddev=0.00614], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.70,0.71,0.74 0.76,0.80,0.86,0.92,0.97 1.0,1.0,1.0,1.1), mean=0.858, stddev=0.0761], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09993, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.86,0.87,0.93 0.98,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.12, stddev=0.125], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.96,0.98 1.0,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.13, stddev=0.111], bias-{mean,stddev}=-0.07635,0.4265, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.23e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.94,1.0 1.1,1.3,1.5,1.7,1.9 2.0,2.1,2.1,2.3), mean=1.52, stddev=0.286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.34 0.36,0.40,0.48,0.56,0.58 0.61,0.63,0.63,0.67), mean=0.475, stddev=0.0868], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0007,0.0007 0.0007,0.0008,0.0009,0.001,0.002 0.002,0.003,0.003,0.004), mean=0.00109, stddev=0.00049], oderiv-count=1.07626e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.98,1.0,1.1 1.2,1.4,1.6,1.8,1.9 2.0,2.2,2.2,2.3), mean=1.6, stddev=0.281], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 2.0,2.2,2.7,3.1,3.4 3.5,3.6,3.7,3.8), mean=2.66, stddev=0.517]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09623, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.54, stddev=0.00272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.63,0.66 0.68,0.72,0.77,0.82,0.84 0.88,0.91,0.92,0.96), mean=0.767, stddev=0.0661], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09188, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.82,0.84,0.87 0.91,0.95,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.03, stddev=0.099], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.86,0.87,0.90 0.90,0.96,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.0908], bias-{mean,stddev}=-0.05052,0.4115, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.78e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.87,0.97,1.1 1.2,1.4,1.6,1.9,2.0 2.2,2.2,2.3,2.6), mean=1.63, stddev=0.317], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.36 0.37,0.40,0.47,0.56,0.59 0.60,0.63,0.63,0.65), mean=0.475, stddev=0.0818], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0005 0.0005,0.0006,0.0007,0.001,0.001 0.001,0.002,0.002,0.004), mean=0.000839, stddev=0.000429], oderiv-count=1.01728e+07
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,1.0,1.1,1.2 1.3,1.4,1.7,1.9,2.0 2.1,2.3,2.3,2.4), mean=1.69, stddev=0.302], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.6,1.9 2.2,2.4,2.9,3.3,3.6 3.7,3.8,3.9,4.0), mean=2.86, stddev=0.538]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08934, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.43, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.58,0.61 0.63,0.66,0.71,0.76,0.79 0.82,0.84,0.86,0.88), mean=0.712, stddev=0.0626], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08628, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.73,0.74,0.82 0.86,0.90,0.97,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.971, stddev=0.0968], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.80,0.82,0.85 0.87,0.90,0.96,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.973, stddev=0.0808], bias-{mean,stddev}=-0.006104,0.431, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.91,1.0,1.1 1.2,1.5,1.8,2.0,2.1 2.3,2.4,2.4,2.5), mean=1.73, stddev=0.347], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.33,0.36 0.38,0.40,0.47,0.54,0.59 0.61,0.64,0.65,0.69), mean=0.477, stddev=0.0804], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0004,0.0004,0.0005 0.0005,0.0005,0.0006,0.0009,0.001 0.001,0.002,0.002,0.003), mean=0.000741, stddev=0.000359], oderiv-count=9.01056e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.99,1.1,1.2 1.3,1.5,1.8,2.0,2.2 2.3,2.3,2.3,2.5), mean=1.77, stddev=0.33], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.7,2.0 2.2,2.4,2.9,3.4,3.8 3.9,4.1,4.1,4.5), mean=2.94, stddev=0.605]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08429, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.35, stddev=0.00291], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.57,0.58,0.59 0.60,0.63,0.67,0.71,0.74 0.75,0.77,0.80,0.89), mean=0.672, stddev=0.0523], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08374, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.76,0.77,0.79 0.82,0.85,0.94,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.943, stddev=0.0887], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.76,0.77,0.81 0.84,0.87,0.93,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.943, stddev=0.0868], bias-{mean,stddev}=-0.1228,0.3855, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.17e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.98,1.0,1.1 1.3,1.4,1.7,1.9,2.1 2.1,2.2,2.2,2.5), mean=1.66, stddev=0.316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.34 0.37,0.40,0.46,0.51,0.54 0.57,0.59,0.60,0.62), mean=0.453, stddev=0.0677], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0004,0.0004,0.0005 0.0005,0.0005,0.0006,0.0008,0.001 0.001,0.002,0.002,0.003), mean=0.000749, stddev=0.0004], oderiv-count=8.0592e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.3,1.4,1.7,2.0,2.1 2.2,2.2,2.4,2.6), mean=1.72, stddev=0.311], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.8,2.1 2.4,2.6,3.1,3.6,3.7 3.9,4.0,4.1,4.6), mean=3.06, stddev=0.546]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08973, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.44, stddev=0.00704], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.58,0.59,0.62 0.63,0.66,0.71,0.77,0.79 0.81,0.83,0.86,0.95), mean=0.715, stddev=0.0624], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.76,0.77,0.87 0.92,0.95,1.0,1.1,1.2 1.2,1.2,1.3,1.3), mean=1.04, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.83,0.85,0.87 0.90,0.96,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.04, stddev=0.11], bias-{mean,stddev}=-0.101,0.3947, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.65e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,1.1,1.2,1.5 1.6,1.8,2.1,2.4,2.5 2.6,2.8,2.8,3.0), mean=2.06, stddev=0.389], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.32,0.32,0.34 0.37,0.39,0.46,0.52,0.54 0.56,0.58,0.58,0.59), mean=0.457, stddev=0.0684], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0004,0.0004,0.0004 0.0004,0.0004,0.0006,0.0007,0.0008 0.0009,0.001,0.001,0.008), mean=0.000647, stddev=0.000705], oderiv-count=6.91878e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,1.2,1.3,1.7 1.8,1.9,2.2,2.5,2.6 2.8,3.0,3.0,3.2), mean=2.19, stddev=0.393], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,2.3,2.3,2.6 2.8,3.1,3.7,4.4,4.7 4.9,5.2,5.3,5.8), mean=3.78, stddev=0.778]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08652, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.38, stddev=0.00467], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.57,0.59 0.61,0.63,0.69,0.74,0.77 0.79,0.81,0.82,0.84), mean=0.69, stddev=0.0591], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08505, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.74,0.77,0.78 0.83,0.87,0.96,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.957, stddev=0.104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.78,0.80,0.81 0.82,0.88,0.95,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.958, stddev=0.0941], bias-{mean,stddev}=-0.07054,0.4072, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.63e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,1.1,1.1,1.3 1.5,1.6,1.9,2.2,2.4 2.6,2.6,2.7,3.1), mean=1.92, stddev=0.399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.32,0.32,0.34 0.36,0.39,0.45,0.50,0.53 0.55,0.58,0.59,0.61), mean=0.449, stddev=0.0663], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0004,0.0004,0.0005 0.0005,0.0005,0.0006,0.0008,0.0009 0.001,0.001,0.001,0.004), mean=0.000693, stddev=0.000371], oderiv-count=6.0297e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,1.1,1.2,1.4 1.5,1.7,2.0,2.3,2.5 2.6,2.7,2.8,3.4), mean=1.99, stddev=0.409], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,2.1,2.2,2.5 2.6,2.9,3.4,3.9,4.2 4.4,4.5,4.5,6.0), mean=3.4, stddev=0.648]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08642, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.38, stddev=0.00751], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.56,0.58 0.60,0.63,0.69,0.75,0.77 0.79,0.81,0.83,0.84), mean=0.688, stddev=0.0636], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08862, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.62,0.70,0.78 0.87,0.91,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.995, stddev=0.123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.75,0.77,0.80 0.84,0.88,0.99,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.994, stddev=0.13], bias-{mean,stddev}=-0.05474,0.3886, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.16e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.46,1.1,1.4 1.6,1.7,2.1,2.3,2.5 2.6,2.8,3.0,3.2), mean=2.03, stddev=0.413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.33,0.35 0.37,0.40,0.45,0.51,0.54 0.55,0.57,0.59,0.60), mean=0.456, stddev=0.0665], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.0006,0.0006,0.0007,0.0008,0.0009 0.001,0.001,0.001,0.007), mean=0.000772, stddev=0.000576], oderiv-count=4.93344e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.54,1.2,1.4 1.7,1.8,2.1,2.4,2.6 2.6,3.0,3.0,3.5), mean=2.08, stddev=0.426], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,1.3,2.5,2.6 2.7,3.0,3.4,4.0,4.3 4.5,4.8,5.0,5.7), mean=3.49, stddev=0.675]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08684, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.39, stddev=0.00299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.57,0.60 0.62,0.64,0.69,0.74,0.78 0.80,0.84,0.86,0.88), mean=0.692, stddev=0.0623], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.70,0.75 0.81,0.86,0.93,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.935, stddev=0.104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.72,0.75,0.78 0.80,0.82,0.92,1.0,1.1 1.2,1.2,1.2,1.3), mean=0.933, stddev=0.121], bias-{mean,stddev}=-0.04333,0.3914, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.42e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.0,1.3 1.4,1.6,1.9,2.2,2.3 2.5,2.6,2.7,3.0), mean=1.89, stddev=0.372], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.37,0.40,0.45,0.52,0.54 0.56,0.58,0.59,0.60), mean=0.457, stddev=0.0646], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0007,0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.000941, stddev=0.000174], oderiv-count=3.82118e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.3 1.5,1.7,1.9,2.3,2.4 2.5,2.6,2.6,3.2), mean=1.96, stddev=0.371], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.4 2.6,2.8,3.3,3.7,3.9 4.0,4.3,4.5,5.2), mean=3.26, stddev=0.534]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.5 1.5,1.5,1.5,1.5), mean=1.44, stddev=0.00666], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.57,0.60,0.62 0.64,0.66,0.72,0.77,0.81 0.84,0.85,0.86,0.90), mean=0.719, stddev=0.0655], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08692, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.64,0.73 0.80,0.85,0.98,1.1,1.1 1.2,1.2,1.3,1.4), mean=0.974, stddev=0.135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.77,0.77,0.81 0.83,0.88,0.97,1.1,1.1 1.2,1.2,1.2,1.2), mean=0.977, stddev=0.109], bias-{mean,stddev}=-0.07056,0.4179, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.94,1.0,1.2 1.4,1.6,1.9,2.2,2.3 2.5,2.6,2.7,2.9), mean=1.92, stddev=0.395], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.28,0.31,0.33 0.37,0.40,0.45,0.51,0.53 0.54,0.56,0.56,0.57), mean=0.448, stddev=0.0653], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.004), mean=0.00117, stddev=0.000335], oderiv-count=2.94765e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.95,1.1,1.3 1.5,1.7,2.0,2.3,2.5 2.5,2.6,2.6,2.7), mean=1.97, stddev=0.38], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,2.0,2.3,2.6 2.7,3.0,3.4,3.8,3.9 4.1,4.3,4.5,4.8), mean=3.35, stddev=0.505]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09471, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.52, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.62,0.64 0.66,0.69,0.75,0.82,0.85 0.88,0.93,0.94,1.0), mean=0.754, stddev=0.0759], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0905, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.62,0.66,0.76 0.81,0.88,1.0,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.01, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.77,0.79,0.80 0.85,0.90,1.0,1.1,1.2 1.3,1.3,1.4,1.5), mean=1.01, stddev=0.143], bias-{mean,stddev}=-0.02055,0.4403, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.23e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.87,0.98,1.3 1.5,1.7,2.1,2.4,2.5 2.7,2.8,2.8,2.9), mean=2.07, stddev=0.41], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.29,0.34 0.37,0.40,0.45,0.50,0.53 0.54,0.56,0.57,0.62), mean=0.451, stddev=0.0651], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.0015, stddev=0.000221], oderiv-count=1.89965e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.85,1.1,1.4 1.6,1.8,2.1,2.4,2.6 2.7,2.8,2.9,3.0), mean=2.11, stddev=0.398], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.5,2.6,2.9 3.1,3.2,3.6,4.0,4.1 4.2,4.4,4.4,4.7), mean=3.59, stddev=0.423]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09517, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.52, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.62,0.63,0.66 0.68,0.70,0.75,0.81,0.85 0.87,0.88,0.92,0.99), mean=0.758, stddev=0.0665], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09131, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.60,0.64,0.73 0.76,0.81,1.0,1.2,1.2 1.3,1.4,1.4,1.5), mean=1.02, stddev=0.19], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.76,0.77,0.81 0.88,0.92,1.0,1.1,1.2 1.2,1.3,1.3,1.6), mean=1.02, stddev=0.132], bias-{mean,stddev}=-0.0296,0.4279, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.17e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.81,0.98,1.3 1.5,1.7,2.0,2.3,2.5 2.6,2.8,2.9,3.2), mean=2.01, stddev=0.423], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.31 0.34,0.38,0.44,0.49,0.51 0.54,0.56,0.56,0.62), mean=0.434, stddev=0.0704], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.003,0.004 0.004,0.004,0.004,0.005), mean=0.00319, stddev=0.000472], oderiv-count=619072
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.78,1.1,1.4 1.6,1.7,2.1,2.4,2.5 2.7,2.9,3.0,3.1), mean=2.06, stddev=0.42], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.6,2.6,3.0 3.1,3.2,3.5,4.0,4.3 4.5,4.8,4.8,5.3), mean=3.63, stddev=0.505]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.005, max-change=0.75, params-rms=0.09134, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.0 1.0,1.0,1.0,1.0,1.0 1.0,1.0,1.0,1.0), mean=1.03, stddev=0.0079], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.60,0.64,0.65 0.67,0.68,0.74,0.77,0.78 0.79,0.81,0.81,0.86), mean=0.729, stddev=0.0463], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1516, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.68,0.73,0.80 0.85,1.0,1.2,1.4,1.5 1.5,1.6,1.6,1.7), mean=1.19, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.5,1.6,1.7,1.8,1.9 2.0,2.0,2.0,2.3), mean=1.71, stddev=0.174], bias-{mean,stddev}=0.01203,0.5789, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.01e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.59,0.73,0.94 1.1,1.3,1.8,2.3,2.5 2.6,2.8,2.8,3.2), mean=1.79, stddev=0.546], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.18,0.26 0.30,0.34,0.40,0.46,0.50 0.52,0.55,0.55,0.59), mean=0.398, stddev=0.0836], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.006 0.006,0.007,0.008,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00838, stddev=0.00182], oderiv-count=597312
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.65,0.72,0.95 1.1,1.4,1.8,2.3,2.5 2.7,2.8,2.8,3.1), mean=1.81, stddev=0.535], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,2.3,2.4,2.7 3.0,3.2,3.6,4.1,4.5 4.6,4.8,4.8,5.1), mean=3.6, stddev=0.61]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, params-rms=0.1706, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.93, stddev=0.00616], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.4,1.4,1.5 1.5,1.5,1.6,1.6), mean=1.36, stddev=0.107], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-3e-08 -2e-08,-1e-08,5e-10,1e-08,2e-08 2e-08,2e-08,3e-08,5e-08), mean=4.73e-10, stddev=1.62e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.0,2.0 2.0,2.0,2.2,2.3,2.4 2.4,2.5,2.5,2.6), mean=2.17, stddev=0.161]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0147823, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.05924, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.005,0.01,0.04 0.08,0.14,0.32,0.66,0.80 0.87,0.96,1.0,1.2), mean=0.389, stddev=0.27], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.8,2.9,3.1 3.1,3.2,3.6,4.1,4.3 4.5,4.8,5.2,5.4), mean=3.73, stddev=0.528], bias-{mean,stddev}=4.192e-05,0.1581, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1157, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.49,0.58 0.65,0.82,0.95,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.912, stddev=0.158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.3,1.4,1.4 1.5,1.5,1.6,1.6), mean=1.3, stddev=0.116], bias-{mean,stddev}=0.06636,0.4163, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.19e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.46,0.49,0.56 0.71,0.87,1.1,1.3,1.5 1.5,1.6,1.7,1.7), mean=1.1, stddev=0.289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.30 0.35,0.39,0.49,0.55,0.60 0.63,0.65,0.68,0.69), mean=0.479, stddev=0.0938], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.003,0.004,0.004,0.004 0.005,0.005,0.006,0.008), mean=0.00379, stddev=0.000679], oderiv-count=621248
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.52,0.58 0.73,0.88,1.1,1.3,1.5 1.5,1.6,1.7,1.7), mean=1.11, stddev=0.279], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,1.0,1.1,1.2 1.3,1.4,1.7,1.9,2.0 2.1,2.1,2.1,2.1), mean=1.66, stddev=0.263]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0147823, l2-regularize=0.0005, max-change=0.75, params-rms=0.1386, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.57, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.77,0.78,0.91 0.98,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.1, stddev=0.106], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-3e-08,-3e-08 -2e-08,-2e-08,2e-09,2e-08,3e-08 3e-08,3e-08,4e-08,5e-08), mean=2.67e-09, stddev=1.91e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.6,1.7,1.8,1.8 1.8,1.9,2.0,2.0), mean=1.67, stddev=0.111]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0739115, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.09971, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.11 0.12,0.20,0.56,1.1,1.3 1.5,1.7,1.8,2.8), mean=0.653, stddev=0.459], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5.3,5.3,5.6,5.6 5.7,5.9,6.3,6.6,6.8 6.9,7.0,7.3,8.2), mean=6.32, stddev=0.462], bias-{mean,stddev}=-2.255e-07,0.2188, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-05 9e-05,0.0002,0.0004,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000682, stddev=0.00123], oderiv-count=608192
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/2.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/3.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.20939 tdnnf2.linear:5.0497 tdnnf2.affine:5.82959 tdnnf3.linear:4.85436 tdnnf3.affine:5.8 tdnnf4.linear:4.566 tdnnf4.affine:5.49094 tdnnf5.linear:4.13062 tdnnf5.affine:5.22139 tdnnf6.linear:3.89277 tdnnf6.affine:4.94031 tdnnf7.linear:4.15314 tdnnf7.affine:5.20871 tdnnf8.linear:3.74509 tdnnf8.affine:4.86688 tdnnf9.linear:3.70749 tdnnf9.affine:4.84745 tdnnf10.linear:3.66066 tdnnf10.affine:4.76085 tdnnf11.linear:3.76029 tdnnf11.affine:4.89189 tdnnf12.linear:3.98481 tdnnf12.affine:5.22859 tdnnf13.linear:4.22008 tdnnf13.affine:5.60457 prefinal-l:2.37385 prefinal-chain.affine:4.57135 prefinal-chain.linear:3.64114 output.affine:11.4335 prefinal-xent.affine:4.13044 prefinal-xent.linear:3.21076 output-xent.affine:15.9373 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:16.8337 tdnnf2.linear:15.2606 tdnnf2.affine:15.1985 tdnnf3.linear:13.7876 tdnnf3.affine:13.6984 tdnnf4.linear:12.3179 tdnnf4.affine:12.6611 tdnnf5.linear:11.4353 tdnnf5.affine:12.0728 tdnnf6.linear:10.7896 tdnnf6.affine:11.6546 tdnnf7.linear:11.4848 tdnnf7.affine:12.6971 tdnnf8.linear:11.0744 tdnnf8.affine:11.848 tdnnf9.linear:11.0623 tdnnf9.affine:12.1813 tdnnf10.linear:11.1155 tdnnf10.affine:11.5404 tdnnf11.linear:11.5501 tdnnf11.affine:12.1152 tdnnf12.linear:12.1229 tdnnf12.affine:12.6115 tdnnf13.linear:12.1816 tdnnf13.affine:12.655 prefinal-l:8.26754 prefinal-chain.affine:15.2075 prefinal-chain.linear:15.4392 output.affine:31.7539 prefinal-xent.affine:11.5029 prefinal-xent.linear:12.5461 output-xent.affine:52.5725 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.452139 tdnnf2.linear:0.363378 tdnnf2.affine:0.392588 tdnnf3.linear:0.387468 tdnnf3.affine:0.430473 tdnnf4.linear:0.403013 tdnnf4.affine:0.427068 tdnnf5.linear:0.387261 tdnnf5.affine:0.416766 tdnnf6.linear:0.383205 tdnnf6.affine:0.409863 tdnnf7.linear:0.396428 tdnnf7.affine:0.429205 tdnnf8.linear:0.361303 tdnnf8.affine:0.40414 tdnnf9.linear:0.360208 tdnnf9.affine:0.397553 tdnnf10.linear:0.354965 tdnnf10.affine:0.398681 tdnnf11.linear:0.352856 tdnnf11.affine:0.392179 tdnnf12.linear:0.356976 tdnnf12.affine:0.402286 tdnnf13.linear:0.376086 tdnnf13.affine:0.432546 prefinal-l:0.295341 prefinal-chain.affine:0.300085 prefinal-chain.linear:0.26148 output.affine:0.42798 prefinal-xent.affine:0.353852 prefinal-xent.linear:0.281619 output-xent.affine:0.351019 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 05:05:53 CST 2020, elapsed time 3 seconds
