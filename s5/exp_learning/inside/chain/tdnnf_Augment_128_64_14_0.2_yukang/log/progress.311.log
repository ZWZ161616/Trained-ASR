# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/311.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/310.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/311.mdl 
# Started at Mon Feb 24 13:39:07 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/311.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1233, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,1.0,1.2,1.3 1.4,1.5,1.7,2.1,2.3 2.5,2.7,2.7,2.9), mean=1.79, stddev=0.374], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.49,0.51,0.57 0.64,0.76,1.3,1.7,2.0 2.3,2.4,2.4,2.9), mean=1.3, stddev=0.513], bias-{mean,stddev}=-0.09631,0.1596, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=9.03e+06, self-repaired-proportion=0.015625, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.01,0.02 0.03,0.05,0.10,0.17,0.20 0.23,0.26,0.26,0.32), mean=0.108, stddev=0.0702], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.06,0.09 0.11,0.18,0.34,0.48,0.65 0.71,0.74,0.76,0.84), mean=0.354, stddev=0.188], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.05,0.06 0.07,0.08,0.08,0.12), mean=0.0395, stddev=0.0161], oderiv-count=1.30044e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.007,0.02 0.02,0.04,0.10,0.17,0.20 0.23,0.25,0.28,0.32), mean=0.108, stddev=0.07], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.07 0.09,0.13,0.19,0.24,0.26 0.27,0.29,0.29,0.29), mean=0.182, stddev=0.0617]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.015873, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.72, stddev=0.00207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.69 0.72,0.78,0.85,0.93,0.98 1.0,1.1,1.1,1.2), mean=0.853, stddev=0.101], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1075, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.90,0.94,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.6,1.6), mean=1.21, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.4,1.4), mean=1.21, stddev=0.0788], bias-{mean,stddev}=-0.1377,0.09394, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.69,0.78 0.85,0.90,1.1,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.07, stddev=0.169], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.36,0.37 0.40,0.43,0.51,0.58,0.59 0.60,0.61,0.61,0.62), mean=0.507, stddev=0.0746], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.003,0.009,0.009,0.01), mean=0.0026, stddev=0.0014], oderiv-count=1.20113e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.70,0.71,0.78 0.84,0.92,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.07, stddev=0.175], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.3,1.4 1.4,1.5,1.7,2.0,2.1 2.2,2.3,2.3,2.4), mean=1.73, stddev=0.264]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.015873, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1003, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.63,0.65,0.67 0.70,0.73,0.80,0.87,0.90 0.92,0.95,1.0,1.0), mean=0.798, stddev=0.0806], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.65,0.88,1.1 1.1,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.6), mean=1.24, stddev=0.163], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.2,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.25, stddev=0.0719], bias-{mean,stddev}=-0.1583,0.08298, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.37e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.58,0.97,1.1 1.2,1.2,1.3,1.5,1.6 1.7,1.7,1.7,1.8), mean=1.36, stddev=0.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.41 0.42,0.46,0.51,0.56,0.57 0.58,0.60,0.60,0.60), mean=0.51, stddev=0.0566], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.004,0.004,0.02), mean=0.00164, stddev=0.00135], oderiv-count=1.08595e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.66,0.96,1.1 1.1,1.2,1.4,1.5,1.6 1.7,1.7,1.7,1.7), mean=1.35, stddev=0.204], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.99,1.4,1.8 1.8,1.9,2.1,2.4,2.6 2.7,2.7,2.8,3.0), mean=2.16, stddev=0.343]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.015873, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09135, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.46, stddev=0.0012], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.58,0.60,0.62 0.64,0.67,0.72,0.78,0.81 0.84,0.86,0.88,0.94), mean=0.728, stddev=0.0667], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09586, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.63,0.66,0.95 0.96,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.08, stddev=0.129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.90,0.94 0.96,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.08, stddev=0.0875], bias-{mean,stddev}=-0.1708,0.07787, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.65e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.56,0.59,0.97 1.0,1.1,1.3,1.4,1.5 1.5,1.6,1.7,1.8), mean=1.27, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.34,0.34,0.38 0.41,0.45,0.50,0.55,0.56 0.56,0.57,0.57,0.59), mean=0.493, stddev=0.0572], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.004,0.004,0.01), mean=0.00147, stddev=0.00107], oderiv-count=9.856e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.60,0.61,0.99 1.0,1.1,1.3,1.4,1.5 1.5,1.6,1.6,1.8), mean=1.25, stddev=0.21], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,1.0,1.1,1.6 1.7,1.9,2.0,2.3,2.4 2.5,2.7,2.8,3.3), mean=2.06, stddev=0.345]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.015873, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08531, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.36, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.55,0.58 0.60,0.62,0.68,0.73,0.76 0.78,0.81,0.84,0.94), mean=0.679, stddev=0.0651], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08097, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.62,0.64,0.79 0.82,0.84,0.91,0.97,1.0 1.1,1.1,1.1,1.2), mean=0.911, stddev=0.0953], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.73,0.74,0.80 0.82,0.85,0.91,0.98,1.0 1.0,1.1,1.1,1.1), mean=0.913, stddev=0.0775], bias-{mean,stddev}=-0.1395,0.05284, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.62,0.66,0.81 0.88,0.96,1.0,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.04, stddev=0.135], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.41 0.44,0.46,0.50,0.54,0.55 0.57,0.58,0.59,0.62), mean=0.497, stddev=0.046], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00171, stddev=0.000273], oderiv-count=9.20026e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.64,0.67,0.81 0.87,0.95,1.0,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.03, stddev=0.131], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.2,1.4 1.4,1.5,1.6,1.8,1.9 2.0,2.1,2.1,2.3), mean=1.64, stddev=0.204]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.015873, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08515, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.36, stddev=0.000846], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.56,0.57 0.60,0.62,0.68,0.73,0.75 0.77,0.79,0.80,0.85), mean=0.679, stddev=0.0598], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07913, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.64,0.75 0.79,0.83,0.89,0.96,0.99 1.0,1.1,1.1,1.2), mean=0.89, stddev=0.0962], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.73,0.73,0.77 0.79,0.82,0.88,0.96,1.0 1.0,1.1,1.1,1.1), mean=0.891, stddev=0.0823], bias-{mean,stddev}=-0.1358,0.05426, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.54e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.72,0.79 0.85,0.93,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.03, stddev=0.138], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.40,0.42 0.44,0.46,0.48,0.52,0.54 0.55,0.56,0.56,0.61), mean=0.489, stddev=0.0405], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00172, stddev=0.000209], oderiv-count=7.6247e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.67,0.69,0.81 0.85,0.91,1.0,1.1,1.2 1.3,1.3,1.3,1.4), mean=1.02, stddev=0.14], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.3 1.4,1.4,1.6,1.8,1.9 2.0,2.1,2.1,2.3), mean=1.61, stddev=0.212]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.015873, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08502, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.36, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.54,0.55,0.57 0.60,0.63,0.67,0.73,0.76 0.79,0.82,0.83,0.87), mean=0.677, stddev=0.0659], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07864, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.53,0.53,0.73 0.78,0.81,0.89,0.96,1.0 1.0,1.1,1.1,1.2), mean=0.883, stddev=0.107], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.73,0.74,0.77 0.79,0.81,0.89,0.95,1.0 1.0,1.0,1.0,1.1), mean=0.886, stddev=0.0797], bias-{mean,stddev}=-0.1284,0.05288, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.89e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.52,0.79 0.89,0.94,1.0,1.1,1.2 1.3,1.3,1.3,1.3), mean=1.02, stddev=0.152], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.41 0.43,0.45,0.47,0.50,0.53 0.55,0.57,0.57,0.59), mean=0.474, stddev=0.0453], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.004), mean=0.00177, stddev=0.000279], oderiv-count=6.83322e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.50,0.74 0.86,0.92,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.01, stddev=0.155], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.93,1.0,1.3 1.4,1.4,1.6,1.7,1.8 2.1,2.3,2.3,2.4), mean=1.61, stddev=0.247]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.015873, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08633, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.38, stddev=0.00331], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.54,0.56 0.59,0.62,0.68,0.76,0.79 0.83,0.86,0.89,0.95), mean=0.686, stddev=0.0807], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07773, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.51,0.56,0.70 0.73,0.78,0.87,0.98,1.0 1.0,1.1,1.1,1.1), mean=0.872, stddev=0.113], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.72,0.72,0.75 0.77,0.81,0.87,0.93,0.98 1.0,1.1,1.1,1.3), mean=0.875, stddev=0.0865], bias-{mean,stddev}=-0.1098,0.05005, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.75e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.57,0.76 0.84,0.91,1.0,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.03, stddev=0.176], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.31,0.37 0.41,0.42,0.44,0.47,0.48 0.51,0.52,0.54,0.55), mean=0.444, stddev=0.041], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00168, stddev=0.000269], oderiv-count=6.14445e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.45,0.58,0.74 0.79,0.89,1.0,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.02, stddev=0.181], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.4,1.5,1.7,2.0,2.1 2.4,2.5,2.5,2.6), mean=1.75, stddev=0.312]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.015873, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08801, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.41, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.52,0.56 0.58,0.61,0.68,0.78,0.84 0.87,0.91,0.92,0.99), mean=0.697, stddev=0.0995], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07975, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.61,0.67 0.76,0.80,0.90,0.99,1.0 1.1,1.1,1.1,1.2), mean=0.894, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.73,0.74,0.76 0.79,0.82,0.89,0.96,1.0 1.0,1.1,1.1,1.2), mean=0.898, stddev=0.0858], bias-{mean,stddev}=-0.08404,0.0382, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.71,0.72,0.91 0.93,0.97,1.1,1.2,1.3 1.4,1.4,1.5,1.8), mean=1.11, stddev=0.171], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.34,0.37,0.41 0.42,0.43,0.45,0.47,0.48 0.49,0.51,0.51,0.52), mean=0.448, stddev=0.0329], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00173, stddev=0.000271], oderiv-count=4.8816e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.66,0.71,0.88 0.92,0.99,1.1,1.3,1.3 1.4,1.4,1.4,1.7), mean=1.12, stddev=0.169], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.4,3.0), mean=1.89, stddev=0.264]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.015873, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08854, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.42, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.49,0.53,0.54 0.57,0.59,0.68,0.78,0.88 0.91,0.95,0.97,1.0), mean=0.699, stddev=0.114], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07988, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.49,0.62,0.70 0.75,0.83,0.90,0.99,1.0 1.0,1.1,1.1,1.1), mean=0.896, stddev=0.115], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.71,0.74,0.77 0.79,0.83,0.90,0.95,0.99 1.0,1.1,1.1,1.2), mean=0.9, stddev=0.0817], bias-{mean,stddev}=-0.07412,0.0346, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.49e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.67,0.78,0.86 0.90,0.98,1.1,1.2,1.2 1.3,1.4,1.4,1.4), mean=1.08, stddev=0.143], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.33,0.35,0.37 0.39,0.40,0.43,0.46,0.48 0.49,0.49,0.50,0.54), mean=0.432, stddev=0.0404], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.003), mean=0.00207, stddev=0.000302], oderiv-count=4.1088e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.70,0.79,0.85 0.92,0.96,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.08, stddev=0.15], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.6,1.7,1.9,2.1,2.2 2.2,2.3,2.3,2.6), mean=1.88, stddev=0.218]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.015873, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08339, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.33, stddev=0.00154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.46,0.49 0.51,0.55,0.63,0.77,0.83 0.87,0.90,0.90,1.0), mean=0.656, stddev=0.12], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07776, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.59,0.65 0.68,0.73,0.86,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.867, stddev=0.147], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.70,0.70,0.75 0.78,0.80,0.88,0.94,0.97 1.0,1.0,1.0,1.1), mean=0.876, stddev=0.0786], bias-{mean,stddev}=-0.07687,0.03671, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.92e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.77 0.77,0.83,0.93,1.0,1.1 1.2,1.2,1.2,1.4), mean=0.941, stddev=0.131], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.33,0.34 0.36,0.38,0.41,0.44,0.45 0.46,0.46,0.47,0.49), mean=0.408, stddev=0.0347], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.004), mean=0.00286, stddev=0.000315], oderiv-count=2.80102e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.70,0.74 0.79,0.83,0.93,1.0,1.1 1.2,1.2,1.3,1.5), mean=0.936, stddev=0.134], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.6,1.6,1.7,2.0,2.2 2.3,2.3,2.4,2.5), mean=1.81, stddev=0.24]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.015873, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.07781, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.2,1.2,1.2,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.24, stddev=0.000977], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.44,0.47 0.49,0.52,0.59,0.72,0.77 0.84,0.86,0.88,0.90), mean=0.612, stddev=0.112], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0751, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.51,0.59 0.64,0.68,0.81,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.833, stddev=0.167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.70,0.72,0.73 0.75,0.78,0.85,0.91,0.93 0.94,0.98,0.98,1.2), mean=0.847, stddev=0.072], bias-{mean,stddev}=-0.07671,0.04551, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.55,0.61 0.65,0.68,0.79,0.87,0.93 1.0,1.1,1.1,1.2), mean=0.789, stddev=0.121], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.24,0.28 0.29,0.32,0.37,0.41,0.43 0.44,0.46,0.46,0.52), mean=0.368, stddev=0.0537], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.004,0.005,0.005 0.005,0.006,0.006,0.008), mean=0.00448, stddev=0.000671], oderiv-count=1.85395e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.53,0.53,0.59 0.64,0.68,0.79,0.88,0.93 1.0,1.0,1.1,1.2), mean=0.787, stddev=0.125], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.4 1.5,1.5,1.8,2.1,2.2 2.3,2.4,2.5,2.7), mean=1.82, stddev=0.288]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.015873, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08135, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.3, stddev=0.00104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.46,0.49 0.52,0.55,0.62,0.74,0.80 0.85,0.89,0.92,0.98), mean=0.641, stddev=0.11], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08212, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.62,0.67 0.75,0.80,0.91,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.918, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.75,0.77,0.82 0.83,0.87,0.92,0.98,1.0 1.1,1.1,1.1,1.1), mean=0.926, stddev=0.0754], bias-{mean,stddev}=-0.06509,0.06059, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.1e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.63,0.64,0.65 0.68,0.76,0.85,1.0,1.1 1.2,1.3,1.3,1.3), mean=0.884, stddev=0.158], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.23,0.26 0.28,0.31,0.37,0.41,0.42 0.45,0.47,0.47,0.49), mean=0.363, stddev=0.0573], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.007,0.007,0.008,0.009,0.009 0.009,0.01,0.01,0.01), mean=0.00784, stddev=0.000969], oderiv-count=620160
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.61,0.63,0.64 0.66,0.75,0.83,1.0,1.1 1.2,1.2,1.2,1.3), mean=0.87, stddev=0.157], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.7,1.7 1.8,2.0,2.4,2.6,2.8 2.9,3.0,3.1,3.2), mean=2.32, stddev=0.358]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.015873, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.005, max-change=0.75, params-rms=0.1137, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.29, stddev=0.0147], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.72,0.73,0.77 0.80,0.83,0.91,0.98,1.0 1.0,1.1,1.1,1.1), mean=0.906, stddev=0.0823], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1707, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.1,1.1,1.2 1.2,1.3,1.4,1.5,1.5 1.5,1.5,1.5,1.6), mean=1.36, stddev=0.106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.9,2.0,2.0 2.1,2.1,2.1,2.2), mean=1.93, stddev=0.108], bias-{mean,stddev}=-0.0274,0.1205, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.18e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.1,1.1 1.2,1.3,1.4,1.5,1.6 1.7,1.7,1.7,1.8), mean=1.4, stddev=0.163], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.37 0.38,0.39,0.41,0.43,0.45 0.46,0.47,0.47,0.48), mean=0.411, stddev=0.0283], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.012, stddev=0.0018], oderiv-count=616896
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.4,1.5,1.6 1.7,1.8,1.8,1.8), mean=1.39, stddev=0.168], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.4,2.4,2.5 2.5,2.7,3.0,3.3,3.5 3.6,3.7,3.8,4.1), mean=2.99, stddev=0.362]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, params-rms=0.2091, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.4,2.4,2.4 2.4,2.4,2.4,2.4,2.4 2.4,2.4,2.4,2.4), mean=2.37, stddev=0.00352], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.3,1.4 1.5,1.5,1.7,1.8,1.9 1.9,2.0,2.0,2.0), mean=1.66, stddev=0.174], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-4e-08 -2e-08,-1e-08,-2e-09,2e-08,3e-08 3e-08,4e-08,4e-08,5e-08), mean=2.11e-09, stddev=1.98e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.5,2.6 2.7,2.7,2.8,3.1,3.1 3.2,3.2,3.3,3.4), mean=2.89, stddev=0.194]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00155584, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.1813, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.16,0.25,0.50 0.77,1.0,1.5,1.7,1.9 2.0,2.0,2.1,2.7), mean=1.38, stddev=0.435], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(10,10,10,11 11,11,11,12,12 13,13,13,13), mean=11.5, stddev=0.64], bias-{mean,stddev}=0.001277,0.2628, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1173, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.64,0.71,0.81 0.86,0.89,0.93,1.0,1.0 1.0,1.1,1.1,1.2), mean=0.935, stddev=0.0824], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.5 1.5,1.5,1.5,1.6), mean=1.32, stddev=0.0965], bias-{mean,stddev}=-0.01823,0.1899, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.49,0.51,0.58 0.63,0.69,0.82,1.0,1.1 1.2,1.3,1.4,1.5), mean=0.862, stddev=0.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.36,0.37 0.40,0.41,0.46,0.52,0.55 0.57,0.62,0.62,0.64), mean=0.467, stddev=0.063], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.006 0.006,0.006,0.006,0.007,0.007 0.008,0.008,0.009,0.02), mean=0.00656, stddev=0.00125], oderiv-count=613632
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.52,0.60 0.66,0.70,0.87,1.0,1.2 1.3,1.4,1.4,1.6), mean=0.884, stddev=0.215], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.99,1.0,1.1 1.1,1.2,1.3,1.5,1.6 1.7,1.7,1.7,1.8), mean=1.35, stddev=0.181]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00155584, l2-regularize=0.0005, max-change=0.75, params-rms=0.1248, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.41, stddev=0.00124], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.78,0.79,0.82 0.86,0.90,0.98,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.993, stddev=0.108], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-3e-08,-3e-08,-2e-08 -2e-08,-1e-08,-2e-09,1e-08,1e-08 2e-08,3e-08,3e-08,4e-08), mean=-1.27e-09, stddev=1.51e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.3,1.4,1.5,1.5 1.5,1.6,1.6,1.7), mean=1.4, stddev=0.0967]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00777919, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1979, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.08,0.32 0.79,1.1,1.5,2.0,2.2 2.3,2.5,2.6,4.0), mean=1.48, stddev=0.558], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,13,13,13 13,13,13,13), mean=12.6, stddev=0.224], bias-{mean,stddev}=3.482e-08,0.1843, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,6e-05 0.0001,0.0002,0.0006,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000815, stddev=0.00121], oderiv-count=627776
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/310.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/311.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.27263 tdnnf2.linear:2.51702 tdnnf2.affine:2.87405 tdnnf3.linear:2.21157 tdnnf3.affine:2.91833 tdnnf4.linear:2.00325 tdnnf4.affine:2.56676 tdnnf5.linear:1.88299 tdnnf5.affine:2.13723 tdnnf6.linear:1.77062 tdnnf6.affine:2.04993 tdnnf7.linear:1.71391 tdnnf7.affine:1.97855 tdnnf8.linear:1.61476 tdnnf8.affine:1.87838 tdnnf9.linear:1.58584 tdnnf9.affine:1.87858 tdnnf10.linear:1.6525 tdnnf10.affine:2.00907 tdnnf11.linear:1.71598 tdnnf11.affine:2.10812 tdnnf12.linear:1.78172 tdnnf12.affine:2.18348 tdnnf13.linear:1.93801 tdnnf13.affine:2.51607 prefinal-l:2.78078 prefinal-chain.affine:2.89498 prefinal-chain.linear:2.54801 output.affine:5.87837 prefinal-xent.affine:1.67674 prefinal-xent.linear:1.08257 output-xent.affine:5.43889 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:20.7951 tdnnf2.linear:13.7433 tdnnf2.affine:13.8823 tdnnf3.linear:12.8354 tdnnf3.affine:14.2973 tdnnf4.linear:11.6929 tdnnf4.affine:12.4528 tdnnf5.linear:10.9191 tdnnf5.affine:10.5002 tdnnf6.linear:10.8987 tdnnf6.affine:10.2628 tdnnf7.linear:10.8824 tdnnf7.affine:10.1874 tdnnf8.linear:11.0501 tdnnf8.affine:10.0429 tdnnf9.linear:11.2651 tdnnf9.affine:10.2617 tdnnf10.linear:11.3329 tdnnf10.affine:10.266 tdnnf11.linear:10.6744 tdnnf11.affine:10.0002 tdnnf12.linear:9.95966 tdnnf12.affine:9.66608 tdnnf13.linear:10.4131 tdnnf13.affine:10.5589 prefinal-l:10.2947 prefinal-chain.affine:15.5155 prefinal-chain.linear:18.923 output.affine:93.6875 prefinal-xent.affine:10.8341 prefinal-xent.linear:11.2955 output-xent.affine:101.315 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.251669 tdnnf2.linear:0.182325 tdnnf2.affine:0.205693 tdnnf3.linear:0.171322 tdnnf3.affine:0.2021 tdnnf4.linear:0.170264 tdnnf4.affine:0.204531 tdnnf5.linear:0.171818 tdnnf5.affine:0.202611 tdnnf6.linear:0.162148 tdnnf6.affine:0.199375 tdnnf7.linear:0.157232 tdnnf7.affine:0.193921 tdnnf8.linear:0.145831 tdnnf8.affine:0.18652 tdnnf9.linear:0.140561 tdnnf9.affine:0.182768 tdnnf10.linear:0.145604 tdnnf10.affine:0.195441 tdnnf11.linear:0.160342 tdnnf11.affine:0.210226 tdnnf12.linear:0.178383 tdnnf12.affine:0.225266 tdnnf13.linear:0.185594 tdnnf13.affine:0.237598 prefinal-l:0.271331 prefinal-chain.affine:0.186217 prefinal-chain.linear:0.134086 output.affine:0.0625459 prefinal-xent.affine:0.154386 prefinal-xent.linear:0.0956503 output-xent.affine:0.0536809 ]
# Accounting: time=2 threads=1
# Ended (code 0) at Mon Feb 24 13:39:09 CST 2020, elapsed time 2 seconds
