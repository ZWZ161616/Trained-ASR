# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/138.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/137.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/138.mdl 
# Started at Mon Feb 24 09:28:46 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/138.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.15, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.4,1.5 1.6,1.8,2.1,2.5,3.0 3.2,3.3,3.4,3.6), mean=2.17, stddev=0.486], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.59,0.62,0.70 0.80,0.93,1.5,2.1,2.5 2.7,2.9,3.0,3.6), mean=1.58, stddev=0.628], bias-{mean,stddev}=-0.1547,0.2169, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.94e+06, self-repaired-proportion=0.0490036, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.002,0.005,0.01 0.02,0.04,0.10,0.18,0.24 0.31,0.31,0.36,0.41), mean=0.122, stddev=0.0908], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.03,0.05 0.08,0.15,0.31,0.47,0.65 0.74,0.77,0.78,0.83), mean=0.335, stddev=0.203], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.06,0.08 0.10,0.12,0.12,0.19), mean=0.0496, stddev=0.027], oderiv-count=1.31882e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.01 0.02,0.04,0.10,0.20,0.25 0.30,0.33,0.35,0.44), mean=0.122, stddev=0.0928], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.06 0.09,0.14,0.21,0.28,0.31 0.33,0.35,0.35,0.35), mean=0.206, stddev=0.0833]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.391534, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1329, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.1 2.1,2.1,2.1,2.1,2.1 2.1,2.1,2.1,2.1), mean=2.13, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.61,0.67,0.88 0.91,0.96,1.0,1.2,1.2 1.3,1.4,1.4,1.6), mean=1.05, stddev=0.143], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1318, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.3,1.4,1.5,1.6,1.7 1.8,1.9,1.9,2.0), mean=1.48, stddev=0.17], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.3 1.4,1.4,1.5,1.6,1.6 1.7,1.7,1.7,1.9), mean=1.49, stddev=0.107], bias-{mean,stddev}=-0.1809,0.1187, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.4 1.7,1.8,2.0,2.2,2.3 2.3,2.4,2.4,2.5), mean=1.99, stddev=0.285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.38 0.41,0.45,0.53,0.58,0.59 0.60,0.60,0.60,0.60), mean=0.517, stddev=0.0677], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.006,0.006,0.007), mean=0.00172, stddev=0.00102], oderiv-count=1.19054e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.4 1.6,1.8,2.0,2.3,2.3 2.4,2.4,2.4,2.5), mean=2, stddev=0.305], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,2.0,2.3 2.5,2.8,3.2,3.6,4.0 4.1,4.2,4.2,4.3), mean=3.19, stddev=0.557]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.391534, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1153, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.84, stddev=0.0101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.71,0.73,0.75 0.78,0.83,0.92,1.0,1.0 1.1,1.1,1.1,1.3), mean=0.917, stddev=0.101], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1144, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.97,0.98,1.1 1.1,1.2,1.3,1.4,1.5 1.5,1.6,1.6,1.7), mean=1.29, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.29, stddev=0.0964], bias-{mean,stddev}=-0.1682,0.0768, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.19e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.5,1.5,1.7 1.8,1.9,2.1,2.3,2.4 2.5,2.5,2.6,2.7), mean=2.08, stddev=0.243], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.44 0.45,0.47,0.52,0.55,0.57 0.58,0.58,0.58,0.61), mean=0.513, stddev=0.0449], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.002 0.002,0.003,0.005,0.006), mean=0.00122, stddev=0.00075], oderiv-count=1.10147e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.6 1.7,1.9,2.1,2.3,2.4 2.5,2.5,2.6,2.8), mean=2.08, stddev=0.266], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,2.1,2.5 2.7,3.0,3.3,3.7,3.9 4.1,4.2,4.3,4.5), mean=3.31, stddev=0.495]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.391534, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1078, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.72, stddev=0.0032], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.68,0.71,0.73 0.76,0.80,0.86,0.92,0.95 0.98,1.0,1.1,1.2), mean=0.859, stddev=0.0784], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.70,0.87,1.1 1.1,1.2,1.3,1.4,1.5 1.5,1.6,1.6,1.7), mean=1.29, stddev=0.157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.1,1.2,1.3,1.4,1.4 1.5,1.5,1.6,1.6), mean=1.29, stddev=0.106], bias-{mean,stddev}=-0.1841,0.1004, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.62e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.88,1.6,1.8 1.9,2.0,2.3,2.5,2.6 2.7,2.8,2.8,3.1), mean=2.25, stddev=0.325], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.42,0.43 0.45,0.47,0.51,0.54,0.56 0.56,0.58,0.58,0.60), mean=0.505, stddev=0.0427], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0006,0.0007,0.0008,0.0009,0.001 0.001,0.003,0.003,0.006), mean=0.000951, stddev=0.000732], oderiv-count=1.0208e+07
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.87,1.6,1.7 1.9,2.0,2.2,2.5,2.7 2.7,2.8,2.8,3.2), mean=2.23, stddev=0.331], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,2.3,2.9 3.0,3.1,3.6,4.0,4.3 4.6,4.8,5.0,5.3), mean=3.61, stddev=0.601]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.391534, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1021, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.00234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.68,0.69 0.71,0.75,0.81,0.88,0.91 0.94,0.97,0.99,1.0), mean=0.814, stddev=0.0756], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1044, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.84,1.0 1.0,1.1,1.2,1.3,1.3 1.3,1.4,1.5,1.5), mean=1.17, stddev=0.134], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.96,1.0 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.18, stddev=0.112], bias-{mean,stddev}=-0.1566,0.07054, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.84,1.6,1.8 1.9,2.0,2.2,2.5,2.6 2.7,2.8,2.9,3.1), mean=2.23, stddev=0.328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.43 0.46,0.48,0.52,0.55,0.56 0.57,0.58,0.58,0.59), mean=0.513, stddev=0.0399], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.002,0.005), mean=0.000892, stddev=0.000509], oderiv-count=8.86829e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.87,1.6,1.8 1.9,2.0,2.2,2.5,2.6 2.8,2.9,3.0,3.0), mean=2.23, stddev=0.337], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,2.4,2.8 2.9,3.1,3.4,3.8,4.1 4.7,4.9,5.2,5.5), mean=3.46, stddev=0.617]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.391534, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09635, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.54, stddev=0.00195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.61,0.62,0.64 0.66,0.70,0.76,0.83,0.86 0.89,0.92,0.96,1.0), mean=0.767, stddev=0.079], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09401, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.67,0.79,0.87 0.93,0.99,1.1,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.06, stddev=0.118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.84,0.85,0.89 0.92,0.98,1.1,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.06, stddev=0.103], bias-{mean,stddev}=-0.1475,0.06703, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.16e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,1.1,1.2,1.5 1.7,1.8,1.9,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.92, stddev=0.252], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.40,0.44 0.45,0.47,0.50,0.53,0.54 0.55,0.57,0.58,0.58), mean=0.497, stddev=0.0388], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0009,0.0009,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.000988, stddev=0.000281], oderiv-count=8.10125e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,1.1,1.2,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.92, stddev=0.261], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,2.0,2.1,2.5 2.5,2.7,2.9,3.3,3.7 3.8,3.9,3.9,4.2), mean=2.98, stddev=0.443]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.391534, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09844, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.58, stddev=0.00426], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.61,0.64 0.68,0.71,0.78,0.85,0.88 0.93,0.97,0.97,1.0), mean=0.783, stddev=0.0841], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09358, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.66,0.69,0.87 0.91,0.96,1.1,1.1,1.2 1.2,1.3,1.3,1.5), mean=1.05, stddev=0.124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.82,0.83,0.90 0.92,0.96,1.1,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.05, stddev=0.105], bias-{mean,stddev}=-0.1312,0.06899, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.79e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,1.1,1.2,1.4 1.6,1.8,1.9,2.1,2.2 2.3,2.4,2.4,2.7), mean=1.91, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.37,0.41 0.43,0.46,0.49,0.51,0.53 0.55,0.56,0.56,0.58), mean=0.484, stddev=0.0417], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.00102, stddev=0.000225], oderiv-count=7.11437e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,1.1,1.2,1.4 1.6,1.7,1.9,2.1,2.2 2.2,2.3,2.4,2.8), mean=1.89, stddev=0.272], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,2.0,2.1,2.4 2.6,2.7,2.9,3.3,3.5 3.7,3.8,3.8,4.3), mean=3, stddev=0.404]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.391534, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1019, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.00453], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.61,0.63,0.67 0.70,0.73,0.81,0.88,0.93 0.96,1.0,1.0,1.1), mean=0.81, stddev=0.0911], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09515, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.66,0.77 0.87,0.97,1.1,1.2,1.3 1.3,1.3,1.3,1.3), mean=1.07, stddev=0.145], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.83,0.85,0.89 0.93,0.98,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.07, stddev=0.107], bias-{mean,stddev}=-0.1079,0.07991, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.85e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.0,1.1,1.4 1.6,1.8,1.9,2.1,2.4 2.7,2.7,2.8,3.0), mean=1.97, stddev=0.347], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.35,0.39 0.42,0.44,0.47,0.49,0.51 0.52,0.53,0.53,0.55), mean=0.462, stddev=0.0407], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00102, stddev=0.000172], oderiv-count=5.75846e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.1,1.4 1.5,1.7,1.9,2.1,2.3 2.5,2.8,2.8,3.0), mean=1.94, stddev=0.342], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.5,2.5,2.6 2.8,2.9,3.1,3.5,3.9 4.2,4.4,4.5,4.8), mean=3.22, stddev=0.463]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.391534, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1034, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0.00668], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.63,0.65 0.69,0.74,0.82,0.91,0.94 0.99,1.0,1.1,1.1), mean=0.821, stddev=0.101], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09601, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.64,0.75 0.83,0.92,1.1,1.2,1.3 1.3,1.3,1.4,1.4), mean=1.07, stddev=0.174], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.83,0.84,0.89 0.93,0.98,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.08, stddev=0.116], bias-{mean,stddev}=-0.08761,0.06655, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.2,1.2,1.4 1.5,1.7,2.0,2.2,2.4 2.5,2.6,2.6,2.7), mean=1.96, stddev=0.328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.29,0.39 0.41,0.44,0.46,0.48,0.49 0.50,0.51,0.51,0.52), mean=0.45, stddev=0.0412], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00116, stddev=0.000152], oderiv-count=4.85568e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.4 1.5,1.7,2.0,2.2,2.3 2.5,2.7,2.7,2.9), mean=1.96, stddev=0.341], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.6,2.7,2.8 2.8,3.0,3.3,3.7,4.0 4.1,4.5,4.5,5.2), mean=3.38, stddev=0.465]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.391534, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.108, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.73, stddev=0.00635], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.63,0.68 0.71,0.75,0.84,0.95,1.0 1.1,1.1,1.1,1.2), mean=0.855, stddev=0.123], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09833, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.53,0.60,0.74 0.79,0.95,1.1,1.3,1.3 1.4,1.4,1.5,1.5), mean=1.09, stddev=0.201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.87,0.89,0.94 0.96,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.11, stddev=0.123], bias-{mean,stddev}=-0.07517,0.05398, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.75e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.3,1.4 1.5,1.7,1.9,2.1,2.2 2.4,2.5,2.5,2.6), mean=1.92, stddev=0.298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.32,0.35 0.38,0.40,0.44,0.47,0.48 0.48,0.49,0.49,0.50), mean=0.43, stddev=0.0455], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00137, stddev=0.000188], oderiv-count=3.91706e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.3,1.5 1.5,1.7,1.9,2.2,2.3 2.4,2.6,2.6,2.7), mean=1.93, stddev=0.316], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.8,2.8,2.9 3.0,3.2,3.7,4.1,4.5 4.9,5.2,5.5,5.9), mean=3.73, stddev=0.609]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.391534, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1041, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.67, stddev=0.00258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.63,0.64 0.67,0.71,0.82,0.93,0.98 1.0,1.1,1.1,1.1), mean=0.824, stddev=0.123], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0959, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.56,0.59,0.69 0.79,0.88,1.0,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.06, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.84,0.89,0.90 0.93,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.08, stddev=0.104], bias-{mean,stddev}=-0.09189,0.05729, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.84e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.97,1.1,1.2 1.3,1.5,1.6,1.8,1.9 2.0,2.2,2.2,2.4), mean=1.64, stddev=0.252], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.26,0.29 0.34,0.37,0.41,0.44,0.45 0.47,0.49,0.49,0.51), mean=0.402, stddev=0.0523], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00191, stddev=0.000245], oderiv-count=2.86675e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.96,1.1,1.2 1.3,1.4,1.7,1.9,2.0 2.1,2.2,2.2,2.4), mean=1.65, stddev=0.268], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.7,2.8 2.9,3.1,3.8,4.3,4.8 4.9,5.3,5.3,5.7), mean=3.81, stddev=0.68]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.391534, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1018, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.00426], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.60,0.63 0.67,0.70,0.79,0.91,0.97 1.0,1.1,1.1,1.1), mean=0.805, stddev=0.119], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09433, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.57,0.64 0.69,0.80,1.0,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.04, stddev=0.252], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.83,0.84,0.89 0.92,0.95,1.0,1.1,1.2 1.3,1.3,1.4,1.6), mean=1.06, stddev=0.127], bias-{mean,stddev}=-0.101,0.07921, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.81,0.87,0.93 1.0,1.2,1.4,1.6,1.7 1.8,2.0,2.0,2.2), mean=1.4, stddev=0.267], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.23,0.28,0.38,0.42,0.45 0.47,0.49,0.50,0.53), mean=0.357, stddev=0.0842], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003,0.003 0.004,0.004,0.004,0.004), mean=0.0029, stddev=0.000435], oderiv-count=1.8311e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.83,0.92 1.0,1.2,1.4,1.6,1.7 1.7,2.0,2.0,2.3), mean=1.4, stddev=0.272], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.7,2.7,2.8 2.9,3.3,3.8,4.6,5.0 5.3,5.5,5.6,6.0), mean=3.94, stddev=0.755]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.391534, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.7, stddev=0.00169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.62,0.64,0.67 0.70,0.74,0.83,0.95,0.99 1.0,1.1,1.1,1.2), mean=0.841, stddev=0.114], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09653, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.57,0.57,0.63 0.69,0.82,1.0,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.06, stddev=0.266], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.86,0.88,0.92 0.94,0.99,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.09, stddev=0.107], bias-{mean,stddev}=-0.1182,0.1044, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.35e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.87,0.93 0.98,1.1,1.3,1.6,1.6 1.7,1.8,1.8,2.0), mean=1.35, stddev=0.25], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.16 0.17,0.22,0.34,0.43,0.45 0.48,0.50,0.51,0.53), mean=0.332, stddev=0.103], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.006,0.006,0.007 0.008,0.009,0.009,0.01), mean=0.00575, stddev=0.001], oderiv-count=628864
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.84,0.87,0.90 0.97,1.1,1.3,1.6,1.7 1.7,1.8,1.8,2.0), mean=1.34, stddev=0.26], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.9,3.2,3.2,3.4 3.7,3.9,4.6,5.4,5.6 5.9,6.1,6.2,6.9), mean=4.64, stddev=0.791]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.391534, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.005, max-change=0.75, params-rms=0.129, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.46, stddev=0.00669], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.80,0.83,0.85 0.89,0.94,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.03, stddev=0.102], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.6,1.7,1.8,1.9 1.9,1.9,2.0,2.1), mean=1.7, stddev=0.135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.2 2.2,2.3,2.4,2.5,2.6 2.7,2.7,2.7,2.8), mean=2.41, stddev=0.161], bias-{mean,stddev}=-0.05436,0.1271, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.0 2.1,2.2,2.4,2.7,2.9 3.0,3.1,3.1,3.1), mean=2.45, stddev=0.291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.35 0.35,0.37,0.40,0.42,0.43 0.44,0.46,0.46,0.47), mean=0.396, stddev=0.0279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.008 0.008,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00988, stddev=0.00127], oderiv-count=585344
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.0 2.1,2.2,2.4,2.7,2.9 3.0,3.1,3.1,3.2), mean=2.45, stddev=0.314], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.4,5.2,5.5,6.0 6.2,6.5,7.3,8.0,8.5 9.0,9.9,9.9,13), mean=7.36, stddev=1.08]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, params-rms=0.2956, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.3,3.3 3.3,3.3,3.3,3.4,3.4 3.4,3.4,3.4,3.4), mean=3.34, stddev=0.00879], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.7,1.8,2.0 2.1,2.1,2.3,2.6,2.7 2.7,2.8,2.8,2.9), mean=2.35, stddev=0.246], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-4e-08 -3e-08,-3e-08,-6e-09,2e-08,3e-08 4e-08,5e-08,5e-08,7e-08), mean=-1.76e-09, stddev=2.55e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.6,3.6,3.7,3.7 3.8,3.9,4.1,4.2,4.4 4.5,4.5,4.7,5.1), mean=4.08, stddev=0.268]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00551024, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2307, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.15,0.24,0.52 0.83,1.2,1.9,2.3,2.4 2.5,2.6,2.8,3.4), mean=1.74, stddev=0.614], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,13,13 14,14,14,15,16 17,17,17,17), mean=14.6, stddev=1.01], bias-{mean,stddev}=0.001191,0.3151, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1556, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.85,0.89,1.1 1.1,1.2,1.3,1.3,1.3 1.4,1.4,1.4,1.6), mean=1.24, stddev=0.105], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.8,1.9,1.9 1.9,1.9,2.0,2.2), mean=1.76, stddev=0.118], bias-{mean,stddev}=-0.0902,0.2184, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.26e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.83,0.83,0.89 0.94,1.0,1.2,1.5,1.6 1.8,1.9,1.9,2.1), mean=1.25, stddev=0.273], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.37,0.39 0.42,0.44,0.48,0.54,0.56 0.60,0.61,0.65,0.69), mean=0.487, stddev=0.0616], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.004,0.005,0.005,0.005 0.006,0.006,0.007,0.01), mean=0.00489, stddev=0.000739], oderiv-count=613632
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.77,0.82,0.88 0.90,0.97,1.2,1.5,1.6 1.8,1.8,1.9,2.0), mean=1.23, stddev=0.279], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.5 1.5,1.6,1.8,2.0,2.2 2.2,2.4,2.4,3.5), mean=1.85, stddev=0.28]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00551024, l2-regularize=0.0005, max-change=0.75, params-rms=0.1528, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.73, stddev=0.00162], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.98,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.22, stddev=0.116], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-4e-08 -3e-08,-2e-08,-6e-09,1e-08,2e-08 3e-08,4e-08,5e-08,6e-08), mean=-3.38e-09, stddev=2.16e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.7 1.7,1.7,1.8,1.9,2.0 2.0,2.0,2.1,2.2), mean=1.82, stddev=0.124]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0275512, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1852, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.07,0.25 0.64,0.93,1.4,1.9,2.0 2.2,2.3,2.4,3.4), mean=1.38, stddev=0.552], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,12,12,12,12 12,12,12,12), mean=11.8, stddev=0.223], bias-{mean,stddev}=-5.311e-10,0.2446, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000771, stddev=0.0012], oderiv-count=628864
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/137.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/138.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.88694 tdnnf2.linear:5.2263 tdnnf2.affine:5.93811 tdnnf3.linear:4.49198 tdnnf3.affine:5.14529 tdnnf4.linear:4.19964 tdnnf4.affine:5.18421 tdnnf5.linear:3.984 tdnnf5.affine:4.72846 tdnnf6.linear:3.64569 tdnnf6.affine:4.11947 tdnnf7.linear:3.54247 tdnnf7.affine:3.99155 tdnnf8.linear:3.355 tdnnf8.affine:3.83302 tdnnf9.linear:3.4384 tdnnf9.affine:3.97572 tdnnf10.linear:3.56094 tdnnf10.affine:4.14363 tdnnf11.linear:3.6205 tdnnf11.affine:4.36865 tdnnf12.linear:3.74164 tdnnf12.affine:4.51458 tdnnf13.linear:4.13188 tdnnf13.affine:5.0303 prefinal-l:3.48724 prefinal-chain.affine:5.51144 prefinal-chain.linear:5.02335 output.affine:15.6604 prefinal-xent.affine:2.92435 prefinal-xent.linear:1.86125 output-xent.affine:13.3838 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.3514 tdnnf2.linear:17.0073 tdnnf2.affine:17.0455 tdnnf3.linear:14.7524 tdnnf3.affine:14.7901 tdnnf4.linear:13.7981 tdnnf4.affine:14.8465 tdnnf5.linear:13.0748 tdnnf5.affine:13.4993 tdnnf6.linear:12.3322 tdnnf6.affine:12.1724 tdnnf7.linear:12.6004 tdnnf7.affine:12.0949 tdnnf8.linear:13.0411 tdnnf8.affine:12.2738 tdnnf9.linear:13.2403 tdnnf9.affine:12.3524 tdnnf10.linear:13.8228 tdnnf10.affine:12.6293 tdnnf11.linear:13.3283 tdnnf11.affine:12.336 tdnnf12.linear:13.027 tdnnf12.affine:12.1612 tdnnf13.linear:13.5723 tdnnf13.affine:12.4842 prefinal-l:11.6774 prefinal-chain.affine:19.3814 prefinal-chain.linear:26.7566 output.affine:119.021 prefinal-xent.affine:14.3342 prefinal-xent.linear:13.8282 output-xent.affine:95.455 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.350879 tdnnf2.linear:0.305366 tdnnf2.affine:0.347226 tdnnf3.linear:0.302989 tdnnf3.affine:0.346219 tdnnf4.linear:0.305629 tdnnf4.affine:0.350693 tdnnf5.linear:0.304911 tdnnf5.affine:0.351139 tdnnf6.linear:0.294941 tdnnf6.affine:0.337871 tdnnf7.linear:0.280388 tdnnf7.affine:0.330125 tdnnf8.linear:0.256916 tdnnf8.affine:0.312052 tdnnf9.linear:0.259233 tdnnf9.affine:0.321898 tdnnf10.linear:0.257721 tdnnf10.affine:0.328398 tdnnf11.linear:0.271554 tdnnf11.affine:0.354115 tdnnf12.linear:0.286186 tdnnf12.affine:0.370476 tdnnf13.linear:0.305117 tdnnf13.affine:0.402896 prefinal-l:0.299758 prefinal-chain.affine:0.283856 prefinal-chain.linear:0.188177 output.affine:0.131733 prefinal-xent.affine:0.203692 prefinal-xent.linear:0.134629 output-xent.affine:0.140167 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 09:28:49 CST 2020, elapsed time 3 seconds
