# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/105.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/104.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/105.mdl 
# Started at Mon Feb 24 08:41:09 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/105.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1433, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.4 1.4,1.7,2.0,2.3,2.7 3.0,3.3,3.3,3.4), mean=2.07, stddev=0.483], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.58,0.58,0.60 0.74,0.88,1.5,1.9,2.4 2.6,2.8,2.9,3.5), mean=1.5, stddev=0.609], bias-{mean,stddev}=-0.1382,0.2018, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.68e+06, self-repaired-proportion=0.0794938, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.002,0.002,0.005 0.009,0.04,0.10,0.19,0.25 0.30,0.33,0.35,0.38), mean=0.122, stddev=0.0911], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.02,0.05 0.05,0.13,0.33,0.49,0.66 0.71,0.79,0.80,0.82), mean=0.337, stddev=0.21], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.06,0.09 0.11,0.17,0.17,0.20), mean=0.0528, stddev=0.0317], oderiv-count=1.33261e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0007,0.002,0.004 0.009,0.04,0.11,0.18,0.25 0.28,0.34,0.35,0.39), mean=0.12, stddev=0.0908], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.03,0.03 0.05,0.12,0.21,0.29,0.31 0.31,0.33,0.35,0.36), mean=0.199, stddev=0.0895]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.216931, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1392, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.2,2.2,2.2 2.2,2.2,2.2,2.2,2.2 2.2,2.2,2.2,2.2), mean=2.23, stddev=0.00829], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.57,0.60,0.76 0.86,0.97,1.1,1.2,1.3 1.3,1.4,1.5,1.7), mean=1.1, stddev=0.185], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1373, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.2,1.3 1.4,1.4,1.5,1.6,1.8 1.9,1.9,2.0,2.1), mean=1.54, stddev=0.177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.4,1.5,1.6,1.7 1.7,1.8,1.8,1.8), mean=1.55, stddev=0.117], bias-{mean,stddev}=-0.1569,0.09634, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.22e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.4 1.6,1.7,1.9,2.2,2.3 2.4,2.5,2.5,2.8), mean=1.94, stddev=0.293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.39 0.42,0.45,0.53,0.58,0.59 0.59,0.60,0.61,0.61), mean=0.515, stddev=0.0668], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.003,0.006,0.006,0.008), mean=0.00178, stddev=0.001], oderiv-count=1.21384e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.6,1.7,1.9,2.2,2.3 2.3,2.5,2.5,2.7), mean=1.93, stddev=0.293], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.8,2.2 2.4,2.6,3.0,3.4,3.6 3.8,3.8,3.8,3.9), mean=3.02, stddev=0.486]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.216931, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1209, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.93, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.75,0.77,0.80 0.83,0.88,0.95,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.962, stddev=0.101], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1198, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.98,1.0,1.1 1.2,1.2,1.3,1.4,1.6 1.6,1.7,1.8,1.9), mean=1.35, stddev=0.153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.4,1.4,1.5 1.5,1.5,1.5,1.6), mean=1.35, stddev=0.0944], bias-{mean,stddev}=-0.1367,0.057, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.62e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.7 1.7,1.8,2.0,2.2,2.3 2.4,2.5,2.5,2.5), mean=2.03, stddev=0.234], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.42,0.43 0.45,0.48,0.52,0.55,0.57 0.58,0.58,0.59,0.59), mean=0.516, stddev=0.0434], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.0009,0.001,0.001,0.002 0.002,0.003,0.005,0.006), mean=0.00124, stddev=0.000713], oderiv-count=1.08401e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.7 1.8,1.8,2.0,2.3,2.3 2.4,2.5,2.6,2.8), mean=2.04, stddev=0.244], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.0,2.3,2.4 2.7,2.9,3.2,3.6,3.8 3.9,4.4,4.4,4.6), mean=3.26, stddev=0.464]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.216931, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0.00313], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.73,0.74,0.76 0.78,0.82,0.88,0.94,0.97 1.0,1.0,1.0,1.3), mean=0.881, stddev=0.0769], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.74,0.88,1.1 1.1,1.2,1.3,1.4,1.5 1.6,1.6,1.6,1.6), mean=1.3, stddev=0.161], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.5), mean=1.31, stddev=0.0949], bias-{mean,stddev}=-0.1612,0.08193, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.62e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.85,1.6,1.7 1.8,1.9,2.1,2.3,2.5 2.6,2.7,2.7,2.8), mean=2.11, stddev=0.304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.42 0.44,0.46,0.51,0.55,0.56 0.56,0.57,0.57,0.58), mean=0.504, stddev=0.0452], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0007,0.0007 0.0007,0.0008,0.0009,0.001,0.001 0.001,0.003,0.003,0.007), mean=0.00103, stddev=0.000784], oderiv-count=9.9792e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.86,1.6,1.7 1.8,1.9,2.1,2.3,2.5 2.5,2.7,2.7,2.9), mean=2.12, stddev=0.311], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,2.2,2.7 2.9,3.0,3.4,3.8,4.0 4.3,4.8,5.0,5.2), mean=3.42, stddev=0.58]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.216931, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1045, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.67, stddev=0.00254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.68,0.70 0.74,0.77,0.83,0.90,0.93 0.95,0.98,1.0,1.1), mean=0.833, stddev=0.0783], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1087, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.65,0.89,1.1 1.1,1.1,1.2,1.4,1.4 1.4,1.4,1.5,1.5), mean=1.22, stddev=0.142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.99,1.0,1.1 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.23, stddev=0.113], bias-{mean,stddev}=-0.1487,0.07612, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.86,1.2,1.7 1.8,1.9,2.1,2.4,2.5 2.6,2.7,2.7,2.8), mean=2.12, stddev=0.312], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.43 0.45,0.46,0.50,0.53,0.54 0.56,0.57,0.57,0.60), mean=0.498, stddev=0.0404], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0007 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.002,0.006), mean=0.000928, stddev=0.000555], oderiv-count=9.02637e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.87,1.1,1.7 1.8,1.9,2.1,2.3,2.5 2.6,2.7,2.7,2.8), mean=2.11, stddev=0.319], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.5,1.8,2.7 2.9,3.0,3.3,3.8,4.2 4.4,4.8,4.8,5.3), mean=3.41, stddev=0.593]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.216931, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09972, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00409], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.62,0.64,0.66 0.68,0.73,0.79,0.86,0.89 0.92,0.95,0.97,1.0), mean=0.794, stddev=0.0787], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09668, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.82,0.83,0.91 0.94,0.99,1.1,1.2,1.2 1.3,1.3,1.3,1.5), mean=1.09, stddev=0.123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.86,0.91,0.92 0.99,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.09, stddev=0.0908], bias-{mean,stddev}=-0.1326,0.05641, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.24e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,1.1,1.3,1.4 1.6,1.7,1.8,2.0,2.1 2.2,2.3,2.4,2.5), mean=1.85, stddev=0.248], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.41,0.42,0.43 0.44,0.46,0.49,0.53,0.54 0.55,0.56,0.57,0.58), mean=0.493, stddev=0.0386], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.00106, stddev=0.000256], oderiv-count=8.00314e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,1.1,1.3,1.4 1.6,1.7,1.8,2.0,2.1 2.2,2.4,2.4,2.5), mean=1.84, stddev=0.255], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.8,2.2,2.4 2.5,2.6,2.9,3.2,3.5 3.6,3.8,3.9,4.4), mean=2.91, stddev=0.423]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.216931, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1016, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.00195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.69 0.70,0.73,0.80,0.88,0.91 0.94,0.96,1.0,1.0), mean=0.809, stddev=0.0796], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09559, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.71,0.78,0.82 0.90,0.96,1.1,1.2,1.2 1.3,1.3,1.4,1.4), mean=1.07, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.89,0.91 0.94,0.97,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.08, stddev=0.104], bias-{mean,stddev}=-0.1217,0.05336, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.39e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.4 1.5,1.7,1.8,2.0,2.2 2.3,2.4,2.4,2.5), mean=1.84, stddev=0.265], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.41 0.44,0.45,0.48,0.51,0.52 0.54,0.55,0.55,0.56), mean=0.48, stddev=0.0389], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.00104, stddev=0.000167], oderiv-count=6.75987e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.3 1.6,1.7,1.8,2.0,2.1 2.3,2.4,2.4,2.5), mean=1.84, stddev=0.252], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.1,2.2,2.4 2.5,2.6,2.9,3.3,3.5 3.7,4.2,4.2,4.3), mean=2.95, stddev=0.441]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.216931, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1057, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.00224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.61,0.67,0.70 0.73,0.77,0.84,0.91,0.94 1.0,1.0,1.1,1.1), mean=0.841, stddev=0.0893], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09745, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.66,0.68,0.81 0.90,0.99,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.09, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.86,0.87,0.92 0.94,1.0,1.1,1.2,1.2 1.3,1.4,1.4,1.4), mean=1.1, stddev=0.117], bias-{mean,stddev}=-0.1016,0.05828, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.89e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.4 1.5,1.7,1.8,2.1,2.3 2.5,2.7,2.7,2.9), mean=1.89, stddev=0.318], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.37,0.39 0.41,0.43,0.46,0.49,0.50 0.51,0.52,0.53,0.55), mean=0.455, stddev=0.0411], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00105, stddev=0.000151], oderiv-count=5.92538e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.4 1.6,1.7,1.8,2.1,2.3 2.5,2.7,2.7,2.8), mean=1.88, stddev=0.314], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.5,2.5,2.5 2.6,2.8,3.1,3.6,3.9 4.3,4.5,4.7,5.0), mean=3.19, stddev=0.544]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.216931, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1064, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.7, stddev=0.00542], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.61,0.64,0.66 0.71,0.76,0.84,0.94,0.97 1.0,1.1,1.1,1.2), mean=0.844, stddev=0.106], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09849, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.61,0.74 0.82,0.95,1.1,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.1, stddev=0.189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.80,0.86,0.93 0.95,0.99,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.11, stddev=0.124], bias-{mean,stddev}=-0.08674,0.05014, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.22e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.0,1.1,1.3 1.5,1.7,1.9,2.1,2.4 2.5,2.6,2.6,2.8), mean=1.92, stddev=0.332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.36 0.39,0.42,0.45,0.48,0.49 0.50,0.51,0.51,0.52), mean=0.446, stddev=0.0465], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00116, stddev=0.000159], oderiv-count=4.94208e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.1,1.2,1.3 1.5,1.7,1.9,2.1,2.3 2.5,2.6,2.6,2.7), mean=1.9, stddev=0.321], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.6,2.6 2.7,2.9,3.2,3.6,4.0 4.2,4.3,4.4,4.9), mean=3.27, stddev=0.472]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.216931, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1107, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0.00694], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.67 0.71,0.76,0.86,0.99,1.1 1.1,1.2,1.2,1.3), mean=0.875, stddev=0.134], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1014, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.60,0.67,0.72 0.79,0.92,1.1,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.13, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.91,0.92 0.96,1.0,1.1,1.2,1.3 1.4,1.4,1.5,1.7), mean=1.14, stddev=0.141], bias-{mean,stddev}=-0.06335,0.04546, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.62e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,1.2,1.3,1.4 1.5,1.7,1.9,2.3,2.4 2.6,2.7,2.7,2.9), mean=1.97, stddev=0.351], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.34 0.37,0.40,0.44,0.46,0.47 0.48,0.49,0.49,0.50), mean=0.427, stddev=0.0471], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00136, stddev=0.000197], oderiv-count=3.97184e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.2,1.3,1.4 1.5,1.7,1.9,2.3,2.4 2.6,2.7,2.7,2.7), mean=1.96, stddev=0.351], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.7,2.8,2.9 3.1,3.2,3.5,4.0,4.3 4.5,4.6,4.9,5.2), mean=3.59, stddev=0.485]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.216931, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1064, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.7, stddev=0.00372], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.62,0.64 0.67,0.72,0.81,0.96,1.0 1.1,1.1,1.2,1.2), mean=0.84, stddev=0.139], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0981, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.55,0.61,0.67 0.73,0.83,1.0,1.3,1.5 1.5,1.6,1.6,1.7), mean=1.08, stddev=0.264], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.84,0.84,0.91 0.96,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.1, stddev=0.111], bias-{mean,stddev}=-0.07934,0.04591, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.97e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.2 1.3,1.4,1.6,1.8,2.0 2.1,2.2,2.3,2.6), mean=1.64, stddev=0.269], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.26,0.28 0.31,0.35,0.40,0.43,0.44 0.45,0.46,0.46,0.50), mean=0.387, stddev=0.0532], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.003), mean=0.00195, stddev=0.000311], oderiv-count=2.83642e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.3,1.4,1.6,1.8,2.0 2.1,2.3,2.4,2.7), mean=1.62, stddev=0.295], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.7,2.8 2.9,3.1,3.4,3.9,4.1 4.4,4.9,5.0,5.1), mean=3.5, stddev=0.526]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.216931, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1022, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.64, stddev=0.00183], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.60,0.63 0.65,0.69,0.79,0.92,1.0 1.1,1.1,1.2,1.2), mean=0.806, stddev=0.137], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09527, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.53,0.54,0.63 0.68,0.76,0.97,1.4,1.5 1.5,1.6,1.6,1.6), mean=1.04, stddev=0.296], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.83,0.87,0.88 0.92,0.95,1.1,1.2,1.2 1.3,1.3,1.3,1.6), mean=1.07, stddev=0.128], bias-{mean,stddev}=-0.08827,0.06412, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.24e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.86,0.89,0.99 1.0,1.1,1.4,1.6,1.7 1.9,2.0,2.1,2.2), mean=1.4, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.20 0.22,0.27,0.34,0.41,0.44 0.46,0.46,0.48,0.57), mean=0.341, stddev=0.0823], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003,0.004 0.004,0.005,0.005,0.005), mean=0.00298, stddev=0.000522], oderiv-count=1.83437e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.91,0.97 1.0,1.1,1.3,1.6,1.7 1.9,2.0,2.1,2.3), mean=1.37, stddev=0.291], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.5,2.6,2.7 2.8,3.0,3.6,4.1,4.4 4.6,5.1,5.2,5.7), mean=3.63, stddev=0.639]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.216931, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00362], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.59,0.59,0.62 0.65,0.69,0.76,0.88,0.96 1.1,1.1,1.1,1.2), mean=0.792, stddev=0.127], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09261, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.56,0.62 0.64,0.71,0.98,1.3,1.5 1.5,1.5,1.6,1.6), mean=1, stddev=0.301], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.83,0.86 0.90,0.96,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.0984], bias-{mean,stddev}=-0.1093,0.08876, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.26e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.80,0.80,0.83 0.87,0.98,1.2,1.5,1.6 1.7,1.8,1.9,2.1), mean=1.24, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.15 0.15,0.17,0.29,0.39,0.44 0.45,0.47,0.48,0.50), mean=0.289, stddev=0.106], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.006,0.007,0.008 0.009,0.01,0.01,0.01), mean=0.0063, stddev=0.00123], oderiv-count=619072
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.70,0.71,0.77 0.83,0.93,1.1,1.5,1.6 1.7,1.9,1.9,1.9), mean=1.2, stddev=0.298], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,3.0,3.0,3.1 3.3,3.4,3.9,4.4,4.6 4.8,4.9,5.0,5.2), mean=3.93, stddev=0.512]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.216931, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.005, max-change=0.75, params-rms=0.126, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.43, stddev=0.000691], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.72,0.76,0.81 0.85,0.91,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1, stddev=0.112], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2176, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.6,1.6,1.7,1.8,1.9 1.9,2.0,2.0,2.0), mean=1.74, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.2,2.2 2.3,2.3,2.4,2.6,2.7 2.7,2.8,2.8,2.9), mean=2.46, stddev=0.156], bias-{mean,stddev}=-0.009408,0.1228, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.34e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 1.9,2.1,2.3,2.5,2.6 2.7,2.8,2.9,3.1), mean=2.27, stddev=0.258], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.35 0.36,0.37,0.40,0.42,0.43 0.44,0.45,0.45,0.47), mean=0.395, stddev=0.0279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0104, stddev=0.00123], oderiv-count=606016
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.9,2.0,2.3,2.4,2.6 2.7,2.8,2.8,3.0), mean=2.24, stddev=0.28], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.4,4.8,4.8,5.1 5.3,5.6,6.0,6.8,7.3 7.6,8.8,8.8,9.2), mean=6.23, stddev=0.875]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, params-rms=0.2786, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.2,3.2,3.2,3.2 3.2,3.2,3.2,3.2,3.2 3.2,3.2,3.2,3.2), mean=3.15, stddev=0.000977], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.7,1.7,1.9 2.0,2.1,2.2,2.4,2.5 2.5,2.6,2.6,2.7), mean=2.22, stddev=0.203], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-3e-08 -3e-08,-2e-08,-3e-09,1e-08,2e-08 4e-08,4e-08,4e-08,6e-08), mean=-1.62e-09, stddev=2.18e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.5,3.5,3.5,3.5 3.6,3.7,3.9,4.0,4.1 4.2,4.3,4.6,5.0), mean=3.88, stddev=0.263]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00701346, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2179, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.15,0.21,0.49 0.75,1.1,1.8,2.1,2.3 2.4,2.5,2.6,3.2), mean=1.64, stddev=0.598], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,13 13,13,14,14,15 15,16,16,16), mean=13.8, stddev=0.929], bias-{mean,stddev}=0.001017,0.2854, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1618, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.80,0.98,1.1 1.2,1.2,1.3,1.4,1.4 1.4,1.5,1.5,1.6), mean=1.29, stddev=0.106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.7,1.8,1.9,1.9 2.0,2.0,2.0,2.1), mean=1.83, stddev=0.109], bias-{mean,stddev}=-0.05643,0.2208, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.92e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.76,0.77,0.78 0.82,0.89,1.1,1.3,1.5 1.6,1.7,1.7,1.9), mean=1.15, stddev=0.26], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.37,0.39 0.40,0.42,0.47,0.53,0.55 0.58,0.60,0.62,0.67), mean=0.478, stddev=0.0602], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.005,0.005,0.006 0.006,0.007,0.007,0.01), mean=0.00513, stddev=0.000884], oderiv-count=598400
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.70,0.72,0.79 0.81,0.93,1.1,1.3,1.5 1.6,1.7,1.9,1.9), mean=1.15, stddev=0.262], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.5,1.8,1.9,2.0 2.1,2.2,2.2,2.2), mean=1.75, stddev=0.224]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00701346, l2-regularize=0.0005, max-change=0.75, params-rms=0.1543, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.75, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.98,0.98,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.23, stddev=0.118], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-2e-08 -2e-08,-1e-08,3e-09,2e-08,4e-08 4e-08,4e-08,4e-08,5e-08), mean=6.42e-09, stddev=2.08e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.7 1.7,1.7,1.8,1.9,2.0 2.0,2.0,2.0,2.1), mean=1.84, stddev=0.106]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0350673, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1898, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.25 0.68,0.98,1.5,1.9,2.1 2.2,2.4,2.5,3.6), mean=1.41, stddev=0.562], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,12,12,12 12,12,12,12), mean=12.1, stddev=0.201], bias-{mean,stddev}=2.809e-08,0.2213, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000775, stddev=0.00121], oderiv-count=591872
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/104.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/105.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.84757 tdnnf2.linear:5.23525 tdnnf2.affine:5.77684 tdnnf3.linear:4.4958 tdnnf3.affine:5.13707 tdnnf4.linear:4.07438 tdnnf4.affine:4.97693 tdnnf5.linear:3.80426 tdnnf5.affine:4.53898 tdnnf6.linear:3.53448 tdnnf6.affine:4.04565 tdnnf7.linear:3.38142 tdnnf7.affine:3.90447 tdnnf8.linear:3.23204 tdnnf8.affine:3.75128 tdnnf9.linear:3.27743 tdnnf9.affine:3.87036 tdnnf10.linear:3.31706 tdnnf10.affine:4.00948 tdnnf11.linear:3.46914 tdnnf11.affine:4.2547 tdnnf12.linear:3.59735 tdnnf12.affine:4.3707 tdnnf13.linear:3.95165 tdnnf13.affine:4.82039 prefinal-l:2.97828 prefinal-chain.affine:5.34147 prefinal-chain.linear:4.46286 output.affine:14.6153 prefinal-xent.affine:3.16242 prefinal-xent.linear:1.97447 output-xent.affine:13.8269 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.2036 tdnnf2.linear:17.8216 tdnnf2.affine:17.6984 tdnnf3.linear:15.4781 tdnnf3.affine:15.431 tdnnf4.linear:14.1564 tdnnf4.affine:14.9887 tdnnf5.linear:13.3793 tdnnf5.affine:14.0472 tdnnf6.linear:12.7641 tdnnf6.affine:12.4816 tdnnf7.linear:13.0102 tdnnf7.affine:12.327 tdnnf8.linear:13.5242 tdnnf8.affine:12.5442 tdnnf9.linear:13.6172 tdnnf9.affine:12.6575 tdnnf10.linear:14.1667 tdnnf10.affine:13.0137 tdnnf11.linear:13.6242 tdnnf11.affine:12.5996 tdnnf12.linear:13.0836 tdnnf12.affine:12.2574 tdnnf13.linear:12.8302 tdnnf13.affine:11.9607 prefinal-l:11.4011 prefinal-chain.affine:19.7464 prefinal-chain.linear:25.2164 output.affine:112.281 prefinal-xent.affine:14.8674 prefinal-xent.linear:13.9636 output-xent.affine:97.5264 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.323774 tdnnf2.linear:0.290984 tdnnf2.affine:0.323549 tdnnf3.linear:0.288339 tdnnf3.affine:0.330905 tdnnf4.linear:0.286465 tdnnf4.affine:0.329862 tdnnf5.linear:0.281904 tdnnf5.affine:0.318079 tdnnf6.linear:0.275649 tdnnf6.affine:0.322605 tdnnf7.linear:0.258591 tdnnf7.affine:0.315385 tdnnf8.linear:0.239085 tdnnf8.affine:0.299372 tdnnf9.linear:0.240555 tdnnf9.affine:0.305649 tdnnf10.linear:0.234359 tdnnf10.affine:0.308294 tdnnf11.linear:0.254355 tdnnf11.affine:0.337783 tdnnf12.linear:0.274598 tdnnf12.affine:0.356768 tdnnf13.linear:0.30826 tdnnf13.affine:0.402053 prefinal-l:0.262899 prefinal-chain.affine:0.270642 prefinal-chain.linear:0.177725 output.affine:0.130412 prefinal-xent.affine:0.212928 prefinal-xent.linear:0.141488 output-xent.affine:0.141654 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 08:41:12 CST 2020, elapsed time 3 seconds
