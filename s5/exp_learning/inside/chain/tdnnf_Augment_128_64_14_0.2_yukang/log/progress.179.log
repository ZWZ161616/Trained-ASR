# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/179.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/178.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/179.mdl 
# Started at Mon Feb 24 10:30:06 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/179.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1539, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.4,1.4,1.6 1.7,1.8,2.1,2.6,3.1 3.3,3.4,3.4,3.6), mean=2.22, stddev=0.512], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.63,0.64,0.71 0.79,0.91,1.6,2.1,2.5 2.8,3.0,3.2,3.7), mean=1.61, stddev=0.659], bias-{mean,stddev}=-0.1529,0.2188, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=9.05e+06, self-repaired-proportion=0.02073, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.008,0.02 0.03,0.05,0.10,0.20,0.25 0.30,0.37,0.38,0.41), mean=0.128, stddev=0.0916], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.05,0.08 0.10,0.18,0.30,0.52,0.64 0.75,0.78,0.78,0.82), mean=0.34, stddev=0.196], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.05,0.06 0.07,0.08,0.09,0.17), mean=0.0411, stddev=0.0207], oderiv-count=1.27976e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.004,0.005,0.02 0.03,0.05,0.11,0.20,0.24 0.31,0.37,0.38,0.44), mean=0.128, stddev=0.0925], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.04,0.10 0.11,0.15,0.22,0.29,0.31 0.33,0.34,0.35,0.37), mean=0.217, stddev=0.0792]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1264, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=2.02, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.75,0.79,0.82 0.86,0.91,1.0,1.1,1.1 1.2,1.3,1.3,1.4), mean=1, stddev=0.115], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1231, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.1,1.1,1.1 1.2,1.3,1.4,1.5,1.6 1.7,1.8,1.8,1.8), mean=1.38, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.4,1.5,1.5 1.6,1.6,1.6,1.8), mean=1.39, stddev=0.115], bias-{mean,stddev}=-0.1773,0.1082, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.33e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.4 1.5,1.6,1.9,2.1,2.2 2.2,2.3,2.4,2.5), mean=1.84, stddev=0.267], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.37,0.39 0.41,0.46,0.54,0.58,0.59 0.60,0.60,0.61,0.61), mean=0.521, stddev=0.0648], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.005,0.006,0.006), mean=0.00168, stddev=0.000894], oderiv-count=1.16088e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.4 1.5,1.6,1.9,2.0,2.2 2.3,2.4,2.4,2.5), mean=1.84, stddev=0.276], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.0,2.0,2.1 2.3,2.5,2.9,3.2,3.4 3.7,4.0,4.1,4.3), mean=2.9, stddev=0.486]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1094, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.75, stddev=0.00397], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.70,0.73 0.77,0.79,0.86,0.95,0.98 1.0,1.1,1.1,1.2), mean=0.87, stddev=0.0923], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.83,0.86,1.0 1.1,1.1,1.2,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.24, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.24, stddev=0.0955], bias-{mean,stddev}=-0.1753,0.09297, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.6e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.4,1.5,1.6 1.7,1.8,2.0,2.2,2.4 2.4,2.5,2.5,2.6), mean=2.02, stddev=0.268], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.42 0.45,0.47,0.52,0.56,0.57 0.58,0.58,0.58,0.59), mean=0.513, stddev=0.0478], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.002 0.002,0.004,0.004,0.004), mean=0.00117, stddev=0.000716], oderiv-count=1.11892e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,1.3,1.5,1.5 1.7,1.8,2.0,2.3,2.3 2.4,2.5,2.5,2.6), mean=2.02, stddev=0.268], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.8,2.1,2.4 2.6,2.8,3.2,3.6,3.8 4.1,4.3,4.4,4.5), mean=3.22, stddev=0.537]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1061, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.7, stddev=0.00539], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.67,0.70,0.72 0.73,0.77,0.84,0.91,0.95 0.98,1.0,1.1,1.2), mean=0.845, stddev=0.0833], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1077, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.73,0.82,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.21, stddev=0.138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.98,0.99,1.0 1.1,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.9), mean=1.21, stddev=0.153], bias-{mean,stddev}=-0.1771,0.1044, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.49e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.97,1.1,1.8 1.9,2.0,2.2,2.5,2.7 2.8,2.9,2.9,3.3), mean=2.26, stddev=0.362], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.42,0.43 0.44,0.46,0.50,0.55,0.56 0.57,0.57,0.58,0.59), mean=0.505, stddev=0.045], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.0006,0.0006,0.0007,0.0008,0.001 0.002,0.002,0.004,0.005), mean=0.000874, stddev=0.000634], oderiv-count=1.0208e+07
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,1.0,1.1,1.8 1.9,2.0,2.3,2.5,2.7 2.8,2.9,2.9,3.3), mean=2.28, stddev=0.362], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.5,1.7,2.6 2.9,3.1,3.6,4.2,4.6 4.9,5.1,5.1,5.4), mean=3.65, stddev=0.727]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09826, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.57, stddev=0.00272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.60,0.64,0.65 0.68,0.72,0.78,0.84,0.88 0.92,0.95,0.97,1.0), mean=0.782, stddev=0.0783], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09865, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.66,0.92 0.98,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.11, stddev=0.128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.92,0.94 0.96,1.0,1.1,1.2,1.2 1.3,1.3,1.4,1.4), mean=1.11, stddev=0.106], bias-{mean,stddev}=-0.1479,0.07577, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.13e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.86,0.86,1.7 1.8,1.9,2.1,2.4,2.6 2.6,2.7,2.8,2.9), mean=2.15, stddev=0.344], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.44 0.46,0.48,0.51,0.55,0.56 0.57,0.58,0.59,0.60), mean=0.513, stddev=0.0409], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0006 0.0006,0.0007,0.0008,0.0009,0.0009 0.001,0.002,0.003,0.004), mean=0.000842, stddev=0.000455], oderiv-count=8.96314e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.88,0.91,1.6 1.8,1.9,2.2,2.4,2.5 2.7,2.8,2.8,2.9), mean=2.16, stddev=0.353], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,2.6 2.9,3.0,3.3,3.8,4.0 4.2,4.5,4.6,5.1), mean=3.35, stddev=0.566]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09274, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.48, stddev=0.00169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.56,0.62 0.65,0.69,0.73,0.80,0.83 0.86,0.88,0.91,0.96), mean=0.738, stddev=0.0725], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08892, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.62,0.70,0.80 0.88,0.92,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1, stddev=0.113], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.83,0.84,0.87 0.88,0.91,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1, stddev=0.0979], bias-{mean,stddev}=-0.1432,0.06413, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.34e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.1,1.2,1.3 1.6,1.7,1.8,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.85, stddev=0.269], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.40,0.43 0.45,0.47,0.50,0.53,0.54 0.55,0.56,0.57,0.63), mean=0.497, stddev=0.0408], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.000938, stddev=0.000223], oderiv-count=7.90502e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.2,1.4 1.6,1.7,1.9,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.87, stddev=0.27], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,2.1,2.3 2.4,2.5,2.8,3.2,3.4 3.6,3.8,3.9,4.0), mean=2.87, stddev=0.41]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09393, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.5, stddev=0.00162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.61,0.62 0.65,0.68,0.74,0.81,0.85 0.87,0.91,0.93,0.94), mean=0.748, stddev=0.0749], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08929, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.68,0.79 0.87,0.90,1.0,1.1,1.1 1.2,1.2,1.2,1.4), mean=1, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.82,0.83,0.86 0.88,0.93,0.98,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.01, stddev=0.1], bias-{mean,stddev}=-0.1292,0.06551, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.44e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.91,1.1,1.4 1.5,1.7,1.8,2.0,2.2 2.3,2.4,2.4,2.6), mean=1.84, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.37,0.41 0.44,0.45,0.48,0.51,0.52 0.53,0.55,0.56,0.59), mean=0.48, stddev=0.0398], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.000952, stddev=0.000195], oderiv-count=7.06547e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.96,1.2,1.4 1.6,1.7,1.8,2.0,2.1 2.2,2.4,2.4,2.7), mean=1.84, stddev=0.277], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,2.0,2.2,2.4 2.5,2.7,2.9,3.2,3.4 3.7,3.7,3.9,4.4), mean=2.93, stddev=0.402]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09731, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.56, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.61 0.66,0.70,0.78,0.84,0.88 0.92,0.95,0.96,0.99), mean=0.774, stddev=0.0844], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09039, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.63,0.76 0.85,0.91,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.01, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.83,0.86 0.89,0.94,1.0,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.02, stddev=0.107], bias-{mean,stddev}=-0.09888,0.07885, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.84e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.87,0.92,1.3 1.6,1.7,1.9,2.1,2.3 2.5,2.6,2.7,2.9), mean=1.89, stddev=0.345], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.40 0.41,0.43,0.47,0.49,0.50 0.50,0.52,0.53,0.64), mean=0.461, stddev=0.0446], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0009,0.0009,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.000968, stddev=0.000154], oderiv-count=6.04013e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.87,1.4 1.5,1.7,1.9,2.1,2.4 2.6,2.7,2.8,2.8), mean=1.88, stddev=0.358], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.2,2.2,2.5 2.6,2.8,3.1,3.5,3.7 4.1,4.3,4.3,4.6), mean=3.15, stddev=0.469]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.58,0.62,0.65 0.67,0.72,0.79,0.88,0.94 0.97,1.0,1.0,1.1), mean=0.802, stddev=0.1], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.60,0.62,0.70 0.81,0.91,1.0,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.03, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.82,0.84,0.86 0.89,0.95,1.0,1.1,1.2 1.2,1.2,1.3,1.4), mean=1.04, stddev=0.113], bias-{mean,stddev}=-0.08117,0.06496, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.24e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.99,1.4 1.5,1.7,1.9,2.1,2.4 2.4,2.6,2.7,2.8), mean=1.92, stddev=0.347], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.29,0.38 0.40,0.43,0.46,0.48,0.49 0.49,0.51,0.51,0.52), mean=0.449, stddev=0.0415], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.00108, stddev=0.000157], oderiv-count=4.77792e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.91,1.0,1.3 1.5,1.6,1.9,2.2,2.3 2.4,2.5,2.5,2.7), mean=1.89, stddev=0.348], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.4,2.5,2.7 2.8,2.9,3.3,3.7,4.0 4.1,4.5,4.7,5.0), mean=3.34, stddev=0.489]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1025, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.64, stddev=0.00267], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.61,0.63,0.66 0.69,0.72,0.80,0.90,0.96 1.0,1.1,1.1,1.1), mean=0.814, stddev=0.105], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09343, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.66,0.78 0.85,0.90,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.05, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.75,0.82,0.86 0.92,0.95,1.0,1.1,1.2 1.3,1.3,1.4,1.4), mean=1.05, stddev=0.122], bias-{mean,stddev}=-0.07833,0.05123, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.61e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.93,1.3,1.4 1.5,1.6,1.8,2.0,2.0 2.2,2.2,2.3,2.3), mean=1.8, stddev=0.239], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.32,0.36 0.39,0.41,0.44,0.46,0.47 0.48,0.50,0.50,0.51), mean=0.433, stddev=0.042], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00134, stddev=0.000172], oderiv-count=3.91706e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.89,1.3,1.4 1.5,1.6,1.8,2.0,2.1 2.2,2.2,2.2,2.4), mean=1.81, stddev=0.255], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.7,2.7,2.8 2.9,3.1,3.5,3.9,4.2 4.6,4.8,4.9,5.7), mean=3.54, stddev=0.565]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1006, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.61, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.61,0.63 0.65,0.69,0.78,0.89,0.97 1.0,1.0,1.1,1.1), mean=0.797, stddev=0.115], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09222, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.47,0.63,0.71 0.75,0.85,1.0,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.02, stddev=0.201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.81,0.83,0.88 0.91,0.95,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.103], bias-{mean,stddev}=-0.08765,0.06, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.97e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.85,1.0,1.2 1.3,1.4,1.6,1.7,1.8 1.9,1.9,1.9,2.4), mean=1.57, stddev=0.212], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.30 0.33,0.37,0.41,0.45,0.46 0.48,0.48,0.49,0.50), mean=0.402, stddev=0.055], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00182, stddev=0.000217], oderiv-count=2.84653e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.88,1.0,1.2 1.3,1.4,1.6,1.7,1.8 1.8,1.9,1.9,2.3), mean=1.56, stddev=0.206], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.6,2.7 2.9,3.1,3.8,4.3,4.5 4.7,4.9,5.1,5.6), mean=3.73, stddev=0.653]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.61,0.63 0.65,0.69,0.78,0.89,0.94 0.99,1.0,1.0,1.1), mean=0.793, stddev=0.11], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09255, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.59,0.63,0.71 0.77,0.82,1.0,1.2,1.3 1.4,1.4,1.4,1.4), mean=1.03, stddev=0.211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.83,0.85,0.88 0.90,0.95,1.0,1.1,1.2 1.2,1.3,1.3,1.6), mean=1.04, stddev=0.119], bias-{mean,stddev}=-0.09751,0.07652, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.16e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.90,0.90,1.1 1.2,1.2,1.4,1.6,1.7 1.8,2.0,2.1,2.3), mean=1.42, stddev=0.242], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.20,0.25 0.27,0.30,0.38,0.44,0.46 0.48,0.55,0.55,0.57), mean=0.373, stddev=0.08], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.004,0.004,0.004), mean=0.00268, stddev=0.00034], oderiv-count=1.8311e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.86,0.98,1.1 1.1,1.2,1.4,1.6,1.7 1.8,2.2,2.2,2.4), mean=1.42, stddev=0.245], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.6,2.9 3.1,3.3,4.0,4.7,5.3 5.5,5.7,5.8,6.0), mean=4.09, stddev=0.818]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.00468], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.60,0.64,0.66 0.70,0.74,0.82,0.93,0.99 1.0,1.0,1.1,1.1), mean=0.836, stddev=0.109], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09679, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.62,0.62,0.70 0.80,0.90,1.1,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.07, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.88,0.89,0.93 0.97,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.09, stddev=0.1], bias-{mean,stddev}=-0.1013,0.1041, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.29e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.86,0.92,0.98 1.1,1.3,1.4,1.6,1.7 1.7,2.0,2.0,2.1), mean=1.42, stddev=0.234], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.18 0.23,0.30,0.36,0.44,0.48 0.50,0.51,0.51,0.54), mean=0.361, stddev=0.0904], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.005,0.006,0.006 0.006,0.007,0.007,0.01), mean=0.0053, stddev=0.000787], oderiv-count=608192
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.81,0.85,0.91 1.1,1.2,1.4,1.6,1.7 1.9,2.0,2.0,2.1), mean=1.41, stddev=0.259], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,3.1,3.1,3.5 3.7,3.9,4.7,5.4,5.8 6.1,6.5,6.7,7.4), mean=4.71, stddev=0.856]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.434921, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.005, max-change=0.75, params-rms=0.1368, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00983], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.85,0.86,0.90 0.95,0.99,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.09, stddev=0.109], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.4 1.4,1.5,1.6,1.8,1.8 1.9,1.9,1.9,1.9), mean=1.63, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.1,2.1 2.2,2.2,2.3,2.4,2.5 2.6,2.6,2.7,2.7), mean=2.31, stddev=0.144], bias-{mean,stddev}=-0.07064,0.1236, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.0,2.0,2.1 2.1,2.2,2.5,2.8,3.0 3.1,3.2,3.2,3.4), mean=2.52, stddev=0.318], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.33 0.35,0.36,0.39,0.41,0.43 0.44,0.46,0.46,0.48), mean=0.39, stddev=0.0319], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.008 0.008,0.009,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00938, stddev=0.0012], oderiv-count=629952
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.9,2.1 2.1,2.2,2.5,2.8,3.0 3.2,3.3,3.3,3.5), mean=2.53, stddev=0.354], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.7,5.7,5.8,6.3 6.5,6.9,7.8,8.6,9.0 9.5,9.7,9.7,13), mean=7.81, stddev=1.15]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, params-rms=0.3047, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,3.4,3.4,3.4 3.4,3.4,3.4,3.5,3.5 3.5,3.5,3.5,3.5), mean=3.45, stddev=0.0125], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,2.0 2.0,2.2,2.4,2.7,2.8 2.8,2.9,3.0,3.1), mean=2.42, stddev=0.284], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-5e-08 -4e-08,-3e-08,-3e-09,2e-08,3e-08 3e-08,5e-08,5e-08,6e-08), mean=-8.16e-10, stddev=2.59e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.6,3.6,3.7,3.9 3.9,4.0,4.2,4.5,4.6 4.7,4.8,5.1,5.3), mean=4.23, stddev=0.312]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00408331, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2366, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.15,0.25,0.55 0.90,1.3,1.9,2.3,2.4 2.5,2.7,2.8,3.6), mean=1.79, stddev=0.604], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(13,13,13,14 14,14,15,16,16 17,17,18,18), mean=15, stddev=1.06], bias-{mean,stddev}=0.001348,0.344, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1514, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.74,0.77,1.0 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.4,1.6), mean=1.21, stddev=0.111], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.6,1.6,1.7,1.8,1.9 1.9,1.9,2.0,2.0), mean=1.71, stddev=0.123], bias-{mean,stddev}=-0.1077,0.1905, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.23e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.91,0.92,0.95 1.0,1.1,1.3,1.5,1.7 1.9,1.9,2.0,2.0), mean=1.31, stddev=0.257], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.38,0.41 0.43,0.44,0.47,0.52,0.57 0.59,0.62,0.64,0.68), mean=0.487, stddev=0.0583], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.004,0.005,0.005,0.005 0.005,0.006,0.007,0.009), mean=0.00462, stddev=0.000635], oderiv-count=625600
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.91,0.92,0.97 1.0,1.1,1.3,1.5,1.8 1.9,2.0,2.0,2.1), mean=1.34, stddev=0.277], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.8,2.0,2.2,2.3 2.5,2.5,2.6,4.4), mean=2.01, stddev=0.32]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00408331, l2-regularize=0.0005, max-change=0.75, params-rms=0.1507, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.7, stddev=0.00218], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.82,0.92,0.99 1.0,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.2, stddev=0.129], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-3e-08 -3e-08,-2e-08,1e-09,2e-08,3e-08 4e-08,5e-08,5e-08,5e-08), mean=1.83e-09, stddev=2.32e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.6,1.6,1.8,1.9,1.9 2.0,2.1,2.1,2.2), mean=1.78, stddev=0.14]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0204165, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1828, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.25 0.63,0.91,1.4,1.8,2.0 2.2,2.3,2.4,3.2), mean=1.36, stddev=0.547], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,11,12,12,12 12,12,12,12), mean=11.6, stddev=0.228], bias-{mean,stddev}=-4.131e-09,0.2591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000774, stddev=0.00119], oderiv-count=633216
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/178.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/179.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.58931 tdnnf2.linear:4.94469 tdnnf2.affine:5.48563 tdnnf3.linear:4.17737 tdnnf3.affine:4.8829 tdnnf4.linear:4.01558 tdnnf4.affine:4.78054 tdnnf5.linear:3.8078 tdnnf5.affine:4.38238 tdnnf6.linear:3.41618 tdnnf6.affine:3.84262 tdnnf7.linear:3.31108 tdnnf7.affine:3.74062 tdnnf8.linear:3.216 tdnnf8.affine:3.6274 tdnnf9.linear:3.28981 tdnnf9.affine:3.74657 tdnnf10.linear:3.3568 tdnnf10.affine:4.03688 tdnnf11.linear:3.36907 tdnnf11.affine:4.17312 tdnnf12.linear:3.62584 tdnnf12.affine:4.35408 tdnnf13.linear:4.03946 tdnnf13.affine:4.9078 prefinal-l:4.25129 prefinal-chain.affine:5.10002 prefinal-chain.linear:5.72831 output.affine:15.7314 prefinal-xent.affine:2.80151 prefinal-xent.linear:1.82822 output-xent.affine:12.8999 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.9982 tdnnf2.linear:16.1834 tdnnf2.affine:15.9262 tdnnf3.linear:13.9992 tdnnf3.affine:14.2694 tdnnf4.linear:13.5801 tdnnf4.affine:13.9847 tdnnf5.linear:12.577 tdnnf5.affine:12.7665 tdnnf6.linear:11.8705 tdnnf6.affine:11.5198 tdnnf7.linear:12.0229 tdnnf7.affine:11.5455 tdnnf8.linear:12.4556 tdnnf8.affine:11.6581 tdnnf9.linear:12.9331 tdnnf9.affine:11.8895 tdnnf10.linear:13.1258 tdnnf10.affine:12.0057 tdnnf11.linear:12.8803 tdnnf11.affine:11.8649 tdnnf12.linear:12.8044 tdnnf12.affine:11.9292 tdnnf13.linear:13.4915 tdnnf13.affine:12.4975 prefinal-l:12.3846 prefinal-chain.affine:18.5867 prefinal-chain.linear:27.5793 output.affine:122.268 prefinal-xent.affine:13.9241 prefinal-xent.linear:13.6384 output-xent.affine:94.3938 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.3664 tdnnf2.linear:0.303728 tdnnf2.affine:0.341562 tdnnf3.linear:0.296029 tdnnf3.affine:0.339704 tdnnf4.linear:0.294166 tdnnf4.affine:0.339415 tdnnf5.linear:0.302157 tdnnf5.affine:0.342172 tdnnf6.linear:0.286326 tdnnf6.affine:0.332647 tdnnf7.linear:0.275452 tdnnf7.affine:0.32343 tdnnf8.linear:0.258459 tdnnf8.affine:0.310739 tdnnf9.linear:0.254025 tdnnf9.affine:0.314047 tdnnf10.linear:0.255629 tdnnf10.affine:0.336541 tdnnf11.linear:0.261017 tdnnf11.affine:0.350737 tdnnf12.linear:0.283773 tdnnf12.affine:0.364925 tdnnf13.linear:0.29813 tdnnf13.affine:0.391458 prefinal-l:0.348223 prefinal-chain.affine:0.274738 prefinal-chain.linear:0.207596 output.affine:0.128753 prefinal-xent.affine:0.201524 prefinal-xent.linear:0.134081 output-xent.affine:0.136861 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 10:30:09 CST 2020, elapsed time 3 seconds
