# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/249.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/248.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/249.mdl 
# Started at Mon Feb 24 12:14:35 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/249.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1407, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.3,1.4,1.5 1.6,1.7,1.9,2.4,2.7 2.9,3.0,3.1,3.4), mean=2.04, stddev=0.449], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.56,0.60,0.65 0.74,0.85,1.5,1.9,2.3 2.5,2.7,2.8,3.3), mean=1.48, stddev=0.586], bias-{mean,stddev}=-0.1279,0.192, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.43e+06, self-repaired-proportion=0.0201716, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.01,0.02 0.03,0.05,0.10,0.19,0.22 0.26,0.29,0.29,0.35), mean=0.117, stddev=0.0775], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.05,0.08 0.10,0.18,0.32,0.51,0.64 0.70,0.75,0.76,0.82), mean=0.348, stddev=0.191], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.07 0.08,0.08,0.09,0.14), mean=0.0438, stddev=0.0198], oderiv-count=1.24989e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.006,0.02 0.03,0.05,0.10,0.19,0.23 0.26,0.30,0.31,0.35), mean=0.119, stddev=0.08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.06,0.09 0.11,0.14,0.20,0.26,0.29 0.31,0.32,0.33,0.34), mean=0.202, stddev=0.0693]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.212698, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1176, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.88, stddev=0.00716], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.70,0.72,0.75 0.80,0.83,0.94,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.934, stddev=0.112], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.118, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.99,1.0,1.1 1.2,1.2,1.3,1.4,1.5 1.6,1.7,1.7,1.8), mean=1.33, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.33, stddev=0.0985], bias-{mean,stddev}=-0.1712,0.1008, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.99e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.84,0.87,1.1 1.1,1.2,1.4,1.6,1.7 1.8,1.9,2.0,2.0), mean=1.43, stddev=0.224], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.37,0.38 0.39,0.44,0.54,0.58,0.60 0.60,0.61,0.61,0.64), mean=0.514, stddev=0.0731], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002,0.003 0.004,0.009,0.01,0.01), mean=0.00222, stddev=0.00155], oderiv-count=1.16088e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.83,0.84,1.0 1.1,1.2,1.4,1.6,1.7 1.8,1.9,1.9,2.0), mean=1.44, stddev=0.237], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.5,1.7 1.8,2.0,2.2,2.6,2.8 2.9,3.0,3.1,3.2), mean=2.26, stddev=0.376]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.212698, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1068, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.68,0.71 0.74,0.78,0.85,0.92,0.97 1.0,1.0,1.1,1.1), mean=0.85, stddev=0.0877], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.112, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.85,1.1 1.1,1.1,1.3,1.4,1.4 1.5,1.6,1.6,1.7), mean=1.26, stddev=0.159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.2,1.3,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.26, stddev=0.0865], bias-{mean,stddev}=-0.1757,0.07891, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.23e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.75,1.1,1.3 1.4,1.5,1.7,1.8,1.9 1.9,2.1,2.1,2.2), mean=1.64, stddev=0.226], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.37,0.42 0.44,0.46,0.52,0.56,0.57 0.58,0.59,0.59,0.60), mean=0.513, stddev=0.0519], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0009,0.0009 0.0009,0.001,0.001,0.001,0.002 0.003,0.005,0.005,0.009), mean=0.00142, stddev=0.00113], oderiv-count=1.07238e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.60,1.2,1.3 1.4,1.5,1.6,1.8,1.9 2.0,2.1,2.2,2.2), mean=1.65, stddev=0.25], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.88,1.6,2.1 2.2,2.3,2.6,2.9,3.1 3.3,3.4,3.6,3.7), mean=2.61, stddev=0.428]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.212698, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09947, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.59, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.63,0.65,0.67 0.70,0.73,0.79,0.86,0.88 0.92,0.93,0.96,1.0), mean=0.792, stddev=0.0723], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1032, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.69,1.0 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.16, stddev=0.139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.96,0.98,1.0 1.0,1.1,1.1,1.2,1.3 1.4,1.4,1.4,1.7), mean=1.16, stddev=0.115], bias-{mean,stddev}=-0.1729,0.08701, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.53e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.68,0.82,1.4 1.5,1.6,1.7,1.9,2.0 2.1,2.2,2.2,2.5), mean=1.73, stddev=0.274], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.39,0.41 0.42,0.47,0.50,0.55,0.57 0.57,0.58,0.58,0.60), mean=0.502, stddev=0.0505], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.001 0.002,0.003,0.005,0.007), mean=0.00111, stddev=0.000873], oderiv-count=9.856e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.62,0.74,1.4 1.5,1.6,1.7,2.0,2.0 2.2,2.3,2.4,2.5), mean=1.73, stddev=0.293], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.0,1.3,2.2 2.4,2.5,2.8,3.1,3.4 3.5,3.9,3.9,4.4), mean=2.81, stddev=0.511]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.212698, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09196, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.47, stddev=0.00162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.58,0.60,0.62 0.64,0.67,0.73,0.79,0.83 0.86,0.90,0.92,0.94), mean=0.732, stddev=0.0746], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09007, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.57,0.86 0.90,0.94,1.0,1.1,1.1 1.2,1.2,1.3,1.4), mean=1.01, stddev=0.123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.79,0.84,0.88 0.91,0.94,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.02, stddev=0.0883], bias-{mean,stddev}=-0.151,0.05598, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.63e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.65,0.72,1.1 1.3,1.4,1.5,1.7,1.7 1.8,1.8,1.9,1.9), mean=1.48, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.39,0.43 0.45,0.47,0.51,0.54,0.56 0.57,0.58,0.58,0.59), mean=0.506, stddev=0.0431], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.002,0.004,0.004), mean=0.00116, stddev=0.000469], oderiv-count=8.94733e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.62,0.71,1.1 1.2,1.3,1.5,1.7,1.7 1.8,1.9,1.9,2.0), mean=1.48, stddev=0.232], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.99,1.2,1.9 2.0,2.1,2.3,2.5,2.7 3.0,3.1,3.1,3.7), mean=2.32, stddev=0.371]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.212698, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08917, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.43, stddev=0.00309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.58,0.61 0.63,0.66,0.71,0.77,0.79 0.81,0.83,0.87,0.89), mean=0.71, stddev=0.0643], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08388, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.62,0.64,0.80 0.83,0.87,0.95,1.0,1.1 1.1,1.1,1.1,1.3), mean=0.943, stddev=0.106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.78,0.78,0.80 0.83,0.86,0.93,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.944, stddev=0.0928], bias-{mean,stddev}=-0.1395,0.05261, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.91,0.92,1.0 1.2,1.3,1.4,1.5,1.6 1.7,1.8,1.8,2.0), mean=1.39, stddev=0.198], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.40,0.42 0.45,0.46,0.50,0.53,0.55 0.56,0.57,0.57,0.60), mean=0.496, stddev=0.0428], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002), mean=0.00121, stddev=0.000233], oderiv-count=8.03117e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.89,0.92,0.98 1.2,1.3,1.4,1.5,1.6 1.7,1.8,1.8,2.1), mean=1.39, stddev=0.202], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.6,1.7 1.8,1.9,2.1,2.4,2.5 2.7,2.8,2.8,3.1), mean=2.14, stddev=0.292]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.212698, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08935, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.43, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.58,0.59 0.62,0.65,0.71,0.77,0.80 0.82,0.85,0.87,0.89), mean=0.711, stddev=0.0699], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08368, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.57,0.77 0.82,0.86,0.94,1.0,1.1 1.1,1.1,1.2,1.3), mean=0.94, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.77,0.78,0.80 0.83,0.85,0.94,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.942, stddev=0.0939], bias-{mean,stddev}=-0.1297,0.05766, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.93e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.84,1.0 1.2,1.3,1.4,1.5,1.6 1.7,1.8,1.8,1.9), mean=1.37, stddev=0.203], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.33,0.41 0.43,0.45,0.47,0.51,0.53 0.55,0.56,0.58,0.60), mean=0.474, stddev=0.0469], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002), mean=0.00122, stddev=0.000224], oderiv-count=7.04102e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.65,0.79,0.99 1.2,1.3,1.4,1.5,1.6 1.7,1.8,1.8,1.9), mean=1.37, stddev=0.206], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.6,1.8 1.9,2.0,2.1,2.4,2.6 2.8,3.0,3.0,3.0), mean=2.19, stddev=0.32]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.212698, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09215, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.47, stddev=0.00189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.58,0.60 0.63,0.66,0.73,0.80,0.84 0.87,0.91,0.95,0.98), mean=0.733, stddev=0.0828], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08381, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.55,0.73 0.79,0.84,0.94,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.939, stddev=0.13], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.78,0.78,0.80 0.82,0.85,0.93,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.943, stddev=0.101], bias-{mean,stddev}=-0.1017,0.05762, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.67,0.76,0.99 1.2,1.2,1.4,1.6,1.8 1.9,1.9,1.9,2.0), mean=1.4, stddev=0.252], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.40 0.41,0.43,0.45,0.48,0.49 0.50,0.54,0.55,0.57), mean=0.45, stddev=0.044], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00119, stddev=0.000205], oderiv-count=6.06099e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.68,0.74,1.0 1.2,1.2,1.4,1.6,1.8 1.9,1.9,2.0,2.0), mean=1.41, stddev=0.257], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.7,1.7,1.8 1.9,2.0,2.3,2.6,3.0 3.1,3.4,3.4,3.5), mean=2.36, stddev=0.4]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.212698, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09566, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.53, stddev=0.00442], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.57,0.60 0.62,0.67,0.74,0.85,0.89 0.94,0.96,1.0,1.1), mean=0.758, stddev=0.102], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08685, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.57,0.57,0.71 0.78,0.87,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=0.972, stddev=0.145], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.76,0.78,0.81 0.83,0.89,0.98,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.977, stddev=0.101], bias-{mean,stddev}=-0.07742,0.04655, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.25e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.80,0.89,1.1 1.2,1.3,1.5,1.7,1.8 1.9,2.1,2.2,2.2), mean=1.51, stddev=0.262], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.30,0.35,0.39 0.41,0.43,0.45,0.47,0.48 0.49,0.50,0.50,0.51), mean=0.447, stddev=0.0369], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002), mean=0.00125, stddev=0.000182], oderiv-count=4.94208e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.79,0.86,1.2 1.2,1.3,1.5,1.7,1.8 2.0,2.1,2.1,2.3), mean=1.51, stddev=0.271], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,2.0 2.2,2.3,2.5,2.9,3.0 3.2,3.4,3.4,3.7), mean=2.56, stddev=0.359]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.212698, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09607, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.54, stddev=0.00195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.50,0.56,0.60 0.62,0.65,0.75,0.86,0.92 0.98,1.0,1.0,1.1), mean=0.759, stddev=0.12], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08639, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.67,0.72 0.78,0.85,0.97,1.1,1.1 1.2,1.2,1.2,1.2), mean=0.966, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.73,0.79,0.82 0.84,0.90,0.98,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.972, stddev=0.103], bias-{mean,stddev}=-0.07558,0.03879, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.62e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.78,1.0,1.2 1.2,1.2,1.4,1.6,1.7 1.7,1.8,1.8,1.9), mean=1.41, stddev=0.192], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.34,0.37 0.37,0.40,0.43,0.45,0.47 0.48,0.48,0.49,0.54), mean=0.425, stddev=0.0407], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00155, stddev=0.000197], oderiv-count=3.84858e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.79,1.1,1.1 1.1,1.2,1.4,1.5,1.7 1.7,1.8,1.9,1.9), mean=1.4, stddev=0.204], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.1,2.1 2.2,2.3,2.5,2.9,3.1 3.2,3.3,3.4,3.4), mean=2.59, stddev=0.342]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.212698, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09061, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.45, stddev=0.00249], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.52,0.54 0.58,0.61,0.69,0.83,0.88 0.91,0.94,0.99,1.1), mean=0.715, stddev=0.118], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08415, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.56,0.66 0.73,0.77,0.93,1.1,1.2 1.2,1.2,1.3,1.3), mean=0.935, stddev=0.18], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.75,0.78,0.80 0.83,0.87,0.94,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.948, stddev=0.0892], bias-{mean,stddev}=-0.08046,0.04222, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.92e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.82,0.85,0.94 0.99,1.1,1.2,1.3,1.4 1.5,1.5,1.5,1.7), mean=1.18, stddev=0.157], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.32 0.34,0.36,0.40,0.44,0.45 0.46,0.47,0.47,0.51), mean=0.4, stddev=0.0427], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.003), mean=0.00218, stddev=0.000254], oderiv-count=2.81619e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.87,0.87,0.93 0.98,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.17, stddev=0.152], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.9,2.0 2.1,2.2,2.5,3.0,3.1 3.2,3.4,3.4,3.5), mean=2.59, stddev=0.409]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.212698, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08731, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.4, stddev=0.00303], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.51,0.54 0.55,0.58,0.66,0.80,0.86 0.90,0.93,0.96,0.98), mean=0.689, stddev=0.118], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08327, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.47,0.59 0.65,0.73,0.90,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.918, stddev=0.21], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.75,0.75,0.80 0.82,0.86,0.92,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.938, stddev=0.0929], bias-{mean,stddev}=-0.09021,0.05492, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.16e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.63,0.69,0.78 0.83,0.87,1.0,1.1,1.2 1.2,1.3,1.4,1.9), mean=1.02, stddev=0.172], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.18,0.22 0.25,0.29,0.35,0.41,0.43 0.45,0.47,0.47,0.58), mean=0.35, stddev=0.0733], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.004,0.004 0.004,0.004,0.005,0.006), mean=0.0033, stddev=0.000475], oderiv-count=1.81478e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.64,0.66,0.78 0.84,0.88,1.0,1.1,1.2 1.3,1.3,1.3,2.0), mean=1.02, stddev=0.171], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.1 2.1,2.3,2.8,3.3,3.6 3.6,3.8,3.9,3.9), mean=2.82, stddev=0.525]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.212698, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09239, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.48, stddev=0.00249], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.56,0.57 0.60,0.63,0.72,0.83,0.89 0.92,0.96,0.98,1.1), mean=0.731, stddev=0.11], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.57,0.57,0.64 0.75,0.86,0.99,1.2,1.3 1.3,1.3,1.3,1.4), mean=1, stddev=0.196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.83,0.85,0.88 0.90,0.93,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.02, stddev=0.089], bias-{mean,stddev}=-0.08867,0.07613, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.01e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.70,0.74,0.80 0.85,0.93,1.1,1.2,1.3 1.4,1.5,1.5,1.6), mean=1.1, stddev=0.186], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.19 0.23,0.28,0.35,0.41,0.44 0.46,0.47,0.47,0.51), mean=0.345, stddev=0.079], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.005,0.005,0.006,0.007,0.007 0.007,0.008,0.008,0.009), mean=0.00605, stddev=0.000815], oderiv-count=623424
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.74,0.75,0.82 0.86,0.93,1.1,1.2,1.3 1.4,1.5,1.5,1.6), mean=1.1, stddev=0.182], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.2,2.3,2.5 2.6,3.0,3.6,4.1,4.3 4.6,4.7,4.7,4.9), mean=3.55, stddev=0.617]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.212698, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.005, max-change=0.75, params-rms=0.1299, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.47, stddev=0.0104], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.81,0.83,0.87 0.90,0.96,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.03, stddev=0.0975], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.4,1.5,1.6,1.6,1.7 1.8,1.8,1.8,1.8), mean=1.55, stddev=0.133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.0 2.0,2.1,2.2,2.3,2.3 2.4,2.4,2.4,2.5), mean=2.19, stddev=0.131], bias-{mean,stddev}=-0.04739,0.127, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.1e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.7,1.8,2.0,2.3,2.4 2.4,2.6,2.7,2.7), mean=2.05, stddev=0.254], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.35 0.36,0.36,0.39,0.41,0.43 0.43,0.44,0.45,0.47), mean=0.389, stddev=0.0275], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.008 0.008,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00986, stddev=0.00142], oderiv-count=606016
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.6 1.7,1.8,2.0,2.2,2.4 2.5,2.6,2.7,2.8), mean=2.02, stddev=0.264], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.1,4.1,4.1,4.5 4.8,5.0,5.5,6.3,6.6 6.9,7.3,7.4,10), mean=5.63, stddev=0.856]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, params-rms=0.2702, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.0,3.0,3.0 3.0,3.0,3.1,3.1,3.1 3.1,3.1,3.1,3.1), mean=3.06, stddev=0.01], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.6,1.8 1.8,2.0,2.2,2.3,2.4 2.5,2.6,2.6,2.6), mean=2.15, stddev=0.243], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-3e-08 -3e-08,-2e-08,-2e-09,2e-08,2e-08 3e-08,3e-08,5e-08,5e-08), mean=-2.37e-09, stddev=2.1e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.2,3.2,3.3,3.4 3.5,3.5,3.7,3.9,4.0 4.1,4.4,4.5,4.6), mean=3.75, stddev=0.257]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00244788, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.16,0.24,0.55 0.87,1.2,1.8,2.1,2.2 2.4,2.5,2.6,3.2), mean=1.67, stddev=0.545], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,13 13,13,14,15,15 15,16,16,16), mean=13.9, stddev=0.852], bias-{mean,stddev}=0.001407,0.3147, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1387, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.74,0.78,0.97 1.0,1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.4), mean=1.11, stddev=0.0958], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.5,1.6,1.6,1.7 1.8,1.8,1.8,1.9), mean=1.56, stddev=0.119], bias-{mean,stddev}=-0.05573,0.1806, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.87e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.74,0.83 0.87,0.93,1.1,1.3,1.5 1.5,1.6,1.7,1.8), mean=1.12, stddev=0.229], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.35,0.39 0.41,0.43,0.48,0.52,0.56 0.58,0.61,0.62,0.66), mean=0.478, stddev=0.0592], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.005,0.005,0.005,0.005,0.006 0.006,0.006,0.007,0.01), mean=0.00522, stddev=0.000836], oderiv-count=606016
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.69,0.79 0.83,0.89,1.1,1.3,1.4 1.5,1.7,1.7,1.8), mean=1.11, stddev=0.242], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.3 1.4,1.5,1.7,1.9,2.0 2.1,2.2,2.2,2.9), mean=1.7, stddev=0.25]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00244788, l2-regularize=0.0005, max-change=0.75, params-rms=0.1404, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.59, stddev=0.00138], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.83,0.85,0.89 0.97,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.12, stddev=0.129], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-3e-08 -2e-08,-1e-08,-2e-09,2e-08,2e-08 3e-08,4e-08,4e-08,4e-08), mean=9.54e-10, stddev=1.91e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.5,1.6,1.7,1.8 1.8,1.9,1.9,1.9), mean=1.64, stddev=0.112]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0122394, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1932, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.08,0.29 0.72,1.0,1.5,1.9,2.1 2.3,2.4,2.5,3.6), mean=1.44, stddev=0.557], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,12,12,13 13,13,13,13), mean=12.3, stddev=0.227], bias-{mean,stddev}=7.908e-09,0.2208, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000793, stddev=0.0012], oderiv-count=602752
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/248.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/249.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.52037 tdnnf2.linear:3.68659 tdnnf2.affine:4.26501 tdnnf3.linear:3.20572 tdnnf3.affine:4.01178 tdnnf4.linear:2.96437 tdnnf4.affine:3.64792 tdnnf5.linear:2.70839 tdnnf5.affine:3.20116 tdnnf6.linear:2.52123 tdnnf6.affine:2.82609 tdnnf7.linear:2.35377 tdnnf7.affine:2.71117 tdnnf8.linear:2.1791 tdnnf8.affine:2.59969 tdnnf9.linear:2.24684 tdnnf9.affine:2.65162 tdnnf10.linear:2.36311 tdnnf10.affine:2.78712 tdnnf11.linear:2.42624 tdnnf11.affine:2.96187 tdnnf12.linear:2.50042 tdnnf12.affine:3.12962 tdnnf13.linear:2.80026 tdnnf13.affine:3.6011 prefinal-l:3.88496 prefinal-chain.affine:4.17308 prefinal-chain.linear:4.14869 output.affine:10.7558 prefinal-xent.affine:2.34084 prefinal-xent.linear:1.50323 output-xent.affine:9.03849 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.7625 tdnnf2.linear:15.0495 tdnnf2.affine:15.2752 tdnnf3.linear:13.6727 tdnnf3.affine:14.4973 tdnnf4.linear:12.7317 tdnnf4.affine:13.3873 tdnnf5.linear:11.7713 tdnnf5.affine:11.6716 tdnnf6.linear:11.4134 tdnnf6.affine:10.868 tdnnf7.linear:11.4364 tdnnf7.affine:10.8307 tdnnf8.linear:11.7955 tdnnf8.affine:10.8091 tdnnf9.linear:12.2448 tdnnf9.affine:11.1635 tdnnf10.linear:12.2967 tdnnf10.affine:11.0995 tdnnf11.linear:11.5985 tdnnf11.affine:10.8205 tdnnf12.linear:11.1755 tdnnf12.affine:10.7259 tdnnf13.linear:11.8262 tdnnf13.affine:11.6261 prefinal-l:11.7556 prefinal-chain.affine:17.628 prefinal-chain.linear:24.455 output.affine:113.36 prefinal-xent.affine:12.7354 prefinal-xent.linear:12.7095 output-xent.affine:99.225 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.31778 tdnnf2.linear:0.245941 tdnnf2.affine:0.282722 tdnnf3.linear:0.236624 tdnnf3.affine:0.280757 tdnnf4.linear:0.236082 tdnnf4.affine:0.276905 tdnnf5.linear:0.232771 tdnnf5.affine:0.277911 tdnnf6.linear:0.221351 tdnnf6.affine:0.260424 tdnnf7.linear:0.206354 tdnnf7.affine:0.250869 tdnnf8.linear:0.184811 tdnnf8.affine:0.240667 tdnnf9.linear:0.18321 tdnnf9.affine:0.237328 tdnnf10.linear:0.192312 tdnnf10.affine:0.251172 tdnnf11.linear:0.208717 tdnnf11.affine:0.273413 tdnnf12.linear:0.222961 tdnnf12.affine:0.290801 tdnnf13.linear:0.236557 tdnnf13.affine:0.309942 prefinal-l:0.325829 prefinal-chain.affine:0.236322 prefinal-chain.linear:0.169265 output.affine:0.0946635 prefinal-xent.affine:0.1838 prefinal-xent.linear:0.118272 output-xent.affine:0.0910977 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 12:14:38 CST 2020, elapsed time 3 seconds
