# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/145.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/144.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/145.mdl 
# Started at Mon Feb 24 09:41:05 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/145.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1508, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.4,1.4,1.5 1.7,1.8,2.1,2.5,3.0 3.2,3.4,3.4,3.6), mean=2.18, stddev=0.496], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.60,0.61,0.70 0.77,0.93,1.6,2.0,2.5 2.8,3.0,3.1,3.7), mean=1.58, stddev=0.646], bias-{mean,stddev}=-0.1562,0.2139, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=9.03e+06, self-repaired-proportion=0.044614, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.006,0.01 0.03,0.05,0.10,0.19,0.25 0.31,0.33,0.33,0.39), mean=0.123, stddev=0.0899], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.05 0.08,0.17,0.29,0.50,0.66 0.71,0.78,0.78,0.80), mean=0.336, stddev=0.201], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.07 0.08,0.10,0.11,0.16), mean=0.0449, stddev=0.022], oderiv-count=1.28436e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.003,0.005,0.01 0.03,0.05,0.10,0.18,0.27 0.31,0.33,0.34,0.41), mean=0.124, stddev=0.0913], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.06 0.10,0.14,0.20,0.28,0.31 0.32,0.34,0.34,0.34), mean=0.209, stddev=0.0799]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1315, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.1 2.1,2.1,2.1,2.1,2.1 2.1,2.1,2.1,2.1), mean=2.1, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.69,0.76,0.85 0.89,0.94,1.0,1.1,1.2 1.3,1.3,1.4,1.5), mean=1.04, stddev=0.133], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1298, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.2 1.3,1.3,1.4,1.6,1.7 1.8,1.9,1.9,1.9), mean=1.46, stddev=0.173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.3 1.3,1.4,1.5,1.6,1.6 1.6,1.7,1.7,1.8), mean=1.46, stddev=0.109], bias-{mean,stddev}=-0.183,0.1241, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.9e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.2,1.4 1.7,1.8,2.0,2.2,2.3 2.3,2.4,2.5,2.6), mean=1.97, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.38,0.40 0.40,0.45,0.54,0.58,0.59 0.60,0.60,0.60,0.61), mean=0.519, stddev=0.0667], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.005,0.006,0.007), mean=0.00165, stddev=0.000919], oderiv-count=1.21172e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.5 1.7,1.8,2.0,2.2,2.3 2.4,2.4,2.5,2.7), mean=1.98, stddev=0.297], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.9,2.3 2.5,2.7,3.2,3.5,3.8 4.0,4.2,4.2,4.2), mean=3.15, stddev=0.512]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1135, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.82, stddev=0.00369], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.70,0.71,0.74 0.78,0.82,0.90,0.99,1.0 1.1,1.1,1.1,1.3), mean=0.903, stddev=0.0979], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.88,0.91,1.1 1.2,1.2,1.3,1.4,1.4 1.5,1.6,1.6,1.7), mean=1.28, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.4 1.4,1.5,1.5,1.5), mean=1.28, stddev=0.0901], bias-{mean,stddev}=-0.1705,0.07972, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.7 1.8,1.9,2.1,2.3,2.4 2.5,2.6,2.6,2.6), mean=2.09, stddev=0.249], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.40,0.42 0.44,0.47,0.52,0.56,0.57 0.57,0.59,0.59,0.60), mean=0.514, stddev=0.0491], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.002,0.003,0.004,0.004), mean=0.00116, stddev=0.000632], oderiv-count=1.10922e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.7 1.8,1.9,2.1,2.3,2.4 2.5,2.6,2.6,2.7), mean=2.09, stddev=0.259], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,2.0,2.6 2.7,3.0,3.2,3.8,3.9 4.1,4.4,4.4,4.7), mean=3.32, stddev=0.513]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1067, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.66,0.69,0.72 0.75,0.79,0.85,0.92,0.95 0.97,1.0,1.0,1.2), mean=0.85, stddev=0.0809], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1115, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.75,0.90,1.0 1.1,1.2,1.2,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.25, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.4,1.4 1.4,1.5,1.5,1.7), mean=1.26, stddev=0.115], bias-{mean,stddev}=-0.1883,0.1041, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.72e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,1.1,1.5,1.7 1.9,2.1,2.3,2.5,2.7 2.8,2.9,2.9,3.2), mean=2.28, stddev=0.34], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.41,0.42 0.44,0.47,0.51,0.54,0.56 0.56,0.58,0.58,0.59), mean=0.506, stddev=0.0432], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0006,0.0007,0.0008,0.0009,0.001 0.002,0.003,0.003,0.006), mean=0.000914, stddev=0.000671], oderiv-count=9.8032e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,1.1,1.6,1.7 1.9,2.1,2.2,2.5,2.6 2.7,2.9,2.9,3.3), mean=2.27, stddev=0.341], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.5,2.3,2.8 2.9,3.2,3.6,4.1,4.4 4.6,4.9,5.0,5.5), mean=3.64, stddev=0.653]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1012, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00355], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.67,0.68 0.70,0.74,0.80,0.87,0.91 0.95,0.97,0.97,1.0), mean=0.806, stddev=0.0778], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1022, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.62,0.83,0.95 1.0,1.1,1.2,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.15, stddev=0.133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.91,0.94,0.99 1.0,1.1,1.1,1.3,1.3 1.3,1.4,1.4,1.4), mean=1.15, stddev=0.114], bias-{mean,stddev}=-0.1527,0.07055, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.23e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.84,1.6,1.8 1.9,2.0,2.2,2.5,2.6 2.7,2.9,3.0,3.0), mean=2.25, stddev=0.332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.43,0.44 0.45,0.48,0.51,0.54,0.56 0.57,0.57,0.58,0.60), mean=0.511, stddev=0.0392], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0006,0.0007,0.0008,0.0009,0.001 0.001,0.001,0.002,0.004), mean=0.000857, stddev=0.000445], oderiv-count=9.15283e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.89,1.6,1.8 1.9,2.0,2.2,2.5,2.6 2.7,2.9,2.9,3.1), mean=2.22, stddev=0.341], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,2.3,2.7 2.9,3.1,3.4,3.9,4.2 4.3,5.0,5.0,5.4), mean=3.46, stddev=0.592]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09483, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.52, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.59,0.61,0.64 0.66,0.69,0.75,0.81,0.84 0.89,0.91,0.94,1.0), mean=0.755, stddev=0.0746], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09219, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.74,0.75,0.86 0.90,0.96,1.0,1.1,1.2 1.2,1.2,1.3,1.4), mean=1.04, stddev=0.113], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.83,0.87 0.93,0.95,1.0,1.1,1.2 1.2,1.2,1.3,1.4), mean=1.04, stddev=0.0975], bias-{mean,stddev}=-0.1471,0.067, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,1.2,1.3,1.5 1.6,1.8,1.9,2.1,2.3 2.3,2.4,2.4,2.5), mean=1.92, stddev=0.259], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.38,0.43 0.44,0.47,0.50,0.53,0.54 0.55,0.55,0.56,0.59), mean=0.496, stddev=0.0376], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.002,0.003), mean=0.000968, stddev=0.00024], oderiv-count=7.89101e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.3,1.4 1.6,1.7,1.9,2.1,2.3 2.3,2.4,2.4,2.5), mean=1.92, stddev=0.269], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,2.1,2.1,2.4 2.6,2.7,2.9,3.3,3.6 3.8,3.9,4.0,4.3), mean=2.98, stddev=0.418]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09682, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.59,0.62,0.64 0.67,0.71,0.76,0.85,0.88 0.91,0.96,0.97,1.0), mean=0.77, stddev=0.0822], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09256, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.66,0.73,0.84 0.89,0.95,1.1,1.1,1.2 1.2,1.2,1.2,1.4), mean=1.04, stddev=0.118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.82,0.85,0.89 0.92,0.96,1.0,1.1,1.2 1.2,1.2,1.3,1.3), mean=1.04, stddev=0.101], bias-{mean,stddev}=-0.1342,0.06586, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.76e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.2,1.4 1.6,1.7,1.9,2.1,2.2 2.4,2.5,2.6,2.7), mean=1.91, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.38,0.41 0.44,0.45,0.48,0.51,0.52 0.54,0.56,0.56,0.58), mean=0.481, stddev=0.0402], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.000993, stddev=0.000187], oderiv-count=6.71098e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.4 1.6,1.7,1.9,2.1,2.2 2.4,2.6,2.6,2.6), mean=1.92, stddev=0.285], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.1,2.2,2.5 2.6,2.7,3.0,3.3,3.5 3.7,4.1,4.2,4.4), mean=3.06, stddev=0.411]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.62,0.64 0.68,0.71,0.79,0.87,0.90 0.94,0.97,1.0,1.0), mean=0.797, stddev=0.0898], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09399, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.69,0.76 0.86,0.96,1.0,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.05, stddev=0.143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.83,0.85,0.89 0.93,0.97,1.0,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.06, stddev=0.102], bias-{mean,stddev}=-0.1045,0.08186, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.95e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.2,1.5 1.6,1.8,1.9,2.2,2.3 2.7,2.9,3.0,3.0), mean=1.98, stddev=0.351], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.34,0.40 0.41,0.44,0.47,0.49,0.51 0.52,0.53,0.53,0.54), mean=0.464, stddev=0.0413], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.001, stddev=0.000157], oderiv-count=5.91494e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.1,1.2,1.5 1.6,1.7,1.9,2.2,2.3 2.7,2.9,3.0,3.0), mean=1.99, stddev=0.361], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.6,2.6 2.8,2.9,3.2,3.6,3.8 4.3,4.5,4.6,4.8), mean=3.29, stddev=0.472]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.64, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.58,0.61,0.64 0.69,0.73,0.81,0.89,0.95 0.97,1.0,1.0,1.1), mean=0.814, stddev=0.0994], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09523, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.64,0.73 0.83,0.91,1.1,1.2,1.3 1.3,1.3,1.3,1.3), mean=1.06, stddev=0.17], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.82,0.84,0.88 0.92,0.97,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.07, stddev=0.113], bias-{mean,stddev}=-0.09083,0.07037, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.47e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.2,1.3 1.5,1.7,2.0,2.2,2.4 2.5,2.7,2.7,2.7), mean=1.97, stddev=0.337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.34,0.37 0.40,0.43,0.45,0.48,0.49 0.50,0.50,0.51,0.52), mean=0.45, stddev=0.0409], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.0009 0.001,0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.00113, stddev=0.000154], oderiv-count=4.8384e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.2,1.4 1.6,1.7,2.0,2.2,2.4 2.5,2.6,2.6,2.8), mean=1.98, stddev=0.333], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.7,2.7,2.8 2.9,3.0,3.4,3.8,3.9 4.1,4.5,4.7,5.1), mean=3.42, stddev=0.447]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1069, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00414], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.62,0.64,0.66 0.69,0.75,0.84,0.94,1.0 1.1,1.1,1.1,1.2), mean=0.847, stddev=0.119], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09739, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.57,0.72 0.83,0.94,1.1,1.2,1.3 1.4,1.4,1.4,1.4), mean=1.09, stddev=0.187], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.87,0.91 0.93,0.99,1.1,1.2,1.3 1.3,1.4,1.5,1.5), mean=1.09, stddev=0.13], bias-{mean,stddev}=-0.07782,0.05424, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.57e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.4 1.6,1.7,1.9,2.2,2.3 2.4,2.5,2.5,2.5), mean=1.94, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.29,0.35 0.38,0.41,0.44,0.47,0.48 0.48,0.50,0.50,0.50), mean=0.433, stddev=0.0447], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00135, stddev=0.000172], oderiv-count=3.84858e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.2,1.4 1.6,1.7,1.9,2.2,2.3 2.4,2.5,2.6,2.8), mean=1.95, stddev=0.297], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.7,2.7,3.0 3.1,3.2,3.5,4.1,4.5 4.9,5.0,5.1,5.9), mean=3.68, stddev=0.588]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1033, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.65, stddev=0.00352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.63,0.66 0.68,0.71,0.81,0.91,0.97 1.0,1.1,1.1,1.1), mean=0.818, stddev=0.114], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09491, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.49,0.62,0.71 0.80,0.89,1.0,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.05, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.80,0.88,0.90 0.93,0.98,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.07, stddev=0.105], bias-{mean,stddev}=-0.09148,0.05972, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.98e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,1.0,1.2 1.3,1.5,1.7,1.8,1.9 2.0,2.0,2.1,2.2), mean=1.63, stddev=0.237], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.30 0.34,0.37,0.41,0.44,0.46 0.47,0.48,0.49,0.50), mean=0.404, stddev=0.0529], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003), mean=0.00189, stddev=0.00023], oderiv-count=2.9881e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.96,1.0,1.2 1.3,1.5,1.6,1.8,1.9 2.0,2.1,2.1,2.2), mean=1.64, stddev=0.25], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.6,2.6,2.8 3.0,3.2,3.6,4.3,4.6 4.8,4.8,4.8,4.9), mean=3.72, stddev=0.585]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1017, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.00239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.61,0.63 0.67,0.71,0.79,0.92,0.95 1.0,1.1,1.1,1.1), mean=0.805, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09435, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.59,0.69 0.75,0.83,1.0,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.04, stddev=0.233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.82,0.85,0.88 0.92,0.96,1.0,1.1,1.2 1.3,1.4,1.4,1.5), mean=1.06, stddev=0.125], bias-{mean,stddev}=-0.1053,0.08143, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.14e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.91,0.92,1.0 1.1,1.2,1.4,1.6,1.7 1.8,1.9,2.1,2.4), mean=1.44, stddev=0.248], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.22 0.24,0.30,0.38,0.43,0.46 0.48,0.48,0.50,0.54), mean=0.367, stddev=0.0787], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.004,0.004,0.004), mean=0.00279, stddev=0.00041], oderiv-count=1.82784e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.86,0.86,1.0 1.1,1.2,1.4,1.6,1.7 1.8,2.0,2.0,2.4), mean=1.42, stddev=0.264], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.7,2.8,3.0 3.1,3.4,3.9,4.6,5.0 5.2,5.5,5.5,5.8), mean=4.02, stddev=0.703]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1057, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.00244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.62,0.66 0.70,0.75,0.83,0.95,0.99 1.0,1.0,1.1,1.1), mean=0.838, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09692, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.62,0.65 0.75,0.83,1.0,1.3,1.4 1.5,1.5,1.5,1.5), mean=1.07, stddev=0.25], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.90,0.90,0.94 0.96,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.09, stddev=0.107], bias-{mean,stddev}=-0.1177,0.1043, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.25e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.93,0.94 1.0,1.2,1.4,1.6,1.7 1.8,1.8,1.8,2.2), mean=1.41, stddev=0.253], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.18 0.21,0.24,0.36,0.43,0.46 0.47,0.52,0.53,0.55), mean=0.345, stddev=0.0968], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.005,0.006,0.007 0.008,0.009,0.009,0.009), mean=0.0056, stddev=0.000951], oderiv-count=639744
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.90,0.91,0.96 1.0,1.2,1.4,1.6,1.7 1.7,1.9,1.9,2.3), mean=1.39, stddev=0.255], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,3.0,3.0,3.4 3.6,4.0,4.7,5.4,5.8 5.9,6.7,6.9,7.1), mean=4.73, stddev=0.847]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.428571, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.005, max-change=0.75, params-rms=0.1292, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.46, stddev=0.01], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.82,0.82,0.86 0.90,0.95,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.03, stddev=0.0984], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.5 1.5,1.6,1.7,1.8,1.8 1.9,1.9,1.9,2.0), mean=1.68, stddev=0.136], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.2 2.2,2.2,2.4,2.5,2.6 2.6,2.7,2.7,2.8), mean=2.38, stddev=0.155], bias-{mean,stddev}=-0.05645,0.1275, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.96e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,2.0,2.1 2.1,2.2,2.4,2.8,2.9 3.0,3.1,3.1,3.4), mean=2.48, stddev=0.299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.35 0.36,0.37,0.39,0.42,0.43 0.44,0.45,0.45,0.48), mean=0.393, stddev=0.0293], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.008 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00991, stddev=0.0013], oderiv-count=623424
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.0 2.1,2.2,2.4,2.7,2.9 2.9,3.1,3.1,3.3), mean=2.46, stddev=0.295], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.2,5.9,5.9,6.2 6.5,6.7,7.4,8.0,8.5 8.6,9.6,9.6,11), mean=7.45, stddev=0.916]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, params-rms=0.2972, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.3,3.3 3.3,3.4,3.4,3.4,3.4 3.4,3.4,3.4,3.4), mean=3.36, stddev=0.0112], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.8,1.8,2.0 2.0,2.2,2.4,2.6,2.7 2.8,2.9,2.9,2.9), mean=2.36, stddev=0.246], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-4e-08 -3e-08,-2e-08,2e-09,2e-08,3e-08 3e-08,4e-08,4e-08,4e-08), mean=-1.5e-09, stddev=2.08e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.6,3.6,3.6,3.7 3.8,3.9,4.1,4.3,4.5 4.5,4.7,4.8,5.1), mean=4.11, stddev=0.298]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00523538, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2327, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.15,0.23,0.53 0.84,1.2,1.9,2.3,2.4 2.5,2.7,2.8,3.5), mean=1.76, stddev=0.614], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(13,13,13,14 14,14,15,15,16 17,17,17,18), mean=14.8, stddev=1.02], bias-{mean,stddev}=0.001214,0.323, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1545, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.77,0.90,1.1 1.1,1.2,1.2,1.3,1.3 1.4,1.4,1.4,1.6), mean=1.23, stddev=0.105], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.6,1.6,1.7,1.8,1.9 1.9,1.9,2.0,2.1), mean=1.74, stddev=0.119], bias-{mean,stddev}=-0.09761,0.2178, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.79e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.86,0.87,0.89 0.95,1.1,1.2,1.4,1.6 1.8,1.9,1.9,2.1), mean=1.27, stddev=0.264], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.37,0.40 0.41,0.44,0.48,0.53,0.56 0.60,0.62,0.65,0.69), mean=0.488, stddev=0.0604], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.004,0.005,0.005,0.005 0.006,0.006,0.007,0.01), mean=0.00482, stddev=0.000714], oderiv-count=604928
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.83,0.84,0.89 0.93,1.0,1.2,1.5,1.7 1.7,1.8,1.9,2.1), mean=1.26, stddev=0.264], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.6,1.7,1.9,2.1,2.1 2.2,2.3,2.5,3.7), mean=1.89, stddev=0.271]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00523538, l2-regularize=0.0005, max-change=0.75, params-rms=0.1516, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.72, stddev=0.00146], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.95,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.21, stddev=0.119], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-08,-7e-08,-4e-08,-4e-08 -3e-08,-2e-08,-1e-09,1e-08,3e-08 3e-08,4e-08,4e-08,5e-08), mean=-2.54e-09, stddev=2.33e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.8,1.9,2.0 2.0,2.0,2.1,2.2), mean=1.82, stddev=0.133]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0261769, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1839, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.07,0.24 0.63,0.91,1.4,1.8,2.0 2.2,2.3,2.4,3.3), mean=1.36, stddev=0.549], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,11,12,12,12 12,12,12,12), mean=11.7, stddev=0.221], bias-{mean,stddev}=3.069e-09,0.2516, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.00077, stddev=0.0012], oderiv-count=619072
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/144.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/145.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.25712 tdnnf2.linear:5.21928 tdnnf2.affine:5.84264 tdnnf3.linear:4.47729 tdnnf3.affine:5.09635 tdnnf4.linear:4.22988 tdnnf4.affine:5.00485 tdnnf5.linear:4.02609 tdnnf5.affine:4.61098 tdnnf6.linear:3.67782 tdnnf6.affine:4.10065 tdnnf7.linear:3.47038 tdnnf7.affine:3.90878 tdnnf8.linear:3.36626 tdnnf8.affine:3.85737 tdnnf9.linear:3.4806 tdnnf9.affine:3.92373 tdnnf10.linear:3.54404 tdnnf10.affine:4.16205 tdnnf11.linear:3.61011 tdnnf11.affine:4.33751 tdnnf12.linear:3.77711 tdnnf12.affine:4.55221 tdnnf13.linear:4.14105 tdnnf13.affine:5.07183 prefinal-l:3.68644 prefinal-chain.affine:5.4294 prefinal-chain.linear:5.25114 output.affine:15.79 prefinal-xent.affine:2.89243 prefinal-xent.linear:1.87237 output-xent.affine:13.2384 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.4815 tdnnf2.linear:16.8276 tdnnf2.affine:16.8039 tdnnf3.linear:14.5334 tdnnf3.affine:14.6727 tdnnf4.linear:13.6619 tdnnf4.affine:14.4797 tdnnf5.linear:12.9488 tdnnf5.affine:13.2194 tdnnf6.linear:12.1386 tdnnf6.affine:11.9413 tdnnf7.linear:12.3936 tdnnf7.affine:11.9684 tdnnf8.linear:12.8267 tdnnf8.affine:12.1238 tdnnf9.linear:13.1131 tdnnf9.affine:12.2589 tdnnf10.linear:13.6773 tdnnf10.affine:12.512 tdnnf11.linear:13.2214 tdnnf11.affine:12.2106 tdnnf12.linear:13.0138 tdnnf12.affine:12.1701 tdnnf13.linear:13.5333 tdnnf13.affine:12.533 prefinal-l:11.6906 prefinal-chain.affine:19.1136 prefinal-chain.linear:26.8967 output.affine:120.116 prefinal-xent.affine:14.239 prefinal-xent.linear:13.7229 output-xent.affine:94.8458 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.362365 tdnnf2.linear:0.309215 tdnnf2.affine:0.345891 tdnnf3.linear:0.30681 tdnnf3.affine:0.345402 tdnnf4.linear:0.308463 tdnnf4.affine:0.343277 tdnnf5.linear:0.309924 tdnnf5.affine:0.34615 tdnnf6.linear:0.301364 tdnnf6.affine:0.341541 tdnnf7.linear:0.279124 tdnnf7.affine:0.326068 tdnnf8.linear:0.261957 tdnnf8.affine:0.317691 tdnnf9.linear:0.264878 tdnnf9.affine:0.319664 tdnnf10.linear:0.258778 tdnnf10.affine:0.332256 tdnnf11.linear:0.273039 tdnnf11.affine:0.355805 tdnnf12.linear:0.290536 tdnnf12.affine:0.37394 tdnnf13.linear:0.305485 tdnnf13.affine:0.404597 prefinal-l:0.314704 prefinal-chain.affine:0.284261 prefinal-chain.linear:0.195705 output.affine:0.131629 prefinal-xent.affine:0.202557 prefinal-xent.linear:0.135882 output-xent.affine:0.139414 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 09:41:08 CST 2020, elapsed time 3 seconds
