# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/125.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/124.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/125.mdl 
# Started at Mon Feb 24 09:11:04 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/125.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1477, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.4 1.6,1.8,2.1,2.4,2.9 3.1,3.3,3.3,3.4), mean=2.14, stddev=0.485], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.64,0.69 0.78,0.90,1.5,2.0,2.4 2.7,2.9,3.0,3.6), mean=1.55, stddev=0.619], bias-{mean,stddev}=-0.1469,0.2084, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.68e+06, self-repaired-proportion=0.0632006, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.002,0.007 0.02,0.04,0.11,0.18,0.24 0.30,0.33,0.35,0.42), mean=0.122, stddev=0.0912], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.04 0.07,0.14,0.32,0.50,0.63 0.71,0.77,0.80,0.82), mean=0.334, stddev=0.204], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.06,0.09 0.11,0.15,0.18,0.20), mean=0.0502, stddev=0.0318], oderiv-count=1.31193e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0002,0.001,0.005 0.01,0.04,0.11,0.19,0.25 0.30,0.33,0.36,0.42), mean=0.122, stddev=0.0915], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.02,0.04 0.08,0.13,0.22,0.28,0.31 0.32,0.33,0.33,0.37), mean=0.204, stddev=0.0851]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.322751, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1358, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.2,2.2,2.2 2.2,2.2,2.2,2.2,2.2 2.2,2.2,2.2,2.2), mean=2.17, stddev=0.0061], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.68,0.72,0.80 0.86,0.98,1.1,1.2,1.2 1.3,1.4,1.5,1.5), mean=1.08, stddev=0.153], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1345, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.3 1.3,1.4,1.5,1.6,1.8 1.9,1.9,1.9,2.0), mean=1.51, stddev=0.172], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.4,1.4,1.5,1.6,1.7 1.7,1.8,1.8,1.9), mean=1.52, stddev=0.11], bias-{mean,stddev}=-0.1716,0.1065, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.22e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.4 1.7,1.8,2.0,2.2,2.3 2.4,2.5,2.5,2.8), mean=1.99, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.39 0.42,0.46,0.54,0.57,0.58 0.60,0.60,0.60,0.61), mean=0.52, stddev=0.0646], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.006,0.006,0.006), mean=0.00167, stddev=0.000926], oderiv-count=1.20537e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.3 1.6,1.8,2.0,2.2,2.3 2.4,2.4,2.4,2.7), mean=1.97, stddev=0.287], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,2.0,2.4 2.5,2.7,3.1,3.6,3.7 3.8,3.9,4.0,4.1), mean=3.1, stddev=0.496]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.322751, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1179, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.89, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.71,0.73,0.77 0.81,0.86,0.93,1.0,1.1 1.1,1.1,1.2,1.3), mean=0.938, stddev=0.101], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.99,1.1 1.1,1.2,1.3,1.4,1.5 1.6,1.7,1.7,1.7), mean=1.31, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.3,1.4,1.5 1.5,1.5,1.5,1.6), mean=1.32, stddev=0.104], bias-{mean,stddev}=-0.1563,0.07234, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.49e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.7 1.8,1.9,2.1,2.3,2.4 2.4,2.5,2.6,2.6), mean=2.06, stddev=0.249], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.41,0.44 0.45,0.47,0.52,0.55,0.56 0.57,0.59,0.59,0.60), mean=0.513, stddev=0.0438], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.002 0.002,0.003,0.004,0.006), mean=0.0012, stddev=0.000685], oderiv-count=1.08013e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.5,1.6 1.7,1.8,2.1,2.3,2.4 2.4,2.5,2.5,2.6), mean=2.06, stddev=0.255], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,2.1,2.2,2.6 2.7,2.9,3.3,3.6,3.9 4.0,4.0,4.5,4.8), mean=3.28, stddev=0.476]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.322751, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.109, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.74, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.71,0.72,0.74 0.76,0.80,0.86,0.93,0.96 0.99,1.0,1.1,1.2), mean=0.868, stddev=0.0809], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.117, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.70,0.88,1.1 1.2,1.2,1.3,1.4,1.5 1.6,1.6,1.6,1.7), mean=1.31, stddev=0.16], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.3,1.4,1.5 1.5,1.5,1.6,1.6), mean=1.32, stddev=0.109], bias-{mean,stddev}=-0.1822,0.1025, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.58e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.80,1.3,1.8 1.9,2.0,2.3,2.5,2.6 2.8,2.8,2.9,3.1), mean=2.24, stddev=0.339], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.42,0.43 0.44,0.46,0.51,0.55,0.56 0.57,0.58,0.58,0.61), mean=0.506, stddev=0.0447], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.003,0.003,0.007), mean=0.00094, stddev=0.00076], oderiv-count=9.9968e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.83,1.3,1.8 1.9,2.0,2.2,2.5,2.6 2.7,2.9,2.9,3.1), mean=2.22, stddev=0.353], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.2,2.0,2.9 3.0,3.2,3.6,4.0,4.3 4.6,4.8,5.0,5.6), mean=3.59, stddev=0.607]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.322751, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1032, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.65, stddev=0.00207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.64,0.68,0.69 0.71,0.75,0.82,0.88,0.93 0.95,0.99,1.0,1.0), mean=0.822, stddev=0.081], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1068, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.86,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.2, stddev=0.133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.97,1.0,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.2, stddev=0.111], bias-{mean,stddev}=-0.1582,0.07004, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.86e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.85,1.4,1.8 1.9,2.0,2.2,2.4,2.6 2.7,2.9,3.0,3.0), mean=2.21, stddev=0.325], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.42,0.44 0.46,0.47,0.51,0.54,0.55 0.56,0.56,0.57,0.59), mean=0.507, stddev=0.0366], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.002,0.005), mean=0.000876, stddev=0.000486], oderiv-count=8.83667e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.81,1.2,1.8 1.9,2.0,2.2,2.4,2.6 2.7,2.8,3.0,3.1), mean=2.19, stddev=0.346], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.9,2.8 2.9,3.0,3.4,3.8,4.1 4.4,4.8,4.8,5.7), mean=3.45, stddev=0.592]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.322751, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09792, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.57, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.62,0.64,0.66 0.68,0.71,0.77,0.84,0.87 0.91,0.94,0.97,1.0), mean=0.78, stddev=0.0777], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0954, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.72,0.79,0.90 0.94,0.99,1.1,1.2,1.2 1.3,1.3,1.3,1.5), mean=1.07, stddev=0.125], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.86,0.90 0.92,0.99,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.07, stddev=0.104], bias-{mean,stddev}=-0.1435,0.0632, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.37e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,1.1,1.2,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.91, stddev=0.261], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.43 0.45,0.47,0.51,0.53,0.54 0.54,0.56,0.56,0.58), mean=0.496, stddev=0.0394], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.001,0.002,0.003), mean=0.001, stddev=0.000265], oderiv-count=7.77888e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,1.0,1.1,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.3,2.4,2.6), mean=1.9, stddev=0.265], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,2.0,2.1,2.4 2.5,2.7,2.9,3.2,3.4 3.6,3.7,3.9,4.5), mean=2.93, stddev=0.397]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.322751, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09985, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.65,0.67 0.69,0.72,0.79,0.86,0.91 0.94,0.96,0.97,1.0), mean=0.795, stddev=0.0809], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09463, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.73,0.74,0.86 0.92,0.98,1.1,1.2,1.2 1.2,1.3,1.3,1.5), mean=1.06, stddev=0.121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.90,0.91 0.94,0.99,1.1,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.07, stddev=0.0978], bias-{mean,stddev}=-0.1312,0.06244, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.44e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,1.1,1.2,1.3 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.5,2.6), mean=1.87, stddev=0.259], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.41 0.44,0.46,0.49,0.51,0.53 0.54,0.56,0.56,0.57), mean=0.485, stddev=0.0399], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00103, stddev=0.000199], oderiv-count=6.74765e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.4 1.6,1.7,1.9,2.1,2.2 2.3,2.3,2.5,2.7), mean=1.88, stddev=0.262], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.1,2.5 2.6,2.7,2.9,3.3,3.5 3.8,4.0,4.0,4.6), mean=3.01, stddev=0.432]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.322751, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1032, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.65, stddev=0.00473], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.63,0.64,0.68 0.72,0.74,0.82,0.90,0.94 0.97,1.0,1.0,1.1), mean=0.821, stddev=0.0891], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09591, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.69,0.82 0.89,0.97,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.08, stddev=0.143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.84,0.86,0.91 0.94,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.08, stddev=0.107], bias-{mean,stddev}=-0.1076,0.07413, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.11e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.1,1.4 1.6,1.7,1.9,2.1,2.3 2.6,2.7,2.7,2.8), mean=1.92, stddev=0.322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.35,0.41 0.42,0.44,0.46,0.49,0.51 0.52,0.53,0.53,0.55), mean=0.46, stddev=0.041], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00103, stddev=0.000154], oderiv-count=5.9984e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.1,1.1,1.5 1.6,1.7,1.9,2.2,2.3 2.6,2.8,2.9,2.9), mean=1.95, stddev=0.345], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.3,2.4,2.6 2.7,2.9,3.2,3.6,3.9 4.3,4.6,4.8,4.9), mean=3.26, stddev=0.519]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.322751, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.67, stddev=0.00195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.62,0.65 0.70,0.75,0.82,0.93,0.97 1.0,1.0,1.1,1.1), mean=0.83, stddev=0.107], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09689, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.61,0.74 0.85,0.93,1.1,1.2,1.3 1.3,1.3,1.4,1.4), mean=1.08, stddev=0.177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.86,0.91 0.93,0.98,1.1,1.2,1.2 1.3,1.3,1.3,1.5), mean=1.09, stddev=0.12], bias-{mean,stddev}=-0.08849,0.06157, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.41e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.1,1.2,1.3 1.5,1.7,1.9,2.2,2.4 2.5,2.6,2.6,2.7), mean=1.93, stddev=0.337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.29,0.37 0.39,0.43,0.45,0.48,0.49 0.50,0.51,0.51,0.51), mean=0.448, stddev=0.0439], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.001,0.001 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00117, stddev=0.000158], oderiv-count=4.86432e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.1,1.2,1.3 1.5,1.7,1.9,2.2,2.4 2.5,2.7,2.7,2.9), mean=1.95, stddev=0.346], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.6,2.6,2.7 2.9,3.0,3.2,3.7,3.9 4.2,4.3,4.4,4.8), mean=3.34, stddev=0.437]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.322751, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1089, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.74, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.60,0.62,0.67 0.71,0.76,0.85,0.97,1.0 1.1,1.1,1.1,1.2), mean=0.862, stddev=0.126], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0994, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.60,0.66,0.74 0.83,0.92,1.1,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.11, stddev=0.199], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.86,0.90,0.92 0.96,0.99,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.12, stddev=0.138], bias-{mean,stddev}=-0.06871,0.04942, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.56e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.2,1.2,1.4 1.5,1.7,1.9,2.2,2.3 2.4,2.6,2.6,2.7), mean=1.94, stddev=0.319], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.31,0.35 0.37,0.40,0.44,0.47,0.48 0.48,0.49,0.49,0.51), mean=0.43, stddev=0.0437], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00137, stddev=0.000196], oderiv-count=3.94445e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.2,1.2,1.4 1.5,1.7,1.9,2.2,2.4 2.4,2.7,2.7,2.7), mean=1.95, stddev=0.328], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.7,2.8,2.9 3.0,3.1,3.5,4.0,4.3 4.6,5.0,5.1,5.2), mean=3.58, stddev=0.529]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.322751, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1052, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.68, stddev=0.004], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.62,0.64 0.68,0.72,0.82,0.95,1.0 1.1,1.1,1.1,1.2), mean=0.831, stddev=0.13], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09696, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.54,0.57,0.71 0.78,0.87,1.0,1.3,1.4 1.5,1.5,1.5,1.5), mean=1.07, stddev=0.235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.83,0.87,0.90 0.96,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.09, stddev=0.11], bias-{mean,stddev}=-0.08802,0.05146, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.87e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,1.1,1.1,1.2 1.3,1.4,1.6,1.8,1.9 2.1,2.2,2.2,2.3), mean=1.63, stddev=0.248], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.24,0.31 0.33,0.35,0.40,0.43,0.45 0.45,0.47,0.48,0.49), mean=0.394, stddev=0.0501], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00191, stddev=0.000289], oderiv-count=2.84653e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,1.1,1.2,1.3 1.4,1.5,1.7,1.8,2.0 2.2,2.2,2.2,2.4), mean=1.67, stddev=0.251], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.6,2.7 2.9,3.1,3.7,4.2,4.6 4.8,5.0,5.1,5.2), mean=3.68, stddev=0.645]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.322751, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1017, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.00309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.61,0.63 0.65,0.69,0.78,0.92,0.99 1.0,1.1,1.1,1.1), mean=0.804, stddev=0.127], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0948, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,0.60,0.64 0.68,0.77,0.99,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.04, stddev=0.272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.86,0.88 0.93,0.96,1.1,1.2,1.2 1.3,1.3,1.3,1.6), mean=1.07, stddev=0.124], bias-{mean,stddev}=-0.09603,0.07455, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.23e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.84,0.86,0.97 1.1,1.1,1.4,1.6,1.7 1.8,1.9,2.0,2.2), mean=1.39, stddev=0.259], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.21 0.23,0.28,0.36,0.42,0.45 0.47,0.48,0.49,0.55), mean=0.351, stddev=0.0813], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003,0.004 0.004,0.004,0.004,0.005), mean=0.00294, stddev=0.000476], oderiv-count=1.92576e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.84,0.87,0.99 1.1,1.2,1.4,1.6,1.8 1.8,2.0,2.1,2.3), mean=1.42, stddev=0.272], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.7,2.7,2.9 3.0,3.2,3.8,4.4,4.6 4.9,5.2,5.2,5.7), mean=3.84, stddev=0.647]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.322751, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1036, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0.00345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.62,0.66 0.68,0.73,0.80,0.92,0.99 1.0,1.1,1.1,1.2), mean=0.82, stddev=0.118], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09557, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.58,0.64 0.68,0.77,1.0,1.3,1.5 1.5,1.5,1.5,1.6), mean=1.04, stddev=0.287], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.90,0.93,0.94 0.98,0.99,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.08, stddev=0.0955], bias-{mean,stddev}=-0.1184,0.1024, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.82,0.83,0.88 0.93,1.1,1.3,1.5,1.6 1.7,1.8,1.8,1.8), mean=1.3, stddev=0.256], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.16 0.18,0.21,0.32,0.42,0.45 0.47,0.49,0.50,0.54), mean=0.316, stddev=0.102], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.006,0.007,0.008 0.008,0.01,0.01,0.01), mean=0.00596, stddev=0.00115], oderiv-count=612544
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.84,0.86,0.92 0.98,1.1,1.4,1.6,1.7 1.8,1.8,1.9,2.0), mean=1.36, stddev=0.267], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.9,3.0,3.0,3.2 3.5,3.9,4.5,5.1,5.5 5.7,6.0,6.0,7.3), mean=4.52, stddev=0.765]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.322751, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.005, max-change=0.75, params-rms=0.1275, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.44, stddev=0.0144], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.80,0.80,0.84 0.87,0.93,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.01, stddev=0.103], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.5,1.6,1.7,1.8,1.9 1.9,2.0,2.0,2.1), mean=1.73, stddev=0.136], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.2,2.2 2.3,2.3,2.4,2.6,2.6 2.7,2.7,2.8,2.8), mean=2.45, stddev=0.145], bias-{mean,stddev}=-0.03223,0.1284, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.37e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.9,1.9 2.0,2.1,2.3,2.6,2.7 2.8,3.0,3.0,3.1), mean=2.35, stddev=0.276], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.35 0.36,0.37,0.39,0.42,0.43 0.44,0.45,0.46,0.47), mean=0.393, stddev=0.0289], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0102, stddev=0.00127], oderiv-count=615808
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.0,2.0,2.0 2.1,2.1,2.4,2.6,2.8 3.0,3.2,3.2,3.2), mean=2.43, stddev=0.297], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.2,5.1,5.1,5.6 6.0,6.2,6.8,7.5,7.9 8.9,9.0,9.0,12), mean=6.92, stddev=0.966]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, params-rms=0.288, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.2,3.2,3.2,3.2 3.2,3.3,3.3,3.3,3.3 3.3,3.3,3.3,3.3), mean=3.26, stddev=0.0084], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.8,1.9 2.0,2.1,2.3,2.5,2.6 2.6,2.8,2.8,2.8), mean=2.29, stddev=0.242], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-4e-08 -4e-08,-2e-08,-9e-10,1e-08,2e-08 2e-08,3e-08,3e-08,5e-08), mean=-4.95e-09, stddev=2.21e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.5,3.5,3.6,3.6 3.7,3.8,3.9,4.1,4.3 4.3,4.5,4.5,5.1), mean=3.98, stddev=0.269]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00605955, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2262, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.14,0.22,0.50 0.79,1.2,1.8,2.2,2.4 2.5,2.6,2.7,3.4), mean=1.7, stddev=0.609], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,13 13,14,14,15,15 16,17,17,17), mean=14.3, stddev=0.972], bias-{mean,stddev}=0.00113,0.3024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1583, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.85,0.89,1.1 1.2,1.2,1.3,1.3,1.4 1.4,1.4,1.4,1.7), mean=1.26, stddev=0.108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.7,1.7,1.8,1.9,1.9 2.0,2.0,2.0,2.2), mean=1.79, stddev=0.121], bias-{mean,stddev}=-0.07688,0.2258, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.74,0.78,0.83 0.88,0.92,1.1,1.4,1.5 1.7,1.7,1.9,2.0), mean=1.19, stddev=0.263], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.39 0.41,0.43,0.47,0.53,0.57 0.58,0.60,0.63,0.67), mean=0.482, stddev=0.0609], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.005,0.005,0.006 0.006,0.006,0.007,0.01), mean=0.00505, stddev=0.000754], oderiv-count=616896
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.77,0.80,0.84 0.88,0.94,1.2,1.4,1.5 1.6,1.8,1.8,2.0), mean=1.19, stddev=0.262], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.4 1.5,1.6,1.8,2.0,2.1 2.1,2.2,2.3,2.9), mean=1.81, stddev=0.233]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00605955, l2-regularize=0.0005, max-change=0.75, params-rms=0.1535, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.74, stddev=0.00138], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.22, stddev=0.118], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-3e-08 -2e-08,-1e-08,-1e-09,2e-08,2e-08 3e-08,4e-08,4e-08,5e-08), mean=1.29e-09, stddev=1.88e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.7,1.7,1.8,1.9,2.0 2.0,2.1,2.1,2.1), mean=1.85, stddev=0.116]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0302978, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.07,0.25 0.66,0.96,1.4,1.9,2.1 2.2,2.4,2.4,3.4), mean=1.39, stddev=0.557], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 12,12,12,12,12 12,12,12,12), mean=11.9, stddev=0.212], bias-{mean,stddev}=-2.184e-09,0.2349, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000772, stddev=0.0012], oderiv-count=628864
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/124.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/125.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.45768 tdnnf2.linear:5.27723 tdnnf2.affine:5.9932 tdnnf3.linear:4.46159 tdnnf3.affine:5.08547 tdnnf4.linear:4.12169 tdnnf4.affine:5.15977 tdnnf5.linear:3.93306 tdnnf5.affine:4.65102 tdnnf6.linear:3.62028 tdnnf6.affine:4.13122 tdnnf7.linear:3.4881 tdnnf7.affine:3.98139 tdnnf8.linear:3.33468 tdnnf8.affine:3.82163 tdnnf9.linear:3.33727 tdnnf9.affine:3.89692 tdnnf10.linear:3.4706 tdnnf10.affine:4.11363 tdnnf11.linear:3.54873 tdnnf11.affine:4.3283 tdnnf12.linear:3.71911 tdnnf12.affine:4.51838 tdnnf13.linear:4.08582 tdnnf13.affine:5.02157 prefinal-l:3.30686 prefinal-chain.affine:5.48627 prefinal-chain.linear:4.75015 output.affine:15.3476 prefinal-xent.affine:3.0296 prefinal-xent.linear:1.91052 output-xent.affine:13.4454 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.9488 tdnnf2.linear:17.3887 tdnnf2.affine:17.3673 tdnnf3.linear:15.0903 tdnnf3.affine:15.0714 tdnnf4.linear:13.9524 tdnnf4.affine:15.1586 tdnnf5.linear:13.2077 tdnnf5.affine:13.8127 tdnnf6.linear:12.5342 tdnnf6.affine:12.34 tdnnf7.linear:12.7803 tdnnf7.affine:12.2243 tdnnf8.linear:13.2079 tdnnf8.affine:12.3657 tdnnf9.linear:13.3947 tdnnf9.affine:12.4616 tdnnf10.linear:13.9328 tdnnf10.affine:12.7591 tdnnf11.linear:13.46 tdnnf11.affine:12.4639 tdnnf12.linear:13.0213 tdnnf12.affine:12.2116 tdnnf13.linear:13.2595 tdnnf13.affine:12.3604 prefinal-l:11.5417 prefinal-chain.affine:19.6779 prefinal-chain.linear:26.0664 output.affine:116.623 prefinal-xent.affine:14.5776 prefinal-xent.linear:13.8967 output-xent.affine:96.4172 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.339593 tdnnf2.linear:0.302653 tdnnf2.affine:0.342277 tdnnf3.linear:0.294123 tdnnf3.affine:0.334645 tdnnf4.linear:0.293669 tdnnf4.affine:0.339253 tdnnf5.linear:0.297074 tdnnf5.affine:0.333701 tdnnf6.linear:0.288345 tdnnf6.affine:0.334212 tdnnf7.linear:0.272724 tdnnf7.affine:0.326579 tdnnf8.linear:0.252156 tdnnf8.affine:0.309178 tdnnf9.linear:0.249522 tdnnf9.affine:0.31326 tdnnf10.linear:0.24891 tdnnf10.affine:0.322975 tdnnf11.linear:0.264113 tdnnf11.affine:0.34738 tdnnf12.linear:0.286372 tdnnf12.affine:0.371763 tdnnf13.linear:0.309755 tdnnf13.affine:0.409345 prefinal-l:0.286398 prefinal-chain.affine:0.278641 prefinal-chain.linear:0.182373 output.affine:0.131841 prefinal-xent.affine:0.207656 prefinal-xent.linear:0.137203 output-xent.affine:0.139334 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 09:11:07 CST 2020, elapsed time 3 seconds
