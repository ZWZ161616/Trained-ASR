# nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/229.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/230.mdl 
# Started at Mon Feb 24 11:47:10 CST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/229.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/230.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.04991, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.53,0.55,0.59 0.60,0.65,0.71,0.83,0.89 0.92,0.96,1.0,1.0), mean=0.732, stddev=0.111], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.24,0.25 0.26,0.28,0.51,0.75,0.82 0.87,0.89,0.92,1.0), mean=0.523, stddev=0.214], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.17 0.21,0.30,0.57,0.97,1.2 1.3,1.4,1.4,1.6), mean=0.644, stddev=0.365], bias-{mean,stddev}=0.003546,0.03279, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.27619, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03217, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.46,0.46 0.48,0.49,0.51,0.54,0.55 0.55,0.58,0.58,0.62), mean=0.514, stddev=0.0308], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.22,0.23,0.25,0.28,0.30 0.31,0.33,0.34,0.35), mean=0.255, stddev=0.0339], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.22 0.25,0.30,0.45,0.66,0.74 0.79,0.83,0.84,0.87), mean=0.481, stddev=0.184], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0365, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.35 0.36,0.38,0.41,0.44,0.46 0.47,0.48,0.50,0.52), mean=0.411, stddev=0.0379], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.37 0.37,0.39,0.41,0.43,0.45 0.45,0.47,0.47,0.50), mean=0.412, stddev=0.029], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.02 0.05,0.10,0.28,0.55,0.70 0.77,0.86,0.86,0.94), mean=0.334, stddev=0.243], bias-{mean,stddev}=-0.001561,0.01505, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.33e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-2.1,-1.6,-1.2 -0.59,0.34,1.6,3.0,3.7 4.1,4.5,4.8,5.4), mean=1.57, stddev=1.61], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.52,-0.33,-0.33,-0.27 0.005,0.11,0.48,0.77,1.0 1.2,1.5,1.6,2.2), mean=0.483, stddev=0.449]
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.27619, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02721, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.37,0.38 0.39,0.41,0.43,0.46,0.48 0.48,0.49,0.54,0.59), mean=0.434, stddev=0.0387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.17 0.18,0.19,0.21,0.24,0.25 0.26,0.27,0.27,0.30), mean=0.216, stddev=0.0275], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.18,0.19 0.21,0.26,0.39,0.56,0.63 0.66,0.70,0.73,0.76), mean=0.406, stddev=0.158], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03478, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.32,0.33,0.33 0.34,0.36,0.39,0.42,0.43 0.44,0.46,0.46,0.49), mean=0.392, stddev=0.0349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.35 0.36,0.37,0.39,0.41,0.43 0.44,0.45,0.45,0.47), mean=0.393, stddev=0.0271], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.006,0.03 0.05,0.09,0.28,0.54,0.66 0.74,0.80,0.80,0.84), mean=0.319, stddev=0.23], bias-{mean,stddev}=0.001173,0.01189, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.71e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.5,-1.4,-0.64 -0.07,0.68,1.7,3.1,4.0 4.3,5.7,5.7,6.3), mean=1.92, stddev=1.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.50,-0.50,-0.14 -0.02,0.11,0.44,0.67,0.76 0.87,1.1,1.1,1.5), mean=0.408, stddev=0.352]
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.27619, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02561, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.35,0.35 0.36,0.38,0.40,0.44,0.46 0.47,0.47,0.52,0.56), mean=0.408, stddev=0.041], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.16 0.17,0.18,0.20,0.23,0.24 0.24,0.25,0.26,0.28), mean=0.203, stddev=0.0245], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.16,0.18 0.20,0.23,0.35,0.52,0.59 0.64,0.67,0.70,0.73), mean=0.38, stddev=0.152], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03264, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.32 0.33,0.35,0.36,0.39,0.41 0.42,0.45,0.46,0.48), mean=0.368, stddev=0.0337], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.32,0.33 0.33,0.34,0.37,0.39,0.41 0.41,0.43,0.43,0.48), mean=0.368, stddev=0.0292], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.005,0.008,0.02 0.04,0.10,0.26,0.50,0.62 0.69,0.76,0.79,0.81), mean=0.299, stddev=0.216], bias-{mean,stddev}=0.0002353,0.01084, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.003,0.004 0.006,0.007,0.01,0.02), mean=0.00183, stddev=0.00249], oderiv-count=140800
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.27619, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02375, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.35 0.35,0.36,0.37,0.40,0.42 0.42,0.43,0.43,0.45), mean=0.379, stddev=0.0265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.16,0.17,0.19,0.21,0.22 0.23,0.23,0.23,0.25), mean=0.189, stddev=0.0214], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.16 0.18,0.22,0.34,0.49,0.54 0.60,0.61,0.63,0.65), mean=0.354, stddev=0.138], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02739, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.26,0.27 0.28,0.29,0.31,0.33,0.34 0.35,0.36,0.36,0.39), mean=0.309, stddev=0.0256], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.28 0.28,0.29,0.31,0.32,0.33 0.35,0.35,0.36,0.37), mean=0.309, stddev=0.0207], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.007,0.02 0.04,0.08,0.22,0.42,0.52 0.58,0.65,0.65,0.69), mean=0.252, stddev=0.18], bias-{mean,stddev}=-0.0005192,0.006945, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.001,0.002,0.002 0.003,0.003,0.004,0.01), mean=0.00118, stddev=0.00133], oderiv-count=284544
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.27619, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.29,0.31 0.31,0.32,0.34,0.36,0.37 0.38,0.39,0.40,0.41), mean=0.341, stddev=0.0243], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.14 0.15,0.15,0.17,0.19,0.19 0.20,0.21,0.21,0.22), mean=0.17, stddev=0.0181], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.14,0.15 0.17,0.20,0.30,0.43,0.48 0.52,0.54,0.55,0.61), mean=0.32, stddev=0.122], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02419, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.23 0.24,0.25,0.27,0.29,0.30 0.31,0.32,0.32,0.35), mean=0.273, stddev=0.0233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.23,0.24 0.25,0.26,0.27,0.29,0.30 0.30,0.31,0.32,0.34), mean=0.273, stddev=0.0203], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.002,0.004,0.02 0.03,0.07,0.19,0.37,0.46 0.51,0.55,0.58,0.61), mean=0.222, stddev=0.16], bias-{mean,stddev}=9.613e-05,0.006751, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.003,0.004 0.004,0.005,0.005,0.006), mean=0.00177, stddev=0.00145], oderiv-count=126144
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.27619, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02031, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.28,0.30 0.30,0.31,0.32,0.34,0.35 0.35,0.36,0.36,0.37), mean=0.324, stddev=0.0193], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.13 0.14,0.15,0.16,0.18,0.18 0.19,0.20,0.20,0.23), mean=0.162, stddev=0.0179], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.14 0.15,0.19,0.29,0.41,0.46 0.49,0.52,0.53,0.54), mean=0.304, stddev=0.115], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02324, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.23,0.24,0.26,0.28,0.29 0.30,0.32,0.32,0.35), mean=0.262, stddev=0.0269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.23,0.23 0.24,0.25,0.26,0.28,0.29 0.30,0.30,0.30,0.32), mean=0.262, stddev=0.019], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.006,0.01 0.03,0.06,0.18,0.35,0.44 0.50,0.56,0.58,0.60), mean=0.212, stddev=0.156], bias-{mean,stddev}=0.0003178,0.005886, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.27619, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01953, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.28 0.28,0.29,0.31,0.33,0.34 0.34,0.34,0.35,0.35), mean=0.312, stddev=0.0206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.16,0.17,0.18 0.18,0.19,0.20,0.22), mean=0.155, stddev=0.0193], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.12,0.14 0.15,0.18,0.27,0.40,0.44 0.48,0.51,0.52,0.53), mean=0.291, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02249, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.21 0.22,0.23,0.25,0.28,0.29 0.29,0.30,0.30,0.31), mean=0.253, stddev=0.0245], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.22,0.22 0.23,0.24,0.25,0.27,0.28 0.28,0.29,0.29,0.30), mean=0.254, stddev=0.0194], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.003,0.004,0.01 0.03,0.06,0.17,0.35,0.43 0.48,0.53,0.54,0.60), mean=0.204, stddev=0.152], bias-{mean,stddev}=0.0005204,0.005017, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.27619, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01998, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.29 0.30,0.30,0.32,0.33,0.34 0.35,0.35,0.35,0.35), mean=0.319, stddev=0.0187], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.12 0.13,0.14,0.16,0.18,0.18 0.19,0.20,0.21,0.22), mean=0.159, stddev=0.0203], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.14 0.15,0.18,0.28,0.41,0.46 0.49,0.52,0.53,0.53), mean=0.297, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02358, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.21,0.22 0.23,0.24,0.26,0.29,0.30 0.31,0.32,0.32,0.34), mean=0.265, stddev=0.0276], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.23 0.24,0.24,0.27,0.28,0.29 0.30,0.31,0.31,0.31), mean=0.266, stddev=0.0208], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.002,0.005,0.01 0.03,0.06,0.18,0.35,0.46 0.51,0.57,0.58,0.61), mean=0.213, stddev=0.161], bias-{mean,stddev}=5.737e-05,0.004849, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.64e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.36,-0.29,-0.27,0.06 0.35,0.72,1.5,2.3,2.6 3.2,3.8,3.8,3.9), mean=1.54, stddev=0.944], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.17 0.22,0.30,0.43,0.54,0.64 0.67,0.76,0.79,0.83), mean=0.431, stddev=0.155]
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.27619, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02063, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.28 0.30,0.31,0.33,0.35,0.36 0.38,0.38,0.38,0.38), mean=0.329, stddev=0.0253], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.13,0.14,0.16,0.18,0.19 0.20,0.21,0.22,0.22), mean=0.163, stddev=0.0234], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.13,0.13 0.15,0.18,0.29,0.42,0.48 0.52,0.55,0.57,0.60), mean=0.305, stddev=0.126], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02472, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.24 0.25,0.26,0.28,0.30,0.32 0.33,0.33,0.34,0.35), mean=0.278, stddev=0.0281], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.23,0.24 0.25,0.26,0.28,0.29,0.31 0.32,0.32,0.33,0.33), mean=0.279, stddev=0.0226], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.008,0.01 0.03,0.06,0.19,0.38,0.46 0.54,0.59,0.60,0.64), mean=0.224, stddev=0.167], bias-{mean,stddev}=0.0003399,0.005453, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.27619, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02087, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.29 0.30,0.31,0.34,0.35,0.37 0.37,0.38,0.38,0.40), mean=0.333, stddev=0.0252], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.12,0.13 0.14,0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.23), mean=0.165, stddev=0.0221], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.14 0.16,0.18,0.29,0.42,0.49 0.51,0.57,0.58,0.59), mean=0.309, stddev=0.128], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02591, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.24,0.24,0.25 0.26,0.27,0.29,0.32,0.33 0.34,0.35,0.36,0.38), mean=0.291, stddev=0.0319], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.26 0.26,0.27,0.29,0.31,0.32 0.33,0.34,0.34,0.35), mean=0.292, stddev=0.0229], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.006,0.02 0.03,0.07,0.20,0.39,0.50 0.55,0.61,0.63,0.66), mean=0.236, stddev=0.174], bias-{mean,stddev}=0.000571,0.007512, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.62e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.55,-0.19,0.22,0.35 0.56,0.74,1.3,1.8,2.1 2.2,2.3,2.3,2.8), mean=1.28, stddev=0.598], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.06,0.14 0.20,0.27,0.39,0.52,0.59 0.63,0.66,0.66,0.72), mean=0.392, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.003,0.005,0.006 0.007,0.007,0.008,0.008), mean=0.00313, stddev=0.00246], oderiv-count=55616
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.27619, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02229, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.31,0.32 0.32,0.33,0.35,0.38,0.38 0.39,0.41,0.43,0.43), mean=0.356, stddev=0.0266], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.13,0.14 0.15,0.16,0.18,0.20,0.20 0.21,0.22,0.23,0.24), mean=0.177, stddev=0.0228], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.14 0.16,0.19,0.31,0.46,0.52 0.56,0.58,0.61,0.62), mean=0.329, stddev=0.137], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02756, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.21,0.22,0.24 0.26,0.28,0.31,0.34,0.36 0.36,0.38,0.38,0.39), mean=0.31, stddev=0.0378], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.26,0.27 0.28,0.29,0.31,0.33,0.34 0.35,0.36,0.37,0.40), mean=0.311, stddev=0.0251], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.005,0.006,0.02 0.03,0.07,0.21,0.41,0.54 0.60,0.67,0.67,0.74), mean=0.249, stddev=0.187], bias-{mean,stddev}=-0.0006068,0.007986, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.28e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.9,-4.5,-4.4,-3.1 -2.3,-1.0,1.7,3.3,4.9 5.7,8.1,8.6,9.7), mean=1.54, stddev=2.91], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-2.5,-1.8,-1.2 -0.94,-0.47,0.31,0.93,1.2 1.6,2.0,2.2,2.6), mean=0.25, stddev=0.926], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.005,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0055, stddev=0.00563], oderiv-count=16320
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.27619, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02466, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.35 0.36,0.37,0.39,0.42,0.42 0.43,0.43,0.44,0.45), mean=0.394, stddev=0.025], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.16,0.17,0.20,0.22,0.23 0.24,0.25,0.25,0.26), mean=0.196, stddev=0.0253], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.18,0.22,0.34,0.50,0.58 0.61,0.64,0.68,0.71), mean=0.365, stddev=0.149], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0313, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.29 0.30,0.31,0.35,0.38,0.40 0.41,0.43,0.44,0.46), mean=0.352, stddev=0.0396], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.31,0.31 0.32,0.33,0.35,0.37,0.38 0.40,0.40,0.41,0.45), mean=0.353, stddev=0.0264], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.003,0.006,0.02 0.04,0.08,0.23,0.47,0.61 0.67,0.75,0.78,0.84), mean=0.284, stddev=0.212], bias-{mean,stddev}=-0.001989,0.0108, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.09e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-73,-68,-66,-41 -26,-14,4.0,17,29 36,43,57,76), mean=1.42, stddev=23.8], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-21,-14,-13,-10 -7.1,-3.9,2.0,7.8,11 13,17,18,21), mean=2.21, stddev=7.19], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.008,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00728, stddev=0.00617], oderiv-count=17408
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.27619, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.005, max-change=0.75, params-rms=0.04591, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.47,0.49,0.52,0.55,0.56 0.57,0.58,0.58,0.58), mean=0.518, stddev=0.0341], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.31,0.33,0.37,0.40,0.41 0.43,0.44,0.44,0.47), mean=0.365, stddev=0.039], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.17 0.20,0.27,0.45,0.67,0.76 0.80,0.84,0.86,0.96), mean=0.475, stddev=0.21], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.05005, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.33 0.35,0.36,0.40,0.43,0.45 0.46,0.49,0.50,0.54), mean=0.398, stddev=0.0437], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.50,0.50 0.51,0.53,0.56,0.60,0.61 0.62,0.63,0.63,0.65), mean=0.565, stddev=0.0386], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.18 0.22,0.29,0.50,0.74,0.82 0.88,0.92,0.94,0.98), mean=0.519, stddev=0.227], bias-{mean,stddev}=-0.0005627,0.01602, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.18e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-33,-24,-22,-18 -11,-4.5,2.8,15,21 23,27,29,40), mean=4.5, stddev=12.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.8,-3.8,-3.3,-1.9 -1.0,-0.31,0.72,1.9,3.0 3.7,4.5,4.7,6.5), mean=0.891, stddev=1.77]
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, params-rms=0.05255, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.52,0.53 0.53,0.55,0.58,0.63,0.65 0.67,0.68,0.71,0.71), mean=0.593, stddev=0.0469], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.32,0.34 0.36,0.38,0.42,0.46,0.48 0.50,0.52,0.53,0.54), mean=0.418, stddev=0.048], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.16,0.20 0.26,0.32,0.52,0.75,0.85 0.91,0.97,1.0,1.1), mean=0.547, stddev=0.233], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00283323, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.02405, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.003,0.005,0.01 0.02,0.04,0.11,0.25,0.34 0.40,0.46,0.50,0.68), mean=0.147, stddev=0.124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.5,1.5,1.6,1.6 1.6,1.6,1.7,1.8), mean=1.53, stddev=0.0692], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.49,0.91 1.0,1.1,1.5,1.9,2.0 2.1,2.1,2.1,2.2), mean=1.47, stddev=0.409], bias-{mean,stddev}=3.634e-07,0.04002, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.0276, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.26,0.27,0.28,0.29), mean=0.219, stddev=0.0251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.28 0.28,0.29,0.31,0.33,0.34 0.34,0.35,0.36,0.36), mean=0.312, stddev=0.021], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.11 0.13,0.16,0.28,0.40,0.46 0.48,0.50,0.53,0.55), mean=0.287, stddev=0.123], bias-{mean,stddev}=-0.001298,0.01058, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.004,0.008,0.01 0.01,0.01,0.01,0.01), mean=0.00449, stddev=0.00414], oderiv-count=9792
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00283323, l2-regularize=0.0005, max-change=0.75, params-rms=0.01836, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.23,0.23,0.24,0.24), mean=0.207, stddev=0.013], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.15,0.16,0.17 0.17,0.19,0.19,0.20), mean=0.146, stddev=0.0186], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.08 0.09,0.11,0.18,0.26,0.30 0.33,0.35,0.36,0.37), mean=0.191, stddev=0.0815], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0141661, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.02046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.002,0.007,0.02 0.03,0.05,0.11,0.21,0.27 0.32,0.37,0.40,0.59), mean=0.131, stddev=0.0977], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.3,1.3,1.4 1.4,1.4,1.4,1.4), mean=1.3, stddev=0.052], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.72,0.74,0.77 0.84,0.94,1.3,1.6,1.7 1.7,1.7,1.8,1.9), mean=1.26, stddev=0.305], bias-{mean,stddev}=-7.91e-09,0.01528, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0003,0.002,0.003 0.004,0.006,0.007,0.05), mean=0.00104, stddev=0.0017], oderiv-count=27200

LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.3845 tdnnf2.linear:4.11827 tdnnf2.affine:4.67539 tdnnf3.linear:3.48295 tdnnf3.affine:4.4543 tdnnf4.linear:3.27747 tdnnf4.affine:4.18028 tdnnf5.linear:3.04035 tdnnf5.affine:3.50731 tdnnf6.linear:2.73751 tdnnf6.affine:3.09677 tdnnf7.linear:2.59984 tdnnf7.affine:2.9761 tdnnf8.linear:2.4997 tdnnf8.affine:2.87882 tdnnf9.linear:2.55708 tdnnf9.affine:3.01862 tdnnf10.linear:2.64121 tdnnf10.affine:3.16512 tdnnf11.linear:2.67089 tdnnf11.affine:3.31784 tdnnf12.linear:2.85333 tdnnf12.affine:3.5289 tdnnf13.linear:3.1565 tdnnf13.affine:4.00867 prefinal-l:4.15543 prefinal-chain.affine:4.53344 prefinal-chain.linear:4.75641 output.affine:12.4925 prefinal-xent.affine:2.50129 prefinal-xent.linear:1.66167 output-xent.affine:10.4489 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.7737 tdnnf2.linear:15.593 tdnnf2.affine:15.7347 tdnnf3.linear:13.9833 tdnnf3.affine:15.1617 tdnnf4.linear:13.2112 tdnnf4.affine:14.2538 tdnnf5.linear:12.1792 tdnnf5.affine:12.0784 tdnnf6.linear:11.5912 tdnnf6.affine:11.064 tdnnf7.linear:11.6845 tdnnf7.affine:11.069 tdnnf8.linear:12.0947 tdnnf8.affine:11.1165 tdnnf9.linear:12.6133 tdnnf9.affine:11.5062 tdnnf10.linear:12.7023 tdnnf10.affine:11.4852 tdnnf11.linear:12.0754 tdnnf11.affine:11.1863 tdnnf12.linear:11.708 tdnnf12.affine:11.1597 tdnnf13.linear:12.4284 tdnnf13.affine:11.9553 prefinal-l:12.2586 prefinal-chain.affine:18.1006 prefinal-chain.linear:25.9536 output.affine:118.389 prefinal-xent.affine:13.2695 prefinal-xent.linear:13.1107 output-xent.affine:97.9961 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.337892 tdnnf2.linear:0.263166 tdnnf2.affine:0.296749 tdnnf3.linear:0.248611 tdnnf3.affine:0.294431 tdnnf4.linear:0.247907 tdnnf4.affine:0.29314 tdnnf5.linear:0.248823 tdnnf5.affine:0.290381 tdnnf6.linear:0.235673 tdnnf6.affine:0.279475 tdnnf7.linear:0.221861 tdnnf7.affine:0.268275 tdnnf8.linear:0.206209 tdnnf8.affine:0.258597 tdnnf9.linear:0.202319 tdnnf9.affine:0.261699 tdnnf10.linear:0.207264 tdnnf10.affine:0.275311 tdnnf11.linear:0.220454 tdnnf11.affine:0.295521 tdnnf12.linear:0.243105 tdnnf12.affine:0.31506 tdnnf13.linear:0.252794 tdnnf13.affine:0.33472 prefinal-l:0.337514 prefinal-chain.affine:0.249668 prefinal-chain.linear:0.182205 output.affine:0.105304 prefinal-xent.affine:0.187633 prefinal-xent.linear:0.12638 output-xent.affine:0.106587 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=2 threads=1
# Ended (code 0) at Mon Feb 24 11:47:12 CST 2020, elapsed time 2 seconds
