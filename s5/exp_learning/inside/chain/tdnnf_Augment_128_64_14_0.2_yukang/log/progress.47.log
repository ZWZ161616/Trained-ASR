# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/47.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/46.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/47.mdl 
# Started at Mon Feb 24 06:51:22 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/47.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1338, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.89,0.89,1.2 1.4,1.6,1.9,2.2,2.6 2.9,3.1,3.1,3.3), mean=1.92, stddev=0.49], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.52,0.55,0.61 0.68,0.79,1.4,1.8,2.2 2.4,2.6,2.7,3.3), mean=1.4, stddev=0.568], bias-{mean,stddev}=-0.1087,0.2107, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.2e+06, self-repaired-proportion=0.101905, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.002,0.004 0.006,0.02,0.11,0.19,0.27 0.32,0.35,0.36,0.40), mean=0.128, stddev=0.0979], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.04 0.06,0.09,0.36,0.56,0.70 0.77,0.80,0.80,0.84), mean=0.358, stddev=0.229], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.09 0.10,0.11,0.12,0.18), mean=0.0474, stddev=0.0266], oderiv-count=1.29585e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0004,0.0009,0.002 0.007,0.02,0.12,0.20,0.27 0.31,0.34,0.35,0.38), mean=0.127, stddev=0.0974], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.009,0.03 0.04,0.09,0.21,0.27,0.31 0.32,0.33,0.35,0.36), mean=0.194, stddev=0.0946]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1419, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3), mean=2.27, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.51,0.57,0.64 0.84,1.0,1.2,1.3,1.3 1.4,1.4,1.4,1.6), mean=1.12, stddev=0.2], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1335, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.5,1.6,1.7 1.8,1.9,2.0,2.2), mean=1.5, stddev=0.181], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.4,1.4,1.5,1.6,1.6 1.7,1.7,1.8,1.8), mean=1.51, stddev=0.111], bias-{mean,stddev}=-0.1315,0.08833, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.69e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.4,1.5,1.7,1.9,2.1 2.1,2.2,2.2,2.3), mean=1.73, stddev=0.235], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.38,0.39 0.40,0.43,0.51,0.56,0.58 0.59,0.60,0.61,0.61), mean=0.503, stddev=0.0661], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.006), mean=0.00163, stddev=0.000603], oderiv-count=1.163e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.4,1.5,1.7,1.9,2.0 2.1,2.3,2.3,2.4), mean=1.73, stddev=0.244], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.8,2.0 2.2,2.4,2.8,3.2,3.4 3.5,3.7,3.9,4.1), mean=2.81, stddev=0.48]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1244, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.99, stddev=0.00891], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.72,0.76,0.82 0.86,0.91,0.99,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.989, stddev=0.103], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1175, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,1.0,1.0,1.1 1.1,1.2,1.3,1.4,1.5 1.6,1.7,1.8,1.9), mean=1.32, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.5 1.5,1.5,1.5,1.6), mean=1.33, stddev=0.0978], bias-{mean,stddev}=-0.1039,0.04969, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.98e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.7 1.7,1.8,1.9,2.1,2.3 2.3,2.4,2.5,2.5), mean=1.96, stddev=0.213], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.44,0.47,0.52,0.55,0.57 0.57,0.58,0.58,0.60), mean=0.509, stddev=0.0473], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.003,0.003,0.004), mean=0.00108, stddev=0.000434], oderiv-count=1.11116e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.7,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.7), mean=1.93, stddev=0.229], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.1,2.2,2.4 2.6,2.8,3.1,3.5,3.7 3.8,4.0,4.0,4.8), mean=3.14, stddev=0.456]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1093, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.75, stddev=0.00423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.67,0.69,0.72 0.75,0.81,0.87,0.94,0.98 1.0,1.0,1.0,1.2), mean=0.871, stddev=0.085], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1067, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.90,0.92,1.0 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.2, stddev=0.131], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.0,1.1 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.4,1.4), mean=1.2, stddev=0.0891], bias-{mean,stddev}=-0.1154,0.05279, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.72e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.4,1.6 1.6,1.7,1.9,2.1,2.2 2.3,2.3,2.3,2.5), mean=1.92, stddev=0.235], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.41 0.43,0.46,0.51,0.55,0.56 0.56,0.57,0.58,0.59), mean=0.502, stddev=0.0482], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0007 0.0007,0.0008,0.0009,0.001,0.001 0.001,0.003,0.003,0.003), mean=0.000965, stddev=0.000414], oderiv-count=9.8736e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.5,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.4), mean=1.91, stddev=0.234], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,2.1,2.4 2.6,2.7,3.0,3.5,3.8 4.0,4.2,4.3,4.4), mean=3.11, stddev=0.497]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.65, stddev=0.00305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.69 0.72,0.75,0.82,0.89,0.91 0.93,0.95,0.98,1.1), mean=0.821, stddev=0.0776], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1017, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.78,0.85,0.97 1.0,1.0,1.1,1.3,1.3 1.3,1.4,1.4,1.4), mean=1.14, stddev=0.127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.96,0.96,1.0 1.0,1.1,1.1,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.15, stddev=0.0951], bias-{mean,stddev}=-0.1175,0.06355, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.96,1.5,1.6 1.7,1.8,1.9,2.1,2.3 2.4,2.5,2.5,2.5), mean=1.95, stddev=0.249], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.38,0.41 0.43,0.46,0.50,0.53,0.55 0.56,0.57,0.58,0.58), mean=0.492, stddev=0.0454], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.003,0.003), mean=0.000868, stddev=0.000371], oderiv-count=8.97894e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.0,1.5,1.6 1.7,1.7,1.9,2.1,2.2 2.3,2.4,2.5,2.5), mean=1.92, stddev=0.242], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,2.1,2.4 2.6,2.8,3.2,3.5,4.0 4.5,4.6,4.7,5.1), mean=3.24, stddev=0.593]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1005, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.61, stddev=0.00239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.65,0.68 0.70,0.74,0.80,0.87,0.89 0.91,0.93,0.94,0.98), mean=0.801, stddev=0.0712], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09617, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.73,0.82,0.92 0.94,1.0,1.1,1.2,1.2 1.3,1.4,1.4,1.4), mean=1.08, stddev=0.122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.85,0.86,0.92 0.97,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.08, stddev=0.101], bias-{mean,stddev}=-0.1037,0.04874, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,1.2,1.3,1.6 1.7,1.7,1.9,2.0,2.2 2.3,2.4,2.5,2.7), mean=1.89, stddev=0.25], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.41,0.42 0.43,0.45,0.49,0.52,0.54 0.54,0.55,0.56,0.57), mean=0.488, stddev=0.0388], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0007,0.0007 0.0007,0.0008,0.0008,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.000904, stddev=0.000222], oderiv-count=8.03117e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.2,1.3,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.5,2.6), mean=1.88, stddev=0.256], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.9,2.0,2.3 2.5,2.7,3.0,3.5,3.8 4.0,4.2,4.3,4.7), mean=3.09, stddev=0.519]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.7,1.7), mean=1.64, stddev=0.00612], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.64,0.66,0.69 0.72,0.75,0.81,0.88,0.92 0.95,0.99,1.0,1.1), mean=0.815, stddev=0.0813], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09624, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.73,0.75,0.84 0.91,0.96,1.1,1.2,1.2 1.3,1.4,1.4,1.5), mean=1.08, stddev=0.141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.86,0.86,0.93 0.94,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.08, stddev=0.107], bias-{mean,stddev}=-0.09879,0.04442, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.57e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,1.1,1.4,1.4 1.6,1.7,1.9,2.1,2.2 2.3,2.5,2.5,2.6), mean=1.89, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.41 0.42,0.44,0.48,0.51,0.53 0.55,0.56,0.56,0.60), mean=0.478, stddev=0.0436], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.000923, stddev=0.000169], oderiv-count=6.69875e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.3,1.4 1.6,1.7,1.9,2.1,2.2 2.4,2.4,2.5,2.5), mean=1.89, stddev=0.275], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.9,2.1,2.3 2.5,2.7,3.0,3.4,3.7 3.9,4.4,4.5,5.0), mean=3.06, stddev=0.529]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.000846], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.63,0.66,0.70 0.73,0.78,0.84,0.90,0.94 0.97,1.0,1.0,1.1), mean=0.839, stddev=0.0832], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09697, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.75,0.76,0.87 0.88,0.97,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.09, stddev=0.141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.86,0.86,0.90 0.93,0.98,1.1,1.2,1.3 1.3,1.3,1.4,1.5), mean=1.09, stddev=0.127], bias-{mean,stddev}=-0.08163,0.03886, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.97e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.5 1.7,1.8,2.0,2.1,2.4 2.6,2.7,2.7,2.9), mean=1.99, stddev=0.308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.39,0.40 0.41,0.43,0.46,0.50,0.51 0.52,0.54,0.54,0.55), mean=0.462, stddev=0.0388], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.001), mean=0.00089, stddev=0.000115], oderiv-count=5.83149e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.4,1.5 1.6,1.7,2.0,2.2,2.4 2.5,2.7,2.8,3.0), mean=1.98, stddev=0.307], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.4,2.5,2.6 2.7,2.9,3.2,3.8,4.2 4.6,5.0,5.5,5.7), mean=3.37, stddev=0.64]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1056, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.0058], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.65,0.67,0.70 0.71,0.75,0.83,0.93,0.97 1.0,1.0,1.0,1.1), mean=0.839, stddev=0.0989], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09792, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.65,0.75 0.85,0.97,1.1,1.2,1.3 1.4,1.4,1.5,1.5), mean=1.09, stddev=0.181], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.86,0.90 0.92,0.98,1.1,1.2,1.3 1.3,1.3,1.4,1.5), mean=1.1, stddev=0.131], bias-{mean,stddev}=-0.07026,0.03568, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.6e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.6 1.7,1.8,2.0,2.2,2.4 2.5,2.6,2.7,2.9), mean=2, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.33,0.37 0.40,0.43,0.45,0.49,0.50 0.50,0.51,0.52,0.56), mean=0.452, stddev=0.0422], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00102, stddev=0.000143], oderiv-count=4.95936e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.5 1.7,1.8,2.0,2.2,2.4 2.5,2.6,2.7,2.7), mean=2.01, stddev=0.293], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.5,2.6,2.7 2.9,3.0,3.4,3.8,4.0 4.2,4.6,4.8,5.3), mean=3.42, stddev=0.509]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1091, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.8,1.8,1.8), mean=1.75, stddev=0.00276], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.67,0.70 0.72,0.77,0.85,0.97,1.0 1.1,1.1,1.2,1.3), mean=0.864, stddev=0.12], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1006, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.63,0.64,0.71 0.83,0.95,1.1,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.12, stddev=0.214], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.86,0.93 0.95,1.0,1.1,1.2,1.3 1.4,1.4,1.5,1.5), mean=1.13, stddev=0.137], bias-{mean,stddev}=-0.05682,0.03991, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.49e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.3,1.5 1.6,1.8,2.1,2.4,2.6 2.7,2.9,3.0,3.3), mean=2.1, stddev=0.38], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.32,0.35 0.37,0.40,0.44,0.47,0.48 0.49,0.50,0.51,0.51), mean=0.435, stddev=0.0458], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.0009 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00117, stddev=0.000188], oderiv-count=3.98554e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.3,1.6 1.6,1.8,2.1,2.4,2.6 2.8,3.0,3.1,3.2), mean=2.13, stddev=0.393], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.7,2.9,3.0 3.1,3.3,3.6,4.1,4.6 4.9,5.3,5.4,6.6), mean=3.76, stddev=0.615]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.82, stddev=0.00328], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.68,0.69,0.70 0.73,0.78,0.88,1.0,1.1 1.2,1.2,1.3,1.4), mean=0.897, stddev=0.138], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.62,0.63,0.73 0.79,0.88,1.2,1.4,1.5 1.5,1.6,1.7,1.7), mean=1.15, stddev=0.259], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.96,0.98,1.0 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.18, stddev=0.115], bias-{mean,stddev}=-0.05308,0.03943, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.86e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.5 1.7,1.8,2.1,2.4,2.6 2.8,2.9,2.9,3.0), mean=2.13, stddev=0.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.29,0.33 0.35,0.37,0.43,0.46,0.47 0.48,0.49,0.49,0.51), mean=0.417, stddev=0.0497], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00146, stddev=0.000215], oderiv-count=2.83136e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.4 1.6,1.8,2.1,2.4,2.6 2.8,3.0,3.1,3.2), mean=2.12, stddev=0.379], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.8,2.9,3.1 3.2,3.4,4.0,4.5,4.9 5.2,5.6,5.6,5.7), mean=4.03, stddev=0.66]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1137, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.82, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.66,0.69 0.72,0.77,0.86,1.0,1.1 1.2,1.2,1.3,1.4), mean=0.897, stddev=0.152], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.57,0.57,0.66 0.73,0.84,1.1,1.4,1.6 1.7,1.7,1.7,1.8), mean=1.14, stddev=0.318], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.89,0.94,0.97 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.6), mean=1.18, stddev=0.127], bias-{mean,stddev}=-0.04605,0.04765, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.23e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,1.1,1.2,1.3 1.5,1.6,1.9,2.3,2.5 2.7,2.9,3.3,3.6), mean=1.98, stddev=0.448], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.22,0.24 0.30,0.33,0.39,0.44,0.45 0.47,0.49,0.49,0.54), mean=0.382, stddev=0.0668], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.004), mean=0.00212, stddev=0.000353], oderiv-count=1.90291e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,1.2,1.2,1.3 1.5,1.6,2.0,2.2,2.5 2.7,3.1,3.4,4.3), mean=1.98, stddev=0.47], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.8,2.8,3.1 3.4,3.7,4.2,4.8,5.1 5.4,5.8,6.2,6.8), mean=4.22, stddev=0.717]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1038, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.61,0.64 0.67,0.71,0.79,0.93,1.0 1.1,1.2,1.2,1.3), mean=0.819, stddev=0.135], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09802, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.61,0.63,0.67 0.69,0.76,1.1,1.3,1.5 1.6,1.6,1.7,1.8), mean=1.07, stddev=0.298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.89,0.91,0.94 0.96,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.1, stddev=0.1], bias-{mean,stddev}=-0.05847,0.06996, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.93,1.0,1.0 1.1,1.3,1.6,1.9,2.2 2.3,2.4,2.5,2.9), mean=1.63, stddev=0.38], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.19 0.21,0.24,0.32,0.42,0.46 0.47,0.51,0.52,0.54), mean=0.33, stddev=0.0939], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.005,0.006,0.006 0.007,0.007,0.008,0.008), mean=0.00492, stddev=0.001], oderiv-count=634304
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,1.0,1.1 1.1,1.3,1.6,2.0,2.2 2.3,2.4,2.6,3.0), mean=1.64, stddev=0.413], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.9,2.9,3.3 3.4,3.7,4.1,4.8,5.0 5.2,5.4,5.6,5.6), mean=4.2, stddev=0.61]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.005, max-change=0.75, params-rms=0.1151, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.3, stddev=0.000691], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.67,0.71 0.76,0.83,0.91,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.914, stddev=0.108], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2035, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.4 1.5,1.5,1.6,1.7,1.8 1.9,2.0,2.0,2.0), mean=1.62, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.0,2.1 2.1,2.2,2.3,2.4,2.5 2.5,2.5,2.5,2.8), mean=2.3, stddev=0.156], bias-{mean,stddev}=-0.001453,0.1151, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.2e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.7 1.7,1.8,2.1,2.3,2.5 2.6,2.7,2.7,2.9), mean=2.09, stddev=0.293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.33,0.34 0.35,0.36,0.39,0.41,0.42 0.44,0.44,0.44,0.46), mean=0.388, stddev=0.0295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0104, stddev=0.00123], oderiv-count=617984
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.5,1.7 1.7,1.8,2.1,2.4,2.5 2.6,2.6,2.8,2.9), mean=2.11, stddev=0.304], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,3.7,3.8,4.2 4.3,4.5,5.0,5.6,5.9 6.2,6.7,6.9,7.1), mean=5.03, stddev=0.668]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, params-rms=0.2497, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.8,2.8,2.8 2.8,2.8,2.8,2.8,2.8 2.8,2.8,2.8,2.8), mean=2.82, stddev=0.0076], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.7 1.8,1.9,2.0,2.1,2.2 2.3,2.3,2.4,2.4), mean=1.99, stddev=0.182], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-4e-08 -2e-08,-1e-08,6e-09,2e-08,3e-08 3e-08,4e-08,4e-08,5e-08), mean=3.89e-09, stddev=2.12e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.0,3.1,3.2 3.2,3.3,3.5,3.6,3.8 3.9,3.9,4.1,4.5), mean=3.52, stddev=0.242]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0107167, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.1799, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.09,0.17,0.35 0.55,0.81,1.4,1.8,2.0 2.1,2.2,2.2,2.7), mean=1.34, stddev=0.533], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9.4,9.4,9.6,10 10,11,11,12,12 13,13,14,14), mean=11.4, stddev=0.841], bias-{mean,stddev}=0.00054,0.2655, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1632, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.79,1.0,1.1 1.2,1.2,1.3,1.4,1.4 1.4,1.5,1.5,1.6), mean=1.3, stddev=0.117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.8,1.9,2.0 2.0,2.1,2.2,2.2), mean=1.84, stddev=0.127], bias-{mean,stddev}=-0.01014,0.1797, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.75,0.81,0.83 0.88,0.96,1.1,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.13, stddev=0.194], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.39 0.41,0.43,0.46,0.50,0.51 0.53,0.55,0.56,0.57), mean=0.462, stddev=0.0427], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.004,0.005,0.005,0.005 0.005,0.006,0.006,0.01), mean=0.00476, stddev=0.0008], oderiv-count=606016
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.75,0.77,0.82 0.86,0.94,1.1,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.12, stddev=0.205], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.5,1.6,1.8,1.9,2.0 2.1,2.1,2.2,2.5), mean=1.76, stddev=0.206]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0107167, l2-regularize=0.0005, max-change=0.75, params-rms=0.1603, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.81, stddev=0.00582], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,1.0,1.0,1.1 1.1,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.28, stddev=0.123], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-3e-08 -2e-08,-2e-08,2e-09,2e-08,3e-08 4e-08,5e-08,6e-08,6e-08), mean=3.72e-09, stddev=2.25e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.7,1.8 1.8,1.8,1.9,2.1,2.1 2.1,2.1,2.2,2.2), mean=1.95, stddev=0.118]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0535833, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.186, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.20 0.61,0.95,1.4,1.9,2.1 2.2,2.4,2.4,3.6), mean=1.38, stddev=0.562], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 12,12,12,12,12 12,12,12,12), mean=11.8, stddev=0.25], bias-{mean,stddev}=-3.777e-08,0.2198, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000776, stddev=0.00121], oderiv-count=620160
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/46.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/47.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.5158 tdnnf2.linear:4.86312 tdnnf2.affine:5.42057 tdnnf3.linear:4.44126 tdnnf3.affine:5.08082 tdnnf4.linear:4.09526 tdnnf4.affine:4.70299 tdnnf5.linear:3.71712 tdnnf5.affine:4.42619 tdnnf6.linear:3.55773 tdnnf6.affine:4.17584 tdnnf7.linear:3.44242 tdnnf7.affine:4.08755 tdnnf8.linear:3.20665 tdnnf8.affine:3.85963 tdnnf9.linear:3.20954 tdnnf9.affine:3.98175 tdnnf10.linear:3.29634 tdnnf10.affine:4.13222 tdnnf11.linear:3.53713 tdnnf11.affine:4.39454 tdnnf12.linear:3.75701 tdnnf12.affine:4.65247 tdnnf13.linear:4.10111 tdnnf13.affine:5.07402 prefinal-l:2.43595 prefinal-chain.affine:4.52461 prefinal-chain.linear:3.72013 output.affine:12.4803 prefinal-xent.affine:3.48176 prefinal-xent.linear:2.32055 output-xent.affine:12.6893 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.6146 tdnnf2.linear:18.1684 tdnnf2.affine:17.1877 tdnnf3.linear:15.9174 tdnnf3.affine:15.0923 tdnnf4.linear:13.9966 tdnnf4.affine:13.7313 tdnnf5.linear:13.1904 tdnnf5.affine:13.1022 tdnnf6.linear:12.8623 tdnnf6.affine:12.3782 tdnnf7.linear:13.1104 tdnnf7.affine:12.3798 tdnnf8.linear:13.4956 tdnnf8.affine:12.4538 tdnnf9.linear:13.5152 tdnnf9.affine:12.5658 tdnnf10.linear:13.9622 tdnnf10.affine:12.9015 tdnnf11.linear:14.5207 tdnnf11.affine:13.406 tdnnf12.linear:14.5503 tdnnf12.affine:13.4164 tdnnf13.linear:13.2804 tdnnf13.affine:12.589 prefinal-l:10.4172 prefinal-chain.affine:18.4671 prefinal-chain.linear:22.5988 output.affine:93.0028 prefinal-xent.affine:14.9142 prefinal-xent.linear:14.5071 output-xent.affine:95.5931 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.288006 tdnnf2.linear:0.266697 tdnnf2.affine:0.31391 tdnnf3.linear:0.277821 tdnnf3.affine:0.335083 tdnnf4.linear:0.291005 tdnnf4.affine:0.340673 tdnnf5.linear:0.280303 tdnnf5.affine:0.336151 tdnnf6.linear:0.274083 tdnnf6.affine:0.335281 tdnnf7.linear:0.260972 tdnnf7.affine:0.328646 tdnnf8.linear:0.23635 tdnnf8.affine:0.308341 tdnnf9.linear:0.237025 tdnnf9.affine:0.315948 tdnnf10.linear:0.236173 tdnnf10.affine:0.320884 tdnnf11.linear:0.243186 tdnnf11.affine:0.326984 tdnnf12.linear:0.258414 tdnnf12.affine:0.346593 tdnnf13.linear:0.307416 tdnnf13.affine:0.39978 prefinal-l:0.233579 prefinal-chain.affine:0.245312 prefinal-chain.linear:0.164893 output.affine:0.134997 prefinal-xent.affine:0.233564 prefinal-xent.linear:0.158975 output-xent.affine:0.132806 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 06:51:25 CST 2020, elapsed time 3 seconds
