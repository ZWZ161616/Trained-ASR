# nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/89.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/90.mdl 
# Started at Mon Feb 24 08:17:36 CST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/89.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/90.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.04387, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.51,0.52,0.54 0.56,0.58,0.63,0.70,0.76 0.78,0.81,0.82,0.95), mean=0.646, stddev=0.0778], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.18,0.20 0.22,0.24,0.44,0.66,0.73 0.75,0.79,0.82,0.89), mean=0.458, stddev=0.192], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.15 0.18,0.25,0.50,0.85,1.1 1.1,1.2,1.3,1.4), mean=0.566, stddev=0.321], bias-{mean,stddev}=-0.007091,0.03337, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.45e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.36,-0.29,-0.26,-0.19 -0.14,-0.07,0.06,0.30,0.41 0.62,0.73,0.77,0.95), mean=0.114, stddev=0.241], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.5,-1.3,-0.55 -0.31,-0.13,0.18,0.67,0.93 1.0,1.3,1.3,2.2), mean=0.253, stddev=0.552], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.09,0.19,0.26 0.42,0.60,0.63,0.88), mean=0.127, stddev=0.15], oderiv-count=252736
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.132275, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.04002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.55,0.57 0.59,0.60,0.64,0.67,0.69 0.70,0.71,0.71,0.75), mean=0.639, stddev=0.0419], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.27,0.28,0.31,0.35,0.37 0.39,0.40,0.41,0.43), mean=0.318, stddev=0.0397], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.26,0.30 0.33,0.39,0.57,0.79,0.91 0.98,1.0,1.1,1.1), mean=0.601, stddev=0.221], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.04371, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.41,0.42 0.44,0.46,0.49,0.52,0.54 0.56,0.57,0.57,0.68), mean=0.493, stddev=0.0432], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.54 0.55,0.56,0.57,0.61), mean=0.493, stddev=0.0348], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.01,0.03 0.06,0.12,0.36,0.67,0.83 0.92,1.0,1.0,1.1), mean=0.402, stddev=0.288], bias-{mean,stddev}=-0.0007992,0.01767, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.005,0.007 0.01,0.02,0.02,0.03), mean=0.00295, stddev=0.0052], oderiv-count=63552
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.132275, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03368, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.48,0.48 0.49,0.50,0.54,0.56,0.59 0.61,0.61,0.62,0.62), mean=0.538, stddev=0.0368], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.23 0.23,0.24,0.27,0.29,0.31 0.32,0.33,0.35,0.35), mean=0.268, stddev=0.0281], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.23,0.26 0.28,0.33,0.48,0.68,0.77 0.81,0.85,0.85,0.92), mean=0.508, stddev=0.18], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03928, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.37,0.39 0.40,0.41,0.44,0.47,0.48 0.50,0.53,0.54,0.57), mean=0.443, stddev=0.0354], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.38,0.39 0.40,0.42,0.44,0.47,0.48 0.49,0.50,0.50,0.52), mean=0.443, stddev=0.0295], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.01,0.03 0.06,0.11,0.31,0.60,0.74 0.84,0.92,0.92,1.0), mean=0.361, stddev=0.26], bias-{mean,stddev}=-0.001263,0.01109, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.33e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.8,-3.4,-2.4,-0.94 -0.07,0.68,2.4,3.9,5.2 6.6,7.0,7.3,8.4), mean=2.4, stddev=2.24], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.39,-0.35,-0.34,-0.08 0.07,0.30,0.61,0.92,1.1 1.2,1.5,1.6,1.8), mean=0.606, stddev=0.41], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0006,0.002,0.002 0.003,0.003,0.005,0.007), mean=0.000912, stddev=0.00119], oderiv-count=484800
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.132275, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.45,0.46 0.46,0.47,0.49,0.52,0.54 0.55,0.57,0.58,0.58), mean=0.5, stddev=0.0307], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.25,0.27,0.28 0.29,0.31,0.31,0.33), mean=0.249, stddev=0.0282], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.23 0.26,0.30,0.44,0.63,0.70 0.75,0.81,0.82,0.87), mean=0.471, stddev=0.172], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03754, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.35,0.36 0.37,0.39,0.42,0.45,0.47 0.49,0.50,0.50,0.53), mean=0.423, stddev=0.0383], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.37,0.38 0.39,0.40,0.42,0.45,0.46 0.47,0.49,0.49,0.51), mean=0.424, stddev=0.0305], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.01,0.02 0.05,0.11,0.30,0.57,0.70 0.80,0.85,0.86,0.96), mean=0.346, stddev=0.246], bias-{mean,stddev}=0.0006625,0.01186, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.81e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.80,0.94,1.1 1.3,1.5,2.2,2.8,3.2 3.3,3.6,3.8,4.0), mean=2.22, stddev=0.713], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.11,0.19 0.28,0.36,0.49,0.60,0.66 0.73,0.77,0.78,1.0), mean=0.484, stddev=0.161], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.001,0.002,0.003 0.003,0.01,0.01,0.02), mean=0.00139, stddev=0.00243], oderiv-count=176000
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.132275, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02894, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.42,0.42 0.43,0.44,0.46,0.48,0.50 0.51,0.53,0.53,0.58), mean=0.462, stddev=0.0313], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.27 0.27,0.28,0.29,0.29), mean=0.23, stddev=0.0262], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.20,0.21 0.23,0.27,0.42,0.59,0.65 0.68,0.72,0.76,0.77), mean=0.435, stddev=0.16], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03558, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.34 0.35,0.37,0.40,0.43,0.45 0.47,0.48,0.49,0.52), mean=0.401, stddev=0.0391], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.36 0.37,0.38,0.40,0.43,0.44 0.45,0.45,0.46,0.48), mean=0.401, stddev=0.0288], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.004,0.007,0.02 0.05,0.10,0.29,0.55,0.67 0.74,0.81,0.85,0.91), mean=0.328, stddev=0.233], bias-{mean,stddev}=-0.0008145,0.009879, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.26e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-2.4,-0.75,0.54 1.6,2.6,5.1,7.5,8.7 9.0,12,12,13), mean=5.11, stddev=2.87], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-1.4,-1.1,-0.70 -0.46,-0.19,0.42,0.93,1.4 1.6,1.8,2.0,3.2), mean=0.424, stddev=0.762]
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.132275, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0272, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.39,0.40 0.40,0.42,0.43,0.45,0.47 0.47,0.47,0.48,0.50), mean=0.435, stddev=0.0241], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.17,0.17 0.19,0.20,0.22,0.24,0.25 0.26,0.27,0.27,0.28), mean=0.216, stddev=0.0252], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.18,0.20 0.22,0.25,0.38,0.55,0.62 0.65,0.69,0.73,0.74), mean=0.408, stddev=0.152], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03156, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.29,0.31 0.31,0.33,0.35,0.38,0.40 0.41,0.42,0.42,0.43), mean=0.356, stddev=0.0327], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.31,0.32 0.33,0.34,0.35,0.37,0.39 0.39,0.40,0.41,0.42), mean=0.356, stddev=0.0224], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.007,0.008,0.02 0.04,0.09,0.26,0.47,0.60 0.66,0.73,0.75,0.78), mean=0.292, stddev=0.206], bias-{mean,stddev}=0.0007807,0.00921, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.82e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.6,-1.3,-0.36 0.48,0.90,2.2,3.4,4.2 4.7,5.3,5.4,6.2), mean=2.24, stddev=1.53], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.64,-0.58,-0.13 0.05,0.18,0.48,0.70,0.85 1.0,1.2,1.2,1.4), mean=0.449, stddev=0.371]
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.132275, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02593, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.38 0.38,0.39,0.42,0.44,0.45 0.45,0.46,0.46,0.47), mean=0.414, stddev=0.0254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.17 0.18,0.18,0.21,0.22,0.23 0.25,0.26,0.27,0.28), mean=0.206, stddev=0.0226], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.18,0.19 0.21,0.25,0.37,0.52,0.58 0.63,0.67,0.67,0.74), mean=0.389, stddev=0.144], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0301, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.29 0.31,0.31,0.34,0.36,0.38 0.39,0.41,0.41,0.43), mean=0.339, stddev=0.0297], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.31,0.32,0.34,0.36,0.38 0.39,0.40,0.41,0.46), mean=0.339, stddev=0.0296], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.004,0.008,0.02 0.04,0.09,0.24,0.47,0.57 0.64,0.68,0.72,0.75), mean=0.277, stddev=0.199], bias-{mean,stddev}=0.0004063,0.008477, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.58,0.60,0.78 0.92,1.2,1.9,2.7,2.9 3.1,3.2,3.2,3.8), mean=1.94, stddev=0.745], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.04,0.12,0.15,0.25 0.28,0.35,0.52,0.63,0.67 0.72,0.74,0.77,0.96), mean=0.5, stddev=0.156]
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.132275, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02514, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.35 0.36,0.37,0.40,0.43,0.44 0.44,0.44,0.45,0.50), mean=0.401, stddev=0.0307], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.17 0.17,0.18,0.20,0.22,0.23 0.24,0.25,0.26,0.27), mean=0.2, stddev=0.0228], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.19,0.23,0.36,0.51,0.57 0.60,0.64,0.67,0.70), mean=0.375, stddev=0.146], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02906, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.28 0.29,0.30,0.33,0.35,0.37 0.38,0.39,0.40,0.41), mean=0.327, stddev=0.0309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.28,0.29 0.30,0.31,0.33,0.35,0.36 0.36,0.37,0.38,0.40), mean=0.328, stddev=0.0241], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.01,0.02 0.04,0.08,0.22,0.44,0.55 0.63,0.68,0.69,0.73), mean=0.267, stddev=0.192], bias-{mean,stddev}=0.0007523,0.008343, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.001,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.000942, stddev=0.000796], oderiv-count=271232
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.132275, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02492, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.36 0.37,0.38,0.39,0.42,0.43 0.43,0.45,0.46,0.48), mean=0.398, stddev=0.0262], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.16 0.17,0.18,0.20,0.22,0.23 0.24,0.25,0.25,0.26), mean=0.198, stddev=0.0229], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.16,0.17 0.19,0.22,0.35,0.52,0.57 0.61,0.64,0.66,0.67), mean=0.37, stddev=0.147], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02971, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.29 0.30,0.31,0.34,0.36,0.37 0.38,0.40,0.40,0.41), mean=0.335, stddev=0.0297], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.29,0.30 0.30,0.32,0.34,0.35,0.36 0.37,0.39,0.39,0.40), mean=0.335, stddev=0.023], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.007,0.02 0.04,0.08,0.23,0.45,0.57 0.63,0.70,0.72,0.77), mean=0.272, stddev=0.198], bias-{mean,stddev}=0.000686,0.007537, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.003,0.004 0.005,0.005,0.007,0.008), mean=0.00168, stddev=0.00179], oderiv-count=51840
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.132275, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02543, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.35 0.37,0.38,0.41,0.43,0.43 0.44,0.45,0.46,0.48), mean=0.406, stddev=0.027], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.16 0.17,0.18,0.20,0.22,0.23 0.25,0.26,0.26,0.28), mean=0.202, stddev=0.0271], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.19,0.22,0.36,0.52,0.59 0.63,0.65,0.69,0.71), mean=0.377, stddev=0.153], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03109, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.27,0.29 0.30,0.32,0.35,0.38,0.40 0.41,0.42,0.42,0.43), mean=0.35, stddev=0.0375], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.31 0.32,0.33,0.35,0.37,0.39 0.40,0.41,0.41,0.42), mean=0.351, stddev=0.0276], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.004,0.008,0.02 0.04,0.08,0.23,0.47,0.59 0.67,0.73,0.75,0.82), mean=0.282, stddev=0.21], bias-{mean,stddev}=0.001112,0.007715, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=9.59e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.8,-1.7,-1.1 -0.57,0.33,1.9,3.2,3.8 4.6,5.6,5.7,6.6), mean=1.84, stddev=1.76], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.28,-0.26,-0.20,-0.05 0.03,0.16,0.40,0.61,0.70 0.78,0.91,0.93,1.2), mean=0.398, stddev=0.266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.003,0.004 0.004,0.005,0.005,0.007), mean=0.00163, stddev=0.00159], oderiv-count=61632
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.132275, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02661, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.38 0.38,0.40,0.42,0.44,0.46 0.47,0.48,0.50,0.50), mean=0.425, stddev=0.0304], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.16 0.17,0.18,0.21,0.24,0.25 0.26,0.28,0.28,0.30), mean=0.21, stddev=0.0325], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.16 0.19,0.23,0.36,0.55,0.62 0.66,0.70,0.73,0.75), mean=0.392, stddev=0.165], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03265, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.27,0.30 0.31,0.33,0.37,0.40,0.42 0.43,0.45,0.46,0.48), mean=0.367, stddev=0.0419], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.31,0.31 0.33,0.35,0.37,0.39,0.40 0.41,0.43,0.44,0.45), mean=0.368, stddev=0.0292], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.008,0.02 0.04,0.09,0.25,0.50,0.63 0.70,0.79,0.80,0.85), mean=0.296, stddev=0.22], bias-{mean,stddev}=0.0008948,0.008647, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.132275, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02836, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.40,0.41 0.42,0.42,0.45,0.48,0.49 0.50,0.51,0.52,0.52), mean=0.453, stddev=0.0308], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.17 0.18,0.20,0.22,0.25,0.27 0.28,0.29,0.30,0.32), mean=0.224, stddev=0.0337], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.18 0.20,0.24,0.38,0.57,0.68 0.71,0.78,0.80,0.83), mean=0.418, stddev=0.177], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03467, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.32 0.33,0.35,0.39,0.43,0.44 0.46,0.48,0.49,0.54), mean=0.389, stddev=0.0479], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.33,0.34 0.35,0.36,0.39,0.42,0.43 0.44,0.45,0.45,0.48), mean=0.391, stddev=0.0316], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.006,0.03 0.05,0.09,0.26,0.53,0.67 0.75,0.85,0.85,0.92), mean=0.314, stddev=0.235], bias-{mean,stddev}=0.0007643,0.009948, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.003,0.01,0.01 0.02,0.02,0.02,0.03), mean=0.00606, stddev=0.00687], oderiv-count=9792
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.132275, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03006, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.40,0.43 0.44,0.45,0.48,0.50,0.51 0.52,0.52,0.54,0.56), mean=0.48, stddev=0.0319], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.21,0.24,0.26,0.28 0.29,0.30,0.31,0.33), mean=0.239, stddev=0.0297], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.17,0.18 0.22,0.25,0.41,0.61,0.70 0.75,0.80,0.82,0.88), mean=0.442, stddev=0.189], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03788, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.31,0.33,0.34 0.36,0.38,0.43,0.46,0.48 0.50,0.52,0.52,0.56), mean=0.426, stddev=0.0508], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.36 0.38,0.40,0.43,0.45,0.46 0.47,0.50,0.50,0.50), mean=0.427, stddev=0.0325], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.02 0.04,0.11,0.29,0.57,0.73 0.83,0.93,0.95,1.1), mean=0.342, stddev=0.258], bias-{mean,stddev}=0.002042,0.01395, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.63e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-1.9,-1.7,-0.78 -0.38,0.23,1.6,3.5,4.6 5.2,6.7,6.8,8.6), mean=1.98, stddev=2.04], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.60,-0.58,-0.33 -0.18,-0.002,0.46,0.85,1.1 1.2,1.4,1.5,1.6), mean=0.453, stddev=0.489], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.004,0.01,0.01 0.02,0.02,0.02,0.03), mean=0.00607, stddev=0.00672], oderiv-count=17408
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.132275, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.005, max-change=0.75, params-rms=0.03163, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.31,0.32 0.32,0.33,0.36,0.38,0.39 0.39,0.40,0.42,0.43), mean=0.357, stddev=0.0266], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.19,0.20 0.22,0.23,0.25,0.27,0.30 0.30,0.31,0.31,0.33), mean=0.251, stddev=0.0299], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.12 0.14,0.18,0.30,0.47,0.53 0.56,0.60,0.61,0.65), mean=0.327, stddev=0.145], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.05679, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.36,0.38 0.38,0.41,0.45,0.49,0.52 0.54,0.55,0.56,0.59), mean=0.451, stddev=0.051], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.55,0.57 0.59,0.61,0.64,0.67,0.70 0.71,0.71,0.72,0.75), mean=0.641, stddev=0.0428], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.16,0.20 0.24,0.31,0.57,0.83,0.92 1.0,1.1,1.1,1.2), mean=0.583, stddev=0.269], bias-{mean,stddev}=0.0003299,0.02139, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.02,0.03 0.03,0.03,0.04,0.04), mean=0.0118, stddev=0.0117], oderiv-count=9792
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, params-rms=0.04719, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.46,0.48 0.49,0.50,0.53,0.56,0.57 0.58,0.61,0.62,0.62), mean=0.533, stddev=0.0379], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.30 0.31,0.33,0.37,0.42,0.44 0.45,0.47,0.49,0.52), mean=0.374, stddev=0.0496], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.16,0.18 0.21,0.27,0.47,0.70,0.78 0.84,0.86,0.93,0.94), mean=0.488, stddev=0.216], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00788363, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.02716, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.003,0.005,0.02 0.03,0.04,0.12,0.28,0.38 0.45,0.52,0.56,0.74), mean=0.167, stddev=0.139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.6,1.7,1.7,1.8,1.8 1.8,1.9,1.9,2.0), mean=1.72, stddev=0.0794], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.51,0.98 1.1,1.2,1.7,2.1,2.2 2.3,2.5,2.5,2.5), mean=1.66, stddev=0.482], bias-{mean,stddev}=-6.815e-06,0.04306, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.03589, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.23 0.24,0.26,0.28,0.31,0.33 0.35,0.36,0.36,0.41), mean=0.285, stddev=0.0376], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.35 0.37,0.38,0.41,0.43,0.44 0.45,0.46,0.46,0.47), mean=0.405, stddev=0.0306], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.12,0.14 0.17,0.22,0.36,0.52,0.60 0.64,0.67,0.68,0.71), mean=0.373, stddev=0.16], bias-{mean,stddev}=0.0007664,0.01633, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.002,0.004,0.006,0.008,0.008 0.009,0.009,0.009,0.01), mean=0.00562, stddev=0.00247], oderiv-count=31552
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00788363, l2-regularize=0.0005, max-change=0.75, params-rms=0.02151, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.21 0.22,0.23,0.24,0.25,0.27 0.27,0.28,0.28,0.29), mean=0.243, stddev=0.0177], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.14 0.15,0.16,0.17,0.18,0.19 0.20,0.21,0.21,0.24), mean=0.171, stddev=0.0185], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.09 0.10,0.13,0.21,0.31,0.35 0.37,0.40,0.41,0.43), mean=0.224, stddev=0.0961], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0394181, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.02703, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.003,0.007,0.02 0.04,0.06,0.14,0.28,0.37 0.43,0.49,0.53,0.71), mean=0.175, stddev=0.127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.72, stddev=0.056], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.99,1.1 1.2,1.2,1.7,2.1,2.2 2.3,2.3,2.3,2.4), mean=1.67, stddev=0.395], bias-{mean,stddev}=-1.166e-08,0.01926, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040

LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.37248 tdnnf2.linear:5.12221 tdnnf2.affine:5.59869 tdnnf3.linear:4.31163 tdnnf3.affine:5.02891 tdnnf4.linear:4.00927 tdnnf4.affine:4.8074 tdnnf5.linear:3.70484 tdnnf5.affine:4.55508 tdnnf6.linear:3.48222 tdnnf6.affine:4.04061 tdnnf7.linear:3.31961 tdnnf7.affine:3.85457 tdnnf8.linear:3.21851 tdnnf8.affine:3.72085 tdnnf9.linear:3.18913 tdnnf9.affine:3.80344 tdnnf10.linear:3.25531 tdnnf10.affine:3.98036 tdnnf11.linear:3.40584 tdnnf11.affine:4.18028 tdnnf12.linear:3.63069 tdnnf12.affine:4.43887 tdnnf13.linear:3.84753 tdnnf13.affine:4.85118 prefinal-l:2.86299 prefinal-chain.affine:5.14573 prefinal-chain.linear:4.27157 output.affine:14.0771 prefinal-xent.affine:3.25396 prefinal-xent.linear:1.947 output-xent.affine:13.7992 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.8151 tdnnf2.linear:18.111 tdnnf2.affine:17.7215 tdnnf3.linear:15.6957 tdnnf3.affine:15.4514 tdnnf4.linear:14.2469 tdnnf4.affine:14.9318 tdnnf5.linear:13.5286 tdnnf5.affine:14.2915 tdnnf6.linear:12.9482 tdnnf6.affine:12.6165 tdnnf7.linear:13.1796 tdnnf7.affine:12.494 tdnnf8.linear:13.6299 tdnnf8.affine:12.595 tdnnf9.linear:13.6596 tdnnf9.affine:12.7162 tdnnf10.linear:14.198 tdnnf10.affine:13.0401 tdnnf11.linear:13.7476 tdnnf11.affine:12.7587 tdnnf12.linear:13.329 tdnnf12.affine:12.5257 tdnnf13.linear:12.6769 tdnnf13.affine:11.8126 prefinal-l:11.2742 prefinal-chain.affine:19.5707 prefinal-chain.linear:24.5275 output.affine:108.741 prefinal-xent.affine:15.0357 prefinal-xent.linear:14.0962 output-xent.affine:97.9704 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.309944 tdnnf2.linear:0.281826 tdnnf2.affine:0.314456 tdnnf3.linear:0.273126 tdnnf3.affine:0.323196 tdnnf4.linear:0.28078 tdnnf4.affine:0.321356 tdnnf5.linear:0.272478 tdnnf5.affine:0.315166 tdnnf6.linear:0.268132 tdnnf6.affine:0.319415 tdnnf7.linear:0.250909 tdnnf7.affine:0.308161 tdnnf8.linear:0.235787 tdnnf8.affine:0.295205 tdnnf9.linear:0.23342 tdnnf9.affine:0.298691 tdnnf10.linear:0.22934 tdnnf10.affine:0.305879 tdnnf11.linear:0.247353 tdnnf11.affine:0.328092 tdnnf12.linear:0.272319 tdnnf12.affine:0.354704 tdnnf13.linear:0.304973 tdnnf13.affine:0.412396 prefinal-l:0.255634 prefinal-chain.affine:0.263868 prefinal-chain.linear:0.174902 output.affine:0.129764 prefinal-xent.affine:0.216495 prefinal-xent.linear:0.137928 output-xent.affine:0.140775 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 08:17:39 CST 2020, elapsed time 3 seconds
