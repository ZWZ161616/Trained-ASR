# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/66.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/65.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/66.mdl 
# Started at Mon Feb 24 07:38:19 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/66.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1368, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,1.0,1.1,1.2 1.4,1.6,1.9,2.3,2.5 2.9,3.2,3.2,3.3), mean=1.97, stddev=0.477], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.54,0.56,0.62 0.70,0.82,1.4,1.9,2.2 2.5,2.6,2.7,3.5), mean=1.44, stddev=0.58], bias-{mean,stddev}=-0.1197,0.206, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.97e+06, self-repaired-proportion=0.102315, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.004 0.006,0.03,0.11,0.20,0.23 0.30,0.33,0.36,0.43), mean=0.125, stddev=0.0933], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.03 0.05,0.10,0.34,0.53,0.67 0.73,0.79,0.81,0.86), mean=0.349, stddev=0.22], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.09 0.11,0.14,0.15,0.18), mean=0.0502, stddev=0.0299], oderiv-count=1.26138e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0009,0.002,0.004 0.006,0.03,0.11,0.20,0.23 0.30,0.33,0.35,0.41), mean=0.124, stddev=0.0925], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.02,0.02 0.05,0.11,0.21,0.28,0.31 0.32,0.35,0.35,0.37), mean=0.198, stddev=0.0929]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.010582, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1429, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3), mean=2.29, stddev=0.00493], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.50,0.58,0.70 0.81,1.0,1.2,1.3,1.3 1.4,1.4,1.5,1.7), mean=1.12, stddev=0.205], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1362, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.5,1.6,1.8 1.8,2.0,2.0,2.2), mean=1.53, stddev=0.179], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.4,1.5,1.6,1.7 1.7,1.8,1.8,1.9), mean=1.54, stddev=0.107], bias-{mean,stddev}=-0.137,0.08786, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.88e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.4 1.5,1.6,1.8,2.0,2.1 2.2,2.3,2.3,2.6), mean=1.77, stddev=0.257], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.39 0.41,0.44,0.51,0.56,0.58 0.58,0.60,0.60,0.61), mean=0.503, stddev=0.0632], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.004,0.005,0.007), mean=0.00169, stddev=0.000809], oderiv-count=1.1863e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.4 1.4,1.6,1.8,2.0,2.1 2.2,2.2,2.3,2.6), mean=1.77, stddev=0.258], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.8,2.1 2.3,2.5,2.9,3.3,3.4 3.6,3.7,3.7,4.1), mean=2.88, stddev=0.467]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.010582, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.98, stddev=0.004], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.76,0.77,0.82 0.85,0.90,0.98,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.986, stddev=0.109], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1196, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.96,1.0,1.1 1.2,1.2,1.3,1.4,1.6 1.7,1.8,1.8,1.9), mean=1.34, stddev=0.168], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.3,1.3,1.4,1.5 1.5,1.5,1.6,1.6), mean=1.35, stddev=0.0998], bias-{mean,stddev}=-0.1109,0.05527, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.31e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.7 1.7,1.8,1.9,2.2,2.3 2.3,2.4,2.4,2.6), mean=1.98, stddev=0.209], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.42,0.42 0.45,0.47,0.51,0.55,0.56 0.57,0.58,0.59,0.60), mean=0.511, stddev=0.0468], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.003,0.004,0.005), mean=0.00115, stddev=0.00057], oderiv-count=1.0782e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.6 1.7,1.8,2.0,2.2,2.3 2.4,2.4,2.5,2.6), mean=1.98, stddev=0.23], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.2,2.5 2.6,2.8,3.2,3.6,3.8 3.9,4.0,4.1,4.6), mean=3.22, stddev=0.457]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.010582, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0.00598], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.69,0.71,0.75 0.78,0.81,0.88,0.94,0.98 1.0,1.0,1.0,1.3), mean=0.881, stddev=0.0837], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.79,0.80,1.0 1.1,1.1,1.2,1.4,1.4 1.5,1.5,1.6,1.6), mean=1.24, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.24, stddev=0.0896], bias-{mean,stddev}=-0.123,0.06106, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.65e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,1.0,1.6,1.6 1.7,1.8,1.9,2.2,2.3 2.4,2.4,2.4,2.6), mean=1.96, stddev=0.258], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.42 0.43,0.46,0.52,0.55,0.56 0.57,0.58,0.58,0.60), mean=0.506, stddev=0.0473], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0007,0.0007 0.0007,0.0008,0.0009,0.001,0.001 0.002,0.003,0.003,0.004), mean=0.00101, stddev=0.00054], oderiv-count=9.9792e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,1.5,1.6 1.7,1.7,1.9,2.2,2.3 2.4,2.4,2.4,2.7), mean=1.95, stddev=0.272], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,2.2,2.5 2.7,2.8,3.1,3.6,3.9 4.1,4.4,4.6,4.7), mean=3.19, stddev=0.543]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.010582, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.68, stddev=0.00305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.64,0.67,0.69 0.73,0.77,0.83,0.90,0.93 0.96,0.98,1.0,1.0), mean=0.834, stddev=0.0787], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1052, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.67,0.74,0.98 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.18, stddev=0.139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.0,1.0 1.1,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.19, stddev=0.101], bias-{mean,stddev}=-0.1259,0.06149, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.28e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.95,1.3,1.6 1.7,1.8,2.0,2.2,2.3 2.4,2.4,2.5,2.6), mean=1.98, stddev=0.27], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.42 0.44,0.46,0.49,0.53,0.55 0.56,0.57,0.58,0.59), mean=0.494, stddev=0.0427], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0007,0.0007,0.0008,0.001,0.001 0.001,0.002,0.003,0.004), mean=0.00093, stddev=0.000454], oderiv-count=9.0896e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.95,1.3,1.6 1.6,1.8,2.0,2.2,2.3 2.3,2.4,2.4,2.6), mean=1.96, stddev=0.276], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.5,1.9,2.5 2.7,2.9,3.2,3.5,3.8 4.2,4.5,4.9,5.0), mean=3.25, stddev=0.566]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.010582, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1017, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.00584], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.65,0.66,0.69 0.71,0.74,0.82,0.88,0.91 0.94,0.97,0.99,1.0), mean=0.81, stddev=0.0789], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09788, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.76,0.82,0.93 0.96,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.1, stddev=0.127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.91,0.93 0.97,1.0,1.1,1.2,1.2 1.3,1.3,1.4,1.4), mean=1.1, stddev=0.103], bias-{mean,stddev}=-0.1135,0.05101, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,1.1,1.2,1.5 1.6,1.7,1.8,2.1,2.2 2.2,2.3,2.4,2.5), mean=1.86, stddev=0.251], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.40,0.42 0.43,0.45,0.50,0.52,0.54 0.54,0.57,0.57,0.57), mean=0.491, stddev=0.0421], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0007,0.0008 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.000975, stddev=0.000233], oderiv-count=8.08723e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,1.1,1.2,1.4 1.6,1.7,1.8,2.0,2.2 2.2,2.3,2.4,2.6), mean=1.85, stddev=0.251], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,2.0,2.0,2.3 2.4,2.6,2.9,3.4,3.6 3.7,3.9,4.0,4.9), mean=3, stddev=0.483]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.010582, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1029, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.65, stddev=0.00642], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.67,0.68 0.71,0.75,0.82,0.89,0.92 0.95,1.0,1.0,1.0), mean=0.819, stddev=0.0829], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09672, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.71,0.72,0.85 0.91,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.08, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,0.88,0.91 0.96,0.99,1.1,1.2,1.2 1.3,1.3,1.4,1.4), mean=1.09, stddev=0.105], bias-{mean,stddev}=-0.1066,0.04863, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.46e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,1.0,1.2,1.4 1.5,1.6,1.8,2.0,2.1 2.2,2.4,2.4,2.6), mean=1.82, stddev=0.271], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.41 0.43,0.44,0.47,0.50,0.52 0.53,0.55,0.56,0.60), mean=0.472, stddev=0.04], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.000993, stddev=0.000177], oderiv-count=6.91878e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.97,1.2,1.3 1.5,1.6,1.8,2.0,2.1 2.2,2.4,2.4,2.5), mean=1.81, stddev=0.279], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,2.1,2.1,2.2 2.4,2.6,3.0,3.3,3.6 4.0,4.2,4.3,4.6), mean=2.99, stddev=0.51]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.010582, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.107, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.67,0.70 0.74,0.78,0.85,0.92,0.95 0.98,1.0,1.1,1.2), mean=0.851, stddev=0.0889], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09812, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.73,0.78,0.84 0.92,0.97,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.1, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.87,0.88,0.91 0.95,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.1, stddev=0.122], bias-{mean,stddev}=-0.08882,0.04028, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.5 1.6,1.7,1.9,2.1,2.2 2.5,2.6,2.7,2.7), mean=1.9, stddev=0.293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.37,0.40 0.41,0.43,0.46,0.49,0.51 0.51,0.53,0.53,0.55), mean=0.459, stddev=0.0379], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.001), mean=0.000974, stddev=0.00012], oderiv-count=5.9984e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.5 1.6,1.7,1.9,2.1,2.2 2.5,2.7,2.7,2.8), mean=1.91, stddev=0.296], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.4,2.4,2.5 2.6,2.8,3.1,3.6,4.0 4.4,4.8,4.9,5.7), mean=3.24, stddev=0.584]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.010582, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1067, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00648], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.66,0.68 0.71,0.75,0.84,0.94,0.98 1.0,1.1,1.1,1.2), mean=0.847, stddev=0.103], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09913, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.58,0.79 0.83,0.94,1.1,1.3,1.3 1.4,1.4,1.5,1.5), mean=1.1, stddev=0.201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.87,0.88,0.92 0.94,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.11, stddev=0.128], bias-{mean,stddev}=-0.07478,0.03939, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,1.1,1.1,1.3 1.6,1.7,1.9,2.1,2.3 2.5,2.5,2.6,2.9), mean=1.92, stddev=0.32], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.30,0.36 0.39,0.42,0.46,0.48,0.50 0.50,0.52,0.52,0.55), mean=0.446, stddev=0.0459], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.0011, stddev=0.000162], oderiv-count=4.76064e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,1.1,1.1,1.3 1.6,1.7,1.9,2.2,2.3 2.4,2.5,2.6,2.8), mean=1.92, stddev=0.314], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.5,2.5,2.6 2.7,2.9,3.3,3.6,3.9 4.3,4.4,4.8,5.5), mean=3.32, stddev=0.523]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.010582, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0.00234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.64,0.68 0.73,0.76,0.86,0.98,1.0 1.1,1.2,1.2,1.3), mean=0.874, stddev=0.131], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1018, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.60,0.70 0.79,0.93,1.1,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.13, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.82,0.84,0.93 0.97,1.0,1.1,1.2,1.3 1.4,1.5,1.5,1.5), mean=1.14, stddev=0.143], bias-{mean,stddev}=-0.05706,0.0451, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.79e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.6,1.8,2.0,2.4,2.5 2.7,2.9,2.9,3.2), mean=2.07, stddev=0.38], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.32 0.36,0.40,0.44,0.47,0.48 0.48,0.49,0.49,0.50), mean=0.431, stddev=0.0481], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002), mean=0.00123, stddev=0.000204], oderiv-count=3.94445e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.6,1.8,2.0,2.3,2.6 2.7,2.9,2.9,3.3), mean=2.06, stddev=0.378], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.8,2.8,3.0 3.1,3.2,3.7,4.1,4.4 4.7,4.9,5.1,6.2), mean=3.7, stddev=0.56]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.010582, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1107, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0.00616], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.63,0.63,0.68 0.71,0.76,0.84,0.99,1.1 1.2,1.2,1.3,1.3), mean=0.873, stddev=0.147], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.59,0.71 0.80,0.86,1.1,1.4,1.5 1.6,1.6,1.6,1.7), mean=1.12, stddev=0.276], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.96,0.96,0.99 1.0,1.0,1.1,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.15, stddev=0.114], bias-{mean,stddev}=-0.06083,0.04414, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.88e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.4 1.4,1.6,1.9,2.2,2.4 2.5,2.6,2.7,2.8), mean=1.92, stddev=0.345], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.28,0.31 0.32,0.35,0.41,0.45,0.46 0.47,0.47,0.48,0.48), mean=0.402, stddev=0.0511], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00165, stddev=0.00026], oderiv-count=2.76058e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.3,1.4 1.5,1.7,1.9,2.2,2.4 2.5,2.5,2.6,2.8), mean=1.93, stddev=0.335], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.9,2.9,2.9 3.2,3.4,3.8,4.3,4.5 4.7,5.0,5.1,5.4), mean=3.84, stddev=0.538]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.010582, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.74, stddev=0.00263], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.60,0.64,0.65 0.68,0.73,0.82,0.98,1.1 1.1,1.2,1.3,1.3), mean=0.855, stddev=0.152], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1009, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.61,0.63,0.66 0.72,0.78,1.0,1.4,1.6 1.6,1.7,1.7,1.7), mean=1.1, stddev=0.319], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.88,0.91,0.95 0.97,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.14, stddev=0.124], bias-{mean,stddev}=-0.05906,0.04854, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.31e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.91,0.95,1.1 1.3,1.5,1.7,1.9,2.1 2.3,2.5,2.5,3.0), mean=1.69, stddev=0.354], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.22 0.27,0.30,0.37,0.42,0.45 0.46,0.48,0.49,0.55), mean=0.36, stddev=0.0707], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.003,0.004,0.004,0.004), mean=0.0025, stddev=0.000436], oderiv-count=1.83763e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.98,0.99,1.2 1.3,1.4,1.7,1.9,2.1 2.3,2.5,2.5,2.9), mean=1.7, stddev=0.343], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.7,2.9,3.0 3.1,3.4,4.0,4.5,4.8 5.2,5.8,5.9,6.2), mean=4.03, stddev=0.707]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.010582, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00276], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.59,0.62 0.66,0.68,0.76,0.89,0.96 1.1,1.1,1.2,1.2), mean=0.789, stddev=0.134], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09456, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.60,0.64 0.68,0.74,1.0,1.3,1.5 1.5,1.6,1.6,1.7), mean=1.03, stddev=0.298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.82,0.85,0.91 0.93,0.98,1.1,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.07, stddev=0.0989], bias-{mean,stddev}=-0.07783,0.07366, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.26e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.86,0.88,0.92 1.0,1.1,1.4,1.6,1.8 2.1,2.1,2.1,2.4), mean=1.4, stddev=0.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.16,0.17 0.19,0.21,0.28,0.40,0.44 0.47,0.48,0.49,0.58), mean=0.305, stddev=0.0984], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.006,0.006,0.007 0.008,0.009,0.009,0.01), mean=0.00577, stddev=0.00123], oderiv-count=607104
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.82,0.85,0.96 1.0,1.1,1.4,1.7,1.9 2.0,2.0,2.1,2.5), mean=1.4, stddev=0.334], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.9,2.9,3.2 3.3,3.5,3.9,4.5,4.9 5.1,5.3,5.4,5.6), mean=4.02, stddev=0.61]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.010582, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.005, max-change=0.75, params-rms=0.1204, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.36, stddev=0.00579], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.65,0.68,0.74 0.79,0.87,0.96,1.1,1.1 1.1,1.1,1.2,1.2), mean=0.956, stddev=0.119], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2097, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.5,1.6,1.7,1.8,1.8 1.9,1.9,1.9,1.9), mean=1.67, stddev=0.127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.1 2.2,2.2,2.4,2.5,2.5 2.6,2.6,2.7,2.8), mean=2.37, stddev=0.156], bias-{mean,stddev}=0.0009958,0.1209, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.28e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.7,1.9,2.1,2.3,2.4 2.5,2.7,2.7,2.8), mean=2.09, stddev=0.266], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.34 0.35,0.36,0.39,0.42,0.43 0.44,0.46,0.47,0.47), mean=0.391, stddev=0.0315], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.009,0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0106, stddev=0.00129], oderiv-count=617984
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.7 1.8,1.9,2.1,2.3,2.4 2.5,2.7,2.8,2.9), mean=2.1, stddev=0.265], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.5,4.2,4.3,4.4 4.5,4.7,5.1,5.6,6.3 6.7,7.4,7.5,7.8), mean=5.27, stddev=0.752]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, params-rms=0.2597, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.9,2.9,2.9,2.9 2.9,2.9,2.9,2.9,3.0 3.0,3.0,3.0,3.0), mean=2.94, stddev=0.0118], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.6,1.7 1.8,2.0,2.1,2.2,2.3 2.3,2.5,2.5,2.5), mean=2.07, stddev=0.195], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8e-08,-8e-08,-7e-08,-4e-08 -4e-08,-2e-08,-5e-09,2e-08,3e-08 3e-08,4e-08,5e-08,7e-08), mean=-4.67e-09, stddev=2.75e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.1,3.1,3.2,3.2 3.4,3.5,3.7,3.9,3.9 4.0,4.1,4.3,4.6), mean=3.66, stddev=0.266]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.009327, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.197, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.12,0.20,0.40 0.64,0.95,1.6,2.0,2.1 2.3,2.3,2.4,2.9), mean=1.47, stddev=0.561], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(10,10,11,11 12,12,12,13,13 14,14,15,15), mean=12.5, stddev=0.877], bias-{mean,stddev}=0.0007286,0.2742, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1656, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.85,1.0,1.1 1.2,1.3,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.32, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.7,1.8,1.9,2.0,2.0 2.0,2.1,2.1,2.1), mean=1.87, stddev=0.122], bias-{mean,stddev}=-0.02154,0.2028, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.17e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.70,0.72,0.77 0.83,0.91,1.1,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.11, stddev=0.215], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.38,0.39 0.40,0.42,0.46,0.51,0.53 0.54,0.55,0.57,0.60), mean=0.466, stddev=0.049], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.005,0.005,0.006 0.006,0.006,0.006,0.01), mean=0.00503, stddev=0.000876], oderiv-count=586432
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.67,0.70,0.77 0.81,0.90,1.1,1.2,1.4 1.4,1.5,1.6,1.8), mean=1.09, stddev=0.21], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.4 1.4,1.5,1.7,1.8,1.9 2.0,2.1,2.1,2.3), mean=1.7, stddev=0.195]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.009327, l2-regularize=0.0005, max-change=0.75, params-rms=0.1585, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.79, stddev=0.000846], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.95,1.0,1.1 1.1,1.2,1.3,1.4,1.4 1.4,1.5,1.5,1.6), mean=1.26, stddev=0.117], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-08,-7e-08,-5e-08,-4e-08 -3e-08,-2e-08,2e-09,1e-08,2e-08 4e-08,4e-08,4e-08,4e-08), mean=-2.08e-09, stddev=2.37e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.8,1.8,1.9,2.0,2.1 2.1,2.1,2.2,2.3), mean=1.92, stddev=0.116]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.046635, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1892, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.23 0.64,0.98,1.4,1.9,2.1 2.3,2.4,2.5,3.7), mean=1.41, stddev=0.563], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,12,12,12 12,12,12,12), mean=12, stddev=0.223], bias-{mean,stddev}=6.078e-09,0.2137, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,6e-06 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000779, stddev=0.00121], oderiv-count=608192
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/65.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/66.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.78505 tdnnf2.linear:5.05024 tdnnf2.affine:5.42396 tdnnf3.linear:4.3478 tdnnf3.affine:5.11188 tdnnf4.linear:3.90998 tdnnf4.affine:4.63607 tdnnf5.linear:3.64302 tdnnf5.affine:4.44018 tdnnf6.linear:3.52762 tdnnf6.affine:4.13671 tdnnf7.linear:3.37949 tdnnf7.affine:3.99076 tdnnf8.linear:3.19179 tdnnf8.affine:3.73129 tdnnf9.linear:3.17847 tdnnf9.affine:3.88435 tdnnf10.linear:3.24016 tdnnf10.affine:4.00707 tdnnf11.linear:3.43799 tdnnf11.affine:4.32703 tdnnf12.linear:3.5927 tdnnf12.affine:4.50436 tdnnf13.linear:3.93755 tdnnf13.affine:4.99208 prefinal-l:2.49148 prefinal-chain.affine:4.79748 prefinal-chain.linear:3.97367 output.affine:13.0402 prefinal-xent.affine:3.36285 prefinal-xent.linear:2.06148 output-xent.affine:13.1924 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.121 tdnnf2.linear:18.2952 tdnnf2.affine:17.5363 tdnnf3.linear:15.8739 tdnnf3.affine:15.3748 tdnnf4.linear:14.1612 tdnnf4.affine:14.2051 tdnnf5.linear:13.4005 tdnnf5.affine:13.5529 tdnnf6.linear:13.023 tdnnf6.affine:12.608 tdnnf7.linear:13.1769 tdnnf7.affine:12.4509 tdnnf8.linear:13.6946 tdnnf8.affine:12.6074 tdnnf9.linear:13.6546 tdnnf9.affine:12.7241 tdnnf10.linear:14.1421 tdnnf10.affine:13.0579 tdnnf11.linear:14.1672 tdnnf11.affine:13.1302 tdnnf12.linear:13.889 tdnnf12.affine:12.9493 tdnnf13.linear:12.8008 tdnnf13.affine:12.1649 prefinal-l:10.8983 prefinal-chain.affine:19.0299 prefinal-chain.linear:23.5043 output.affine:101.66 prefinal-xent.affine:15.1637 prefinal-xent.linear:14.3485 output-xent.affine:97.1815 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.294001 tdnnf2.linear:0.275832 tdnnf2.affine:0.309315 tdnnf3.linear:0.273209 tdnnf3.affine:0.331196 tdnnf4.linear:0.275142 tdnnf4.affine:0.324854 tdnnf5.linear:0.270094 tdnnf5.affine:0.325903 tdnnf6.linear:0.269765 tdnnf6.affine:0.326693 tdnnf7.linear:0.255588 tdnnf7.affine:0.320403 tdnnf8.linear:0.233805 tdnnf8.affine:0.296139 tdnnf9.linear:0.232617 tdnnf9.affine:0.305053 tdnnf10.linear:0.228626 tdnnf10.affine:0.306088 tdnnf11.linear:0.242354 tdnnf11.affine:0.329428 tdnnf12.linear:0.258098 tdnnf12.affine:0.347322 tdnnf13.linear:0.307021 tdnnf13.affine:0.409636 prefinal-l:0.230374 prefinal-chain.affine:0.253352 prefinal-chain.linear:0.169854 output.affine:0.128807 prefinal-xent.affine:0.222411 prefinal-xent.linear:0.143854 output-xent.affine:0.135786 ]
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 07:38:23 CST 2020, elapsed time 4 seconds
