# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/307.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/306.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/307.mdl 
# Started at Mon Feb 24 13:36:23 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/307.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1244, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,1.1,1.2,1.3 1.4,1.5,1.7,2.1,2.3 2.5,2.7,2.7,3.0), mean=1.8, stddev=0.382], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.54,0.58 0.65,0.76,1.3,1.7,2.0 2.3,2.4,2.4,2.8), mean=1.31, stddev=0.515], bias-{mean,stddev}=-0.09982,0.1613, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.34e+06, self-repaired-proportion=0.015625, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.008,0.02 0.03,0.05,0.09,0.17,0.20 0.24,0.26,0.28,0.29), mean=0.108, stddev=0.0697], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.06,0.08 0.11,0.19,0.33,0.48,0.64 0.70,0.74,0.78,0.80), mean=0.352, stddev=0.188], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.07,0.08,0.09,0.12), mean=0.0404, stddev=0.0167], oderiv-count=1.29355e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.008,0.02 0.03,0.04,0.10,0.17,0.21 0.23,0.27,0.28,0.29), mean=0.108, stddev=0.0707], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.05,0.07 0.10,0.13,0.19,0.24,0.27 0.28,0.29,0.30,0.32), mean=0.183, stddev=0.0648]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0285714, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1081, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.73, stddev=0.00129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.64,0.67,0.69 0.73,0.78,0.85,0.94,0.99 1.0,1.1,1.1,1.2), mean=0.859, stddev=0.102], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1086, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.91,0.93,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.6,1.6,1.7), mean=1.22, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.1,1.1 1.1,1.2,1.2,1.3,1.3 1.3,1.4,1.4,1.4), mean=1.23, stddev=0.0801], bias-{mean,stddev}=-0.1419,0.09501, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.67,0.75,0.80 0.87,0.95,1.1,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.09, stddev=0.171], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.36,0.37 0.39,0.43,0.53,0.58,0.59 0.60,0.61,0.61,0.62), mean=0.508, stddev=0.0763], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.003,0.009,0.01,0.01), mean=0.00261, stddev=0.00152], oderiv-count=1.16512e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.68,0.71,0.77 0.87,0.93,1.1,1.2,1.3 1.3,1.5,1.5,1.5), mean=1.08, stddev=0.17], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.3,1.4 1.4,1.5,1.7,2.0,2.1 2.2,2.3,2.3,2.3), mean=1.73, stddev=0.258]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0285714, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.63,0.64,0.67 0.70,0.73,0.80,0.87,0.91 0.94,0.97,1.0,1.1), mean=0.804, stddev=0.0825], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.63,0.90,1.1 1.1,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.6), mean=1.24, stddev=0.163], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.3,1.4 1.4,1.4,1.4,1.4), mean=1.25, stddev=0.0768], bias-{mean,stddev}=-0.1602,0.0823, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.29e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.56,0.93,1.1 1.2,1.2,1.4,1.5,1.6 1.7,1.7,1.7,1.8), mean=1.37, stddev=0.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.39,0.41 0.43,0.46,0.51,0.56,0.57 0.58,0.60,0.60,0.60), mean=0.509, stddev=0.0551], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.004,0.004,0.02), mean=0.00169, stddev=0.00152], oderiv-count=1.09953e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.54,0.92,1.0 1.1,1.2,1.4,1.5,1.6 1.7,1.7,1.8,1.8), mean=1.37, stddev=0.22], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.84,1.3,1.7 1.9,1.9,2.2,2.4,2.6 2.7,2.8,2.9,2.9), mean=2.19, stddev=0.346]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0285714, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09232, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.48, stddev=0.00189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.61,0.64 0.66,0.68,0.73,0.79,0.82 0.84,0.86,0.88,0.92), mean=0.736, stddev=0.0646], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09733, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.64,0.66,0.96 0.98,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.09, stddev=0.133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.90,0.93,0.96 0.98,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.1, stddev=0.0918], bias-{mean,stddev}=-0.1724,0.07925, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.76e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.53,0.62,1.0 1.1,1.2,1.3,1.4,1.5 1.6,1.6,1.8,1.8), mean=1.3, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.36,0.38 0.42,0.45,0.50,0.54,0.56 0.57,0.58,0.58,0.60), mean=0.495, stddev=0.0568], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.004,0.004,0.01), mean=0.00146, stddev=0.00111], oderiv-count=9.9968e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.57,0.62,1.0 1.1,1.2,1.3,1.5,1.5 1.6,1.7,1.7,1.8), mean=1.31, stddev=0.219], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,1.0,1.1,1.8 1.8,1.9,2.1,2.4,2.5 2.7,2.9,2.9,3.4), mean=2.13, stddev=0.362]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0285714, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08575, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.37, stddev=0.00142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.53,0.55,0.57 0.60,0.62,0.68,0.74,0.76 0.79,0.81,0.84,0.96), mean=0.683, stddev=0.0675], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08149, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.81 0.82,0.85,0.91,0.98,1.0 1.1,1.1,1.1,1.2), mean=0.917, stddev=0.0975], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.72,0.74,0.81 0.83,0.85,0.92,0.97,1.0 1.0,1.1,1.1,1.1), mean=0.919, stddev=0.077], bias-{mean,stddev}=-0.1401,0.05252, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.94e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.63,0.66,0.84 0.89,0.99,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.06, stddev=0.136], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.42 0.44,0.46,0.50,0.54,0.55 0.57,0.58,0.58,0.61), mean=0.5, stddev=0.0461], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00167, stddev=0.000294], oderiv-count=8.75763e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.62,0.63,0.82 0.89,0.98,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.06, stddev=0.14], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.1,1.1,1.4 1.5,1.5,1.6,1.8,1.9 2.0,2.1,2.1,2.6), mean=1.67, stddev=0.223]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0285714, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08508, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.36, stddev=0.00189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.56,0.57 0.59,0.62,0.67,0.73,0.75 0.78,0.80,0.81,0.87), mean=0.678, stddev=0.0629], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07926, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.61,0.63,0.72 0.79,0.83,0.89,0.95,0.99 1.0,1.1,1.1,1.2), mean=0.892, stddev=0.096], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.73,0.75,0.78 0.79,0.82,0.88,0.96,1.0 1.0,1.1,1.1,1.1), mean=0.893, stddev=0.0827], bias-{mean,stddev}=-0.1363,0.05492, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.70,0.75,0.79 0.86,0.91,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.03, stddev=0.136], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.40,0.42 0.44,0.46,0.49,0.52,0.54 0.56,0.56,0.57,0.61), mean=0.489, stddev=0.0413], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00172, stddev=0.000215], oderiv-count=8.11526e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.70,0.71,0.79 0.86,0.92,1.0,1.1,1.2 1.2,1.3,1.3,1.5), mean=1.03, stddev=0.138], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.4,1.5,1.6,1.8,1.9 2.0,2.1,2.1,2.4), mean=1.62, stddev=0.211]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0285714, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08529, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.36, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.55,0.56,0.57 0.59,0.63,0.67,0.74,0.77 0.80,0.82,0.83,0.90), mean=0.679, stddev=0.0667], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07886, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.55,0.74 0.78,0.82,0.88,0.96,1.0 1.0,1.1,1.1,1.2), mean=0.886, stddev=0.106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.74,0.74,0.77 0.79,0.80,0.89,0.95,0.99 1.0,1.0,1.1,1.1), mean=0.889, stddev=0.078], bias-{mean,stddev}=-0.128,0.05148, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.76e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.50,0.60,0.78 0.89,0.94,1.0,1.1,1.2 1.3,1.3,1.3,1.5), mean=1.03, stddev=0.149], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.34,0.41 0.43,0.45,0.47,0.50,0.53 0.55,0.57,0.57,0.59), mean=0.475, stddev=0.0453], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00172, stddev=0.000239], oderiv-count=6.85766e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.57,0.79 0.91,0.96,1.0,1.1,1.2 1.3,1.3,1.3,1.4), mean=1.04, stddev=0.149], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.3 1.4,1.5,1.6,1.8,2.0 2.1,2.2,2.2,2.5), mean=1.65, stddev=0.246]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0285714, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08641, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.38, stddev=0.000913], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.52,0.53,0.56 0.58,0.62,0.68,0.76,0.79 0.82,0.86,0.90,0.94), mean=0.686, stddev=0.0813], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07789, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.54,0.71 0.74,0.79,0.87,0.98,1.0 1.0,1.1,1.1,1.1), mean=0.874, stddev=0.115], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.71,0.71,0.73 0.77,0.81,0.87,0.94,0.98 1.0,1.1,1.1,1.3), mean=0.877, stddev=0.0883], bias-{mean,stddev}=-0.1087,0.05065, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.50,0.58,0.79 0.85,0.93,1.0,1.2,1.3 1.4,1.4,1.5,1.5), mean=1.05, stddev=0.18], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.29,0.39 0.41,0.42,0.44,0.47,0.49 0.51,0.54,0.54,0.55), mean=0.445, stddev=0.0427], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00163, stddev=0.000248], oderiv-count=5.98797e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.50,0.57,0.79 0.85,0.93,1.0,1.2,1.3 1.4,1.5,1.5,1.5), mean=1.04, stddev=0.183], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.4,1.5,1.8,2.0,2.2 2.4,2.5,2.6,2.8), mean=1.79, stddev=0.314]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0285714, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08816, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.41, stddev=0.00138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.49,0.53,0.56 0.58,0.61,0.69,0.78,0.84 0.86,0.91,0.92,1.0), mean=0.698, stddev=0.0989], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07986, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.51,0.62,0.68 0.75,0.80,0.90,1.0,1.0 1.1,1.1,1.1,1.2), mean=0.896, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.72,0.73,0.75 0.78,0.82,0.89,0.97,1.0 1.0,1.1,1.1,1.1), mean=0.899, stddev=0.092], bias-{mean,stddev}=-0.08302,0.03835, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.15e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.74,0.75,0.90 0.96,1.0,1.1,1.2,1.4 1.4,1.5,1.5,1.8), mean=1.13, stddev=0.167], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.34,0.38,0.41 0.41,0.43,0.45,0.47,0.48 0.49,0.50,0.51,0.52), mean=0.448, stddev=0.032], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00167, stddev=0.000249], oderiv-count=4.76928e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.76,0.78,0.92 0.94,1.0,1.1,1.2,1.3 1.4,1.5,1.5,1.8), mean=1.13, stddev=0.166], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.5 1.6,1.7,1.9,2.1,2.3 2.3,2.4,2.5,3.0), mean=1.93, stddev=0.262]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0285714, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08856, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.42, stddev=0.00207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.51,0.55 0.57,0.60,0.68,0.79,0.88 0.92,0.95,0.96,1.0), mean=0.699, stddev=0.115], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07994, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.51,0.61,0.71 0.76,0.82,0.91,0.99,1.0 1.0,1.1,1.1,1.1), mean=0.897, stddev=0.116], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.73,0.74,0.76 0.79,0.83,0.90,0.96,1.0 1.0,1.1,1.1,1.2), mean=0.901, stddev=0.0838], bias-{mean,stddev}=-0.07452,0.03459, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.6e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.72,0.83,0.87 0.92,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.1, stddev=0.148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.33,0.35,0.38 0.39,0.40,0.43,0.46,0.47 0.48,0.51,0.51,0.55), mean=0.431, stddev=0.0394], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00201, stddev=0.000275], oderiv-count=3.9513e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.72,0.81,0.87 0.90,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.1, stddev=0.151], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.93, stddev=0.226]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0285714, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08359, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.34, stddev=0.00104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.45,0.49 0.51,0.55,0.64,0.77,0.82 0.86,0.89,0.92,1.0), mean=0.658, stddev=0.121], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07797, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.49,0.59,0.65 0.68,0.74,0.86,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.869, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.71,0.73,0.76 0.77,0.79,0.87,0.95,0.97 1.0,1.0,1.0,1.1), mean=0.879, stddev=0.0784], bias-{mean,stddev}=-0.07801,0.03722, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.67,0.75 0.79,0.83,0.93,1.1,1.1 1.2,1.3,1.3,1.4), mean=0.95, stddev=0.14], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.33,0.34 0.36,0.38,0.41,0.43,0.45 0.46,0.47,0.47,0.48), mean=0.407, stddev=0.0343], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.004), mean=0.00283, stddev=0.000291], oderiv-count=2.94765e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.67,0.69,0.76 0.78,0.83,0.94,1.0,1.1 1.2,1.3,1.3,1.5), mean=0.947, stddev=0.143], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.6,1.8,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.86, stddev=0.261]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0285714, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.07799, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.2,1.2,1.2,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.25, stddev=0.00154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.44,0.47 0.49,0.52,0.59,0.71,0.78 0.84,0.87,0.89,0.89), mean=0.614, stddev=0.112], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07534, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.49,0.59 0.65,0.69,0.80,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.836, stddev=0.167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.69,0.71,0.73 0.75,0.77,0.85,0.91,0.94 0.96,0.97,1.0,1.2), mean=0.849, stddev=0.0771], bias-{mean,stddev}=-0.07849,0.04597, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.28e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.56,0.58,0.62 0.64,0.69,0.80,0.90,0.93 1.0,1.1,1.1,1.2), mean=0.799, stddev=0.12], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.28 0.29,0.32,0.37,0.42,0.44 0.45,0.46,0.47,0.50), mean=0.366, stddev=0.0572], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.004,0.005,0.005 0.005,0.006,0.006,0.007), mean=0.00434, stddev=0.000605], oderiv-count=1.91597e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.56,0.57,0.61 0.63,0.67,0.78,0.88,0.93 0.98,1.1,1.1,1.2), mean=0.786, stddev=0.124], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.4 1.5,1.6,1.8,2.0,2.2 2.3,2.6,2.6,2.8), mean=1.85, stddev=0.296]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0285714, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08181, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.31, stddev=0.00272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.47,0.49 0.52,0.55,0.63,0.76,0.80 0.85,0.89,0.92,1.0), mean=0.645, stddev=0.111], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08255, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.63,0.66 0.75,0.81,0.91,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.923, stddev=0.143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.78,0.78,0.82 0.84,0.86,0.92,0.99,1.0 1.1,1.1,1.1,1.2), mean=0.931, stddev=0.0776], bias-{mean,stddev}=-0.06555,0.06114, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.25e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.66,0.67,0.71 0.74,0.78,0.88,1.0,1.2 1.2,1.3,1.3,1.4), mean=0.918, stddev=0.161], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.24,0.27 0.28,0.31,0.38,0.41,0.44 0.45,0.47,0.49,0.50), mean=0.368, stddev=0.0582], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.006,0.007,0.008,0.008,0.009 0.009,0.01,0.01,0.01), mean=0.00763, stddev=0.000949], oderiv-count=587520
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.63,0.66,0.71 0.75,0.78,0.89,1.0,1.1 1.2,1.3,1.3,1.3), mean=0.914, stddev=0.152], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.6,1.8 1.8,2.0,2.4,2.8,3.0 3.1,3.2,3.2,3.3), mean=2.43, stddev=0.426]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0285714, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.005, max-change=0.75, params-rms=0.1137, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.29, stddev=0.00647], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.71,0.73,0.78 0.79,0.84,0.90,0.97,1.0 1.0,1.1,1.1,1.1), mean=0.906, stddev=0.0813], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1719, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.1,1.1,1.2 1.2,1.3,1.4,1.5,1.5 1.5,1.5,1.6,1.6), mean=1.37, stddev=0.106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.8,1.8,2.0,2.0,2.0 2.1,2.1,2.1,2.2), mean=1.94, stddev=0.104], bias-{mean,stddev}=-0.02913,0.1208, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.53e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.2 1.2,1.3,1.4,1.6,1.7 1.7,1.8,1.8,1.9), mean=1.44, stddev=0.16], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.37 0.37,0.38,0.41,0.43,0.45 0.45,0.46,0.46,0.48), mean=0.407, stddev=0.0268], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.009,0.01 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0118, stddev=0.00177], oderiv-count=629952
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.1,1.1,1.2 1.2,1.3,1.4,1.6,1.7 1.7,1.7,1.7,1.8), mean=1.43, stddev=0.16], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.4,2.4,2.5 2.6,2.8,3.1,3.4,3.5 3.6,3.8,3.8,4.3), mean=3.06, stddev=0.379]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, params-rms=0.2123, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.4,2.4,2.4 2.4,2.4,2.4,2.4,2.4 2.4,2.4,2.4,2.4), mean=2.4, stddev=0.00378], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.4 1.5,1.6,1.7,1.8,1.9 2.0,2.0,2.0,2.1), mean=1.69, stddev=0.173], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-5e-08 -4e-08,-2e-08,-5e-09,1e-08,2e-08 3e-08,4e-08,4e-08,5e-08), mean=-5.45e-09, stddev=2.3e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.5,2.6 2.7,2.8,2.9,3.1,3.2 3.3,3.4,3.4,3.5), mean=2.93, stddev=0.215]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.001602, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.1836, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.16,0.25,0.51 0.78,1.1,1.5,1.8,1.9 2.0,2.1,2.1,2.8), mean=1.4, stddev=0.442], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(10,10,11,11 11,11,12,12,12 13,13,13,13), mean=11.7, stddev=0.651], bias-{mean,stddev}=0.001288,0.2655, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1181, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.67,0.73,0.83 0.87,0.89,0.94,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.941, stddev=0.0808], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.3,1.4,1.5 1.5,1.5,1.5,1.5), mean=1.33, stddev=0.0943], bias-{mean,stddev}=-0.02144,0.1889, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.16e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.50,0.52,0.60 0.65,0.70,0.84,1.0,1.2 1.2,1.4,1.4,1.5), mean=0.875, stddev=0.211], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.35,0.37 0.40,0.41,0.46,0.52,0.55 0.56,0.62,0.63,0.64), mean=0.466, stddev=0.0626], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.006,0.006,0.007,0.007 0.007,0.008,0.008,0.02), mean=0.00645, stddev=0.00124], oderiv-count=623424
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.49,0.54,0.58 0.64,0.71,0.85,1.0,1.2 1.3,1.4,1.5,1.6), mean=0.885, stddev=0.217], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.99,1.0,1.1 1.1,1.2,1.3,1.5,1.6 1.6,1.7,1.7,1.7), mean=1.35, stddev=0.179]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.001602, l2-regularize=0.0005, max-change=0.75, params-rms=0.1254, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.42, stddev=0.000846], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.76,0.77,0.83 0.86,0.90,0.98,1.1,1.2 1.2,1.2,1.2,1.3), mean=0.997, stddev=0.109], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-3e-08,-3e-08 -3e-08,-2e-08,2e-09,2e-08,2e-08 3e-08,3e-08,4e-08,5e-08), mean=1.18e-09, stddev=1.97e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.3,1.4,1.5,1.5 1.5,1.6,1.6,1.6), mean=1.4, stddev=0.0942]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00801, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1976, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.08,0.32 0.78,1.1,1.5,2.0,2.2 2.3,2.5,2.6,4.0), mean=1.48, stddev=0.559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,13,13,13 13,13,13,13), mean=12.6, stddev=0.229], bias-{mean,stddev}=3.069e-08,0.186, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.0001,0.0002,0.0006,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000814, stddev=0.0012], oderiv-count=626688
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/306.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/307.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.36455 tdnnf2.linear:2.59324 tdnnf2.affine:3.00652 tdnnf3.linear:2.32391 tdnnf3.affine:3.16512 tdnnf4.linear:2.13102 tdnnf4.affine:2.78962 tdnnf5.linear:1.94677 tdnnf5.affine:2.22814 tdnnf6.linear:1.86618 tdnnf6.affine:2.07985 tdnnf7.linear:1.74897 tdnnf7.affine:2.00593 tdnnf8.linear:1.62464 tdnnf8.affine:1.90011 tdnnf9.linear:1.62648 tdnnf9.affine:1.93283 tdnnf10.linear:1.67288 tdnnf10.affine:2.03662 tdnnf11.linear:1.763 tdnnf11.affine:2.16303 tdnnf12.linear:1.83207 tdnnf12.affine:2.22927 tdnnf13.linear:2.00773 tdnnf13.affine:2.58019 prefinal-l:2.75047 prefinal-chain.affine:2.96841 prefinal-chain.linear:2.65258 output.affine:6.15353 prefinal-xent.affine:1.73019 prefinal-xent.linear:1.11689 output-xent.affine:5.68645 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:20.9816 tdnnf2.linear:13.8344 tdnnf2.affine:14.0336 tdnnf3.linear:12.9245 tdnnf3.affine:14.2927 tdnnf4.linear:11.8168 tdnnf4.affine:12.6424 tdnnf5.linear:10.9765 tdnnf5.affine:10.5676 tdnnf6.linear:10.8906 tdnnf6.affine:10.2811 tdnnf7.linear:10.9174 tdnnf7.affine:10.2136 tdnnf8.linear:11.0607 tdnnf8.affine:10.0617 tdnnf9.linear:11.2841 tdnnf9.affine:10.2737 tdnnf10.linear:11.3356 tdnnf10.affine:10.2746 tdnnf11.linear:10.699 tdnnf11.affine:10.0277 tdnnf12.linear:9.98233 tdnnf12.affine:9.69771 tdnnf13.linear:10.4717 tdnnf13.affine:10.6147 prefinal-l:10.2871 prefinal-chain.affine:15.6182 prefinal-chain.linear:19.2107 output.affine:94.8868 prefinal-xent.affine:10.9028 prefinal-xent.linear:11.346 output-xent.affine:101.188 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.254678 tdnnf2.linear:0.187274 tdnnf2.affine:0.214036 tdnnf3.linear:0.17957 tdnnf3.affine:0.221682 tdnnf4.linear:0.179735 tdnnf4.affine:0.220441 tdnnf5.linear:0.176812 tdnnf5.affine:0.210178 tdnnf6.linear:0.171265 tdnnf6.affine:0.20205 tdnnf7.linear:0.160141 tdnnf7.affine:0.196162 tdnnf8.linear:0.146611 tdnnf8.affine:0.1886 tdnnf9.linear:0.144012 tdnnf9.affine:0.18786 tdnnf10.linear:0.147223 tdnnf10.affine:0.197603 tdnnf11.linear:0.164801 tdnnf11.affine:0.215698 tdnnf12.linear:0.183357 tdnnf12.affine:0.22991 tdnnf13.linear:0.191084 tdnnf13.affine:0.242692 prefinal-l:0.266506 prefinal-chain.affine:0.189627 prefinal-chain.linear:0.137398 output.affine:0.064635 prefinal-xent.affine:0.158148 prefinal-xent.linear:0.0981265 output-xent.affine:0.0561993 ]
# Accounting: time=2 threads=1
# Ended (code 0) at Mon Feb 24 13:36:25 CST 2020, elapsed time 2 seconds
