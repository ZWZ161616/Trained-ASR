# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/286.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/285.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/286.mdl 
# Started at Mon Feb 24 13:08:37 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/286.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1297, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.2,1.4,1.4 1.4,1.5,1.8,2.2,2.4 2.7,2.8,2.8,3.1), mean=1.88, stddev=0.403], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,0.58,0.62 0.67,0.81,1.4,1.8,2.1 2.3,2.4,2.5,3.0), mean=1.37, stddev=0.533], bias-{mean,stddev}=-0.1067,0.1709, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.52e+06, self-repaired-proportion=0.0231355, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.009,0.02 0.03,0.04,0.09,0.18,0.22 0.24,0.28,0.28,0.33), mean=0.112, stddev=0.074], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.05,0.09 0.11,0.19,0.31,0.50,0.64 0.70,0.75,0.76,0.82), mean=0.352, stddev=0.189], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.07 0.08,0.10,0.10,0.14), mean=0.043, stddev=0.0195], oderiv-count=1.30733e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.009,0.02 0.03,0.04,0.09,0.17,0.21 0.24,0.27,0.29,0.33), mean=0.111, stddev=0.0738], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.08 0.10,0.13,0.19,0.24,0.27 0.30,0.30,0.31,0.31), mean=0.188, stddev=0.0646]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0952381, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1108, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.67,0.72 0.75,0.79,0.87,0.96,1.0 1.1,1.1,1.1,1.2), mean=0.88, stddev=0.103], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1114, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.93,0.95,1.1 1.1,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.25, stddev=0.145], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.1,1.1 1.2,1.2,1.3,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.26, stddev=0.0903], bias-{mean,stddev}=-0.153,0.09046, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.92e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.74,0.79,0.88 0.95,1.0,1.2,1.3,1.4 1.5,1.5,1.5,1.7), mean=1.17, stddev=0.184], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.38 0.40,0.44,0.54,0.58,0.59 0.60,0.61,0.61,0.64), mean=0.513, stddev=0.076], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.004,0.01,0.01,0.01), mean=0.00262, stddev=0.00175], oderiv-count=1.23503e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.76,0.78,0.86 0.93,1.0,1.2,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.17, stddev=0.185], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.3,1.4 1.5,1.6,1.8,2.1,2.3 2.4,2.5,2.5,2.6), mean=1.87, stddev=0.297]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0952381, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1031, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.65, stddev=0.00138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.62,0.67,0.69 0.71,0.74,0.82,0.89,0.93 0.97,0.99,1.0,1.1), mean=0.821, stddev=0.0857], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1091, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.83,1.0 1.1,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.6), mean=1.22, stddev=0.162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.2,1.2,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.23, stddev=0.0792], bias-{mean,stddev}=-0.163,0.07446, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.43e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.51,0.84,1.2 1.2,1.3,1.4,1.6,1.7 1.7,1.8,1.8,1.8), mean=1.42, stddev=0.214], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.41 0.42,0.47,0.52,0.56,0.57 0.58,0.59,0.59,0.60), mean=0.511, stddev=0.0538], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.004,0.005,0.005,0.01), mean=0.00167, stddev=0.00141], oderiv-count=1.07238e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.84,1.2 1.2,1.3,1.4,1.6,1.7 1.8,1.8,1.9,2.0), mean=1.43, stddev=0.219], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.76,1.1,1.8 1.9,2.0,2.3,2.6,2.7 2.8,2.9,2.9,3.0), mean=2.29, stddev=0.363]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0952381, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09533, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.53, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.62,0.65 0.67,0.71,0.76,0.81,0.85 0.87,0.89,0.91,0.99), mean=0.76, stddev=0.0691], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1013, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.61,0.65,0.98 1.0,1.1,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.14, stddev=0.142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.98 1.0,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.14, stddev=0.102], bias-{mean,stddev}=-0.1738,0.07998, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.62e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.62,0.70,1.2 1.3,1.3,1.5,1.6,1.7 1.8,1.9,1.9,2.2), mean=1.47, stddev=0.237], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.36,0.40 0.42,0.44,0.51,0.55,0.57 0.57,0.58,0.58,0.59), mean=0.496, stddev=0.0578], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.001,0.001,0.001,0.001,0.001 0.002,0.004,0.005,0.01), mean=0.00134, stddev=0.0012], oderiv-count=9.8384e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.64,0.71,1.2 1.3,1.4,1.5,1.6,1.7 1.8,1.9,1.9,2.2), mean=1.48, stddev=0.238], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,1.1,1.2,1.9 2.0,2.2,2.4,2.6,2.9 3.0,3.2,3.2,3.8), mean=2.41, stddev=0.413]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0952381, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08719, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.39, stddev=0.00285], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.55,0.58 0.61,0.64,0.69,0.75,0.78 0.82,0.84,0.86,0.95), mean=0.694, stddev=0.0691], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08381, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.55,0.64,0.82 0.84,0.88,0.94,1.0,1.1 1.1,1.1,1.2,1.3), mean=0.942, stddev=0.106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.76,0.76,0.84 0.85,0.88,0.94,1.0,1.0 1.1,1.1,1.1,1.2), mean=0.945, stddev=0.078], bias-{mean,stddev}=-0.145,0.05288, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.85e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.65,0.75,0.93 0.99,1.1,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.17, stddev=0.156], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.43 0.44,0.47,0.50,0.54,0.55 0.56,0.58,0.58,0.60), mean=0.501, stddev=0.0447], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.003,0.003,0.005), mean=0.00152, stddev=0.000424], oderiv-count=8.96314e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.63,0.75,0.92 1.0,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.17, stddev=0.153], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,1.2,1.2,1.5 1.6,1.7,1.8,2.0,2.1 2.2,2.4,2.5,2.7), mean=1.84, stddev=0.245]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0952381, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08614, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.38, stddev=0.00391], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.53,0.56,0.57 0.59,0.62,0.69,0.75,0.77 0.79,0.80,0.83,0.88), mean=0.686, stddev=0.0675], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08066, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.63,0.75 0.80,0.84,0.91,0.97,1.0 1.1,1.1,1.1,1.2), mean=0.907, stddev=0.0991], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.73,0.75,0.80 0.81,0.83,0.90,0.97,1.0 1.0,1.1,1.1,1.2), mean=0.909, stddev=0.083], bias-{mean,stddev}=-0.1383,0.054, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.12e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.73,0.80,0.85 0.95,1.0,1.1,1.3,1.3 1.4,1.5,1.5,1.6), mean=1.14, stddev=0.159], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.39,0.42 0.44,0.46,0.50,0.53,0.54 0.56,0.57,0.58,0.61), mean=0.494, stddev=0.0426], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00154, stddev=0.000239], oderiv-count=8.12928e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.76,0.80,0.86 0.96,1.0,1.1,1.3,1.3 1.4,1.5,1.5,1.6), mean=1.14, stddev=0.156], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.4 1.5,1.6,1.8,1.9,2.1 2.2,2.2,2.3,2.7), mean=1.78, stddev=0.231]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0952381, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08652, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.38, stddev=0.00166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.53,0.54,0.58 0.60,0.63,0.68,0.74,0.78 0.80,0.83,0.85,0.93), mean=0.689, stddev=0.0683], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08026, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.56,0.75 0.78,0.83,0.91,0.99,1.0 1.0,1.1,1.1,1.2), mean=0.902, stddev=0.108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.75,0.76,0.77 0.79,0.82,0.90,0.97,1.0 1.0,1.1,1.1,1.1), mean=0.904, stddev=0.084], bias-{mean,stddev}=-0.1278,0.05206, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.68e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.65,0.85 0.96,1.0,1.1,1.2,1.3 1.4,1.4,1.5,1.5), mean=1.12, stddev=0.167], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.33,0.41 0.43,0.44,0.47,0.50,0.53 0.55,0.57,0.57,0.59), mean=0.474, stddev=0.0457], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00152, stddev=0.000253], oderiv-count=6.95546e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.54,0.65,0.83 0.95,1.0,1.1,1.2,1.3 1.4,1.4,1.5,1.5), mean=1.12, stddev=0.169], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.3,1.5 1.5,1.6,1.7,2.0,2.2 2.3,2.5,2.5,2.6), mean=1.8, stddev=0.269]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0952381, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08837, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.41, stddev=0.00104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.54,0.57 0.60,0.64,0.70,0.77,0.81 0.85,0.89,0.91,0.99), mean=0.702, stddev=0.0839], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0799, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.49,0.57,0.71 0.76,0.80,0.89,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.896, stddev=0.121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.73,0.73,0.74 0.79,0.82,0.89,0.97,1.0 1.0,1.1,1.1,1.3), mean=0.899, stddev=0.0934], bias-{mean,stddev}=-0.1077,0.05471, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.77e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.54,0.70,0.88 0.93,1.0,1.1,1.3,1.5 1.5,1.6,1.6,1.7), mean=1.16, stddev=0.205], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.30,0.38 0.41,0.42,0.45,0.47,0.48 0.51,0.54,0.54,0.56), mean=0.446, stddev=0.0444], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00146, stddev=0.000237], oderiv-count=5.91494e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.56,0.71,0.86 0.91,1.0,1.1,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.14, stddev=0.199], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.4 1.6,1.7,1.9,2.1,2.4 2.6,2.7,2.8,3.0), mean=1.95, stddev=0.333]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0952381, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09048, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.45, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.52,0.54,0.57 0.59,0.63,0.71,0.80,0.85 0.90,0.91,0.93,1.0), mean=0.717, stddev=0.0982], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08226, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.54,0.56,0.71 0.76,0.82,0.93,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.922, stddev=0.128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.74,0.76,0.78 0.81,0.84,0.93,1.0,1.0 1.1,1.1,1.1,1.2), mean=0.926, stddev=0.0902], bias-{mean,stddev}=-0.07908,0.04036, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.22e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.73,0.77,1.0 1.1,1.1,1.2,1.4,1.5 1.6,1.7,1.8,1.9), mean=1.25, stddev=0.198], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.34,0.35,0.40 0.41,0.43,0.45,0.47,0.49 0.50,0.50,0.52,0.52), mean=0.448, stddev=0.0354], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.0015, stddev=0.000219], oderiv-count=5.01984e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.72,0.78,0.99 1.0,1.1,1.2,1.4,1.5 1.6,1.7,1.7,1.9), mean=1.24, stddev=0.2], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.8,1.9,2.1,2.3,2.5 2.6,2.7,2.9,3.2), mean=2.12, stddev=0.3]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0952381, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09129, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.46, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.49,0.54,0.56 0.59,0.62,0.70,0.82,0.90 0.94,0.97,0.98,1.0), mean=0.721, stddev=0.114], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08214, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.47,0.63,0.73 0.75,0.85,0.92,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.92, stddev=0.128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.71,0.73,0.78 0.80,0.84,0.92,0.99,1.0 1.1,1.1,1.1,1.2), mean=0.925, stddev=0.0926], bias-{mean,stddev}=-0.07581,0.03505, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.66e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.66,0.86,0.97 1.0,1.1,1.2,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.2, stddev=0.168], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.34,0.37 0.39,0.40,0.43,0.46,0.47 0.49,0.50,0.52,0.53), mean=0.429, stddev=0.0413], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00182, stddev=0.00024], oderiv-count=3.96499e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.70,0.85,0.98 1.0,1.1,1.2,1.3,1.4 1.5,1.5,1.5,1.7), mean=1.2, stddev=0.172], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.8 1.8,1.9,2.1,2.4,2.5 2.7,2.7,2.8,3.0), mean=2.15, stddev=0.27]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0952381, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08493, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.36, stddev=0.00207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.49 0.52,0.56,0.65,0.78,0.84 0.87,0.92,0.94,1.1), mean=0.669, stddev=0.121], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07942, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.61,0.67 0.70,0.73,0.88,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.884, stddev=0.162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.73,0.74,0.78 0.79,0.81,0.89,0.97,1.0 1.0,1.0,1.0,1.1), mean=0.895, stddev=0.0803], bias-{mean,stddev}=-0.07831,0.03708, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.98e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.70,0.74,0.79 0.85,0.89,0.98,1.1,1.2 1.3,1.3,1.4,1.5), mean=1.01, stddev=0.148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.32,0.33 0.36,0.38,0.40,0.44,0.45 0.46,0.46,0.48,0.49), mean=0.403, stddev=0.0382], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.003,0.003,0.003), mean=0.0026, stddev=0.000299], oderiv-count=2.94765e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.72,0.75,0.81 0.84,0.89,1.0,1.1,1.2 1.3,1.4,1.4,1.5), mean=1.01, stddev=0.153], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.8,2.1,2.4,2.6 2.7,2.8,2.9,3.0), mean=2.11, stddev=0.34]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0952381, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.29, stddev=0.000772], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.47,0.48 0.50,0.53,0.61,0.73,0.79 0.85,0.90,0.93,0.95), mean=0.634, stddev=0.115], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07761, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.52,0.60 0.65,0.70,0.83,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.86, stddev=0.18], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.69,0.72,0.75 0.78,0.80,0.87,0.94,0.96 0.99,1.0,1.1,1.2), mean=0.874, stddev=0.0807], bias-{mean,stddev}=-0.08271,0.04766, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.62,0.64 0.67,0.73,0.84,0.94,1.0 1.0,1.1,1.2,1.4), mean=0.846, stddev=0.134], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.26 0.28,0.30,0.36,0.41,0.44 0.45,0.46,0.47,0.53), mean=0.357, stddev=0.0631], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.004,0.004,0.005 0.005,0.006,0.006,0.006), mean=0.00398, stddev=0.00057], oderiv-count=1.8409e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.61,0.66 0.68,0.74,0.85,0.96,1.0 1.1,1.1,1.2,1.4), mean=0.855, stddev=0.134], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.6 1.7,1.9,2.2,2.5,2.7 2.7,2.9,3.0,3.2), mean=2.2, stddev=0.362]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0952381, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08523, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.36, stddev=0.0021], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.50,0.52 0.54,0.58,0.65,0.77,0.83 0.87,0.90,0.93,1.0), mean=0.673, stddev=0.11], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08543, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.57,0.58,0.68 0.76,0.82,0.94,1.1,1.2 1.2,1.2,1.2,1.2), mean=0.953, stddev=0.162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.77,0.78,0.84 0.87,0.90,0.96,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.963, stddev=0.0806], bias-{mean,stddev}=-0.07394,0.06359, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.19e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.67,0.71 0.76,0.81,0.93,1.1,1.2 1.3,1.3,1.4,1.5), mean=0.952, stddev=0.17], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.20,0.23 0.28,0.30,0.36,0.41,0.43 0.44,0.46,0.47,0.49), mean=0.358, stddev=0.0634], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.006,0.006,0.007,0.008,0.008 0.009,0.009,0.009,0.01), mean=0.0071, stddev=0.000953], oderiv-count=619072
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.68,0.71 0.75,0.81,0.92,1.1,1.2 1.3,1.4,1.4,1.4), mean=0.961, stddev=0.18], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.9,2.0 2.1,2.2,2.8,3.3,3.5 3.6,3.7,3.8,4.1), mean=2.78, stddev=0.53]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0952381, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.005, max-change=0.75, params-rms=0.1204, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.36, stddev=0.011], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.76,0.76,0.79 0.82,0.88,0.96,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.959, stddev=0.0905], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1803, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.2 1.3,1.4,1.4,1.5,1.6 1.6,1.6,1.6,1.7), mean=1.44, stddev=0.115], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.9,1.9,2.0,2.1,2.2 2.2,2.2,2.3,2.3), mean=2.04, stddev=0.118], bias-{mean,stddev}=-0.0326,0.1242, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.4 1.4,1.5,1.6,1.8,1.9 2.0,2.0,2.0,2.1), mean=1.66, stddev=0.191], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.36 0.37,0.37,0.40,0.42,0.43 0.45,0.47,0.47,0.48), mean=0.401, stddev=0.027], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.009,0.009 0.009,0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.0109, stddev=0.00163], oderiv-count=619072
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.3 1.4,1.5,1.6,1.8,1.9 2.0,2.1,2.1,2.1), mean=1.65, stddev=0.205], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,3.1,3.1,3.2 3.4,3.5,3.9,4.3,4.7 4.8,4.9,5.1,5.7), mean=3.95, stddev=0.509]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, params-rms=0.2313, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.6,2.6,2.6 2.6,2.6,2.6,2.6,2.6 2.6,2.6,2.6,2.6), mean=2.62, stddev=0.0012], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.4,1.6 1.6,1.7,1.8,2.0,2.1 2.1,2.2,2.2,2.2), mean=1.84, stddev=0.192], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-3e-08 -3e-08,-2e-08,-5e-10,2e-08,3e-08 3e-08,4e-08,4e-08,4e-08), mean=1.25e-09, stddev=2.15e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.7,2.9,2.9 3.0,3.0,3.2,3.4,3.5 3.7,3.7,3.7,4.0), mean=3.24, stddev=0.229]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0018678, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.1966, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.16,0.24,0.52 0.81,1.1,1.6,1.9,2.0 2.1,2.2,2.3,2.9), mean=1.5, stddev=0.479], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,12 12,12,12,13,13 14,14,14,14), mean=12.5, stddev=0.722], bias-{mean,stddev}=0.001338,0.2828, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.72,0.75,0.88 0.92,0.95,1.0,1.1,1.1 1.1,1.1,1.2,1.2), mean=1, stddev=0.0861], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.3,1.3,1.4,1.5,1.6 1.6,1.6,1.6,1.7), mean=1.42, stddev=0.108], bias-{mean,stddev}=-0.02813,0.1835, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.21e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.60,0.60,0.69 0.73,0.80,0.94,1.1,1.3 1.4,1.5,1.5,1.7), mean=0.974, stddev=0.221], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.37,0.38 0.41,0.42,0.47,0.52,0.55 0.56,0.62,0.62,0.65), mean=0.472, stddev=0.0594], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.005,0.005,0.006,0.006,0.007 0.007,0.007,0.007,0.02), mean=0.00591, stddev=0.00104], oderiv-count=599488
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.55,0.63,0.67 0.70,0.78,0.90,1.1,1.3 1.3,1.5,1.5,1.7), mean=0.96, stddev=0.223], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.3,1.5,1.7,1.7 1.8,1.8,1.9,2.0), mean=1.47, stddev=0.2]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0018678, l2-regularize=0.0005, max-change=0.75, params-rms=0.1306, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.48, stddev=0.000691], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.81,0.81,0.86 0.89,0.93,1.0,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.04, stddev=0.117], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-3e-08 -3e-08,-2e-08,-7e-09,1e-08,2e-08 3e-08,3e-08,3e-08,4e-08), mean=-5.47e-09, stddev=1.97e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.4,1.5,1.5,1.6 1.6,1.7,1.7,1.7), mean=1.47, stddev=0.0952]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00933898, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1964, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.08,0.30 0.76,1.1,1.5,1.9,2.1 2.3,2.5,2.5,3.9), mean=1.47, stddev=0.558], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,13,13,13 13,13,13,13), mean=12.5, stddev=0.226], bias-{mean,stddev}=2.561e-08,0.1973, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0001,0.0002,0.0006,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000808, stddev=0.0012], oderiv-count=611456
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/285.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/286.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.23575 tdnnf2.linear:2.93407 tdnnf2.affine:3.41368 tdnnf3.linear:2.59185 tdnnf3.affine:3.4751 tdnnf4.linear:2.43668 tdnnf4.affine:3.34982 tdnnf5.linear:2.17545 tdnnf5.affine:2.5216 tdnnf6.linear:2.0416 tdnnf6.affine:2.32515 tdnnf7.linear:1.8877 tdnnf7.affine:2.20575 tdnnf8.linear:1.78748 tdnnf8.affine:2.07637 tdnnf9.linear:1.78231 tdnnf9.affine:2.14115 tdnnf10.linear:1.83489 tdnnf10.affine:2.2453 tdnnf11.linear:1.93577 tdnnf11.affine:2.39978 tdnnf12.linear:2.04387 tdnnf12.affine:2.53196 tdnnf13.linear:2.28687 tdnnf13.affine:2.90162 prefinal-l:3.13333 prefinal-chain.affine:3.42618 prefinal-chain.linear:3.18507 output.affine:7.67667 prefinal-xent.affine:1.90332 prefinal-xent.linear:1.19455 output-xent.affine:6.77651 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:21.8869 tdnnf2.linear:14.1837 tdnnf2.affine:14.3944 tdnnf3.linear:13.2022 tdnnf3.affine:14.1151 tdnnf4.linear:12.2023 tdnnf4.affine:13.1461 tdnnf5.linear:11.1599 tdnnf5.affine:10.8692 tdnnf6.linear:11.0254 tdnnf6.affine:10.4601 tdnnf7.linear:11.0746 tdnnf7.affine:10.3914 tdnnf8.linear:11.3108 tdnnf8.affine:10.3181 tdnnf9.linear:11.5819 tdnnf9.affine:10.5773 tdnnf10.linear:11.6851 tdnnf10.affine:10.5561 tdnnf11.linear:10.8712 tdnnf11.affine:10.2128 tdnnf12.linear:10.3097 tdnnf12.affine:9.9929 tdnnf13.linear:10.9094 tdnnf13.affine:10.9903 prefinal-l:10.8974 prefinal-chain.affine:16.3835 prefinal-chain.linear:20.9345 output.affine:101.558 prefinal-xent.affine:11.5947 prefinal-xent.linear:11.8246 output-xent.affine:100.649 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.286088 tdnnf2.linear:0.207341 tdnnf2.affine:0.238436 tdnnf3.linear:0.197517 tdnnf3.affine:0.24939 tdnnf4.linear:0.201507 tdnnf4.affine:0.259539 tdnnf5.linear:0.195918 tdnnf5.affine:0.233542 tdnnf6.linear:0.185722 tdnnf6.affine:0.22324 tdnnf7.linear:0.170811 tdnnf7.affine:0.212616 tdnnf8.linear:0.158033 tdnnf8.affine:0.20138 tdnnf9.linear:0.154003 tdnnf9.affine:0.20244 tdnnf10.linear:0.156804 tdnnf10.affine:0.212221 tdnnf11.linear:0.178103 tdnnf11.affine:0.235098 tdnnf12.linear:0.198259 tdnnf12.affine:0.253397 tdnnf13.linear:0.209891 tdnnf13.affine:0.264487 prefinal-l:0.28776 prefinal-chain.affine:0.20856 prefinal-chain.linear:0.151494 output.affine:0.0753255 prefinal-xent.affine:0.163864 prefinal-xent.linear:0.100878 output-xent.affine:0.0673511 ]
# Accounting: time=5 threads=1
# Ended (code 0) at Mon Feb 24 13:08:42 CST 2020, elapsed time 5 seconds
