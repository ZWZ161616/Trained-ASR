# nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/279.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/280.mdl 
# Started at Mon Feb 24 12:58:57 CST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/279.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/280.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.03825, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.45 0.46,0.49,0.55,0.63,0.66 0.68,0.71,0.71,0.84), mean=0.562, stddev=0.0771], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.19 0.21,0.23,0.40,0.57,0.63 0.66,0.69,0.70,0.75), mean=0.403, stddev=0.159], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.13 0.16,0.22,0.44,0.75,0.91 1.0,1.1,1.1,1.2), mean=0.493, stddev=0.28], bias-{mean,stddev}=-0.0001666,0.02839, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0,0,0,0.17), mean=0.0021, stddev=0.0174], oderiv-count=45952
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.11746, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02447, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.35,0.35 0.36,0.37,0.39,0.41,0.41 0.42,0.43,0.44,0.44), mean=0.391, stddev=0.0226], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.16,0.17,0.19,0.22,0.23 0.25,0.26,0.27,0.30), mean=0.194, stddev=0.0297], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.16,0.18 0.20,0.24,0.34,0.49,0.55 0.59,0.64,0.66,0.69), mean=0.367, stddev=0.137], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02791, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.25,0.26 0.27,0.29,0.31,0.34,0.35 0.35,0.36,0.37,0.44), mean=0.314, stddev=0.0299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.28 0.28,0.30,0.32,0.33,0.34 0.35,0.36,0.37,0.39), mean=0.315, stddev=0.0235], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.007,0.02 0.03,0.07,0.22,0.43,0.52 0.59,0.65,0.66,0.73), mean=0.255, stddev=0.186], bias-{mean,stddev}=0.0008171,0.0131, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.6e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-1.0,-0.54,-0.12 0.02,0.40,1.1,1.7,1.9 2.4,2.7,2.9,3.6), mean=1.08, stddev=0.8], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,-0.14,-0.14,0.06 0.13,0.31,0.51,0.70,0.98 1.1,1.3,1.4,1.5), mean=0.528, stddev=0.316]
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.11746, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02151, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.30,0.31 0.31,0.32,0.34,0.36,0.37 0.37,0.38,0.38,0.44), mean=0.343, stddev=0.0231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.13 0.14,0.15,0.17,0.19,0.20 0.21,0.21,0.23,0.25), mean=0.171, stddev=0.0219], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.16 0.17,0.20,0.30,0.43,0.49 0.53,0.56,0.58,0.59), mean=0.322, stddev=0.122], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02779, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.27,0.29,0.31,0.34,0.35 0.36,0.37,0.38,0.41), mean=0.313, stddev=0.0304], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.28 0.29,0.30,0.31,0.33,0.34 0.35,0.35,0.36,0.38), mean=0.314, stddev=0.0213], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.005,0.008,0.01 0.04,0.07,0.22,0.42,0.52 0.59,0.64,0.66,0.69), mean=0.255, stddev=0.184], bias-{mean,stddev}=0.0003444,0.009972, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.88e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-24,-21,-21,-16 -13,-10,-3.8,2.8,5.9 9.9,13,18,23), mean=-3.41, stddev=8.11], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-10,-5.4,-4.3,-3.8 -2.8,-2.0,0.19,2.2,3.4 4.7,8.3,8.4,12), mean=0.385, stddev=2.93], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0.005 0.007,0.009,0.009,0.01), mean=0.00106, stddev=0.00247], oderiv-count=19392
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.11746, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01992, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.28,0.28 0.29,0.30,0.32,0.33,0.34 0.35,0.36,0.36,0.38), mean=0.318, stddev=0.0208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.14,0.16,0.17,0.18 0.19,0.20,0.20,0.21), mean=0.158, stddev=0.0186], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.14 0.15,0.19,0.28,0.41,0.46 0.48,0.51,0.52,0.53), mean=0.298, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02535, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.23,0.23,0.25 0.25,0.26,0.29,0.31,0.31 0.32,0.34,0.34,0.37), mean=0.286, stddev=0.0264], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.25 0.26,0.27,0.29,0.30,0.31 0.32,0.33,0.33,0.35), mean=0.286, stddev=0.0217], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.005,0.02 0.03,0.06,0.20,0.39,0.48 0.54,0.57,0.58,0.67), mean=0.231, stddev=0.169], bias-{mean,stddev}=0.0008069,0.009034, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.11746, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01766, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.25,0.26 0.26,0.27,0.28,0.29,0.30 0.31,0.31,0.31,0.32), mean=0.282, stddev=0.0159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.11 0.12,0.13,0.14,0.15,0.16 0.17,0.17,0.17,0.18), mean=0.14, stddev=0.0152], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.13 0.14,0.16,0.25,0.36,0.40 0.44,0.46,0.46,0.48), mean=0.264, stddev=0.101], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.20,0.22,0.23,0.25,0.26 0.26,0.27,0.28,0.28), mean=0.231, stddev=0.0196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.26,0.27,0.27,0.28), mean=0.231, stddev=0.0179], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.01 0.03,0.06,0.16,0.31,0.38 0.43,0.48,0.49,0.53), mean=0.188, stddev=0.135], bias-{mean,stddev}=0.001223,0.006484, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.58e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-43,-30,-25,-18 -16,-11,-1.8,9.1,13 19,23,26,28), mean=-0.725, stddev=11.9], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-10,-9.7,-8.7,-7.1 -5.0,-3.3,-0.33,3.9,6.1 6.6,7.6,8.0,9.9), mean=-0.00333, stddev=4.13]
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.11746, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01639, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.23 0.24,0.24,0.26,0.27,0.28 0.30,0.30,0.30,0.31), mean=0.262, stddev=0.0187], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.16,0.16,0.17), mean=0.13, stddev=0.014], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.13 0.14,0.16,0.23,0.32,0.37 0.41,0.42,0.43,0.45), mean=0.246, stddev=0.0907], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.01864, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.18 0.19,0.19,0.21,0.23,0.24 0.24,0.25,0.25,0.26), mean=0.21, stddev=0.0195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.18,0.18 0.19,0.19,0.21,0.23,0.23 0.24,0.24,0.24,0.25), mean=0.21, stddev=0.0169], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.004,0.01 0.02,0.05,0.15,0.29,0.35 0.39,0.44,0.45,0.49), mean=0.171, stddev=0.124], bias-{mean,stddev}=-0.0002797,0.006082, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.41e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-10,-4.5,-4.0,-3.4 -2.4,-1.3,0.61,2.1,2.9 3.8,4.4,4.6,7.0), mean=0.416, stddev=2.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-1.2,-1.1,-0.71 -0.38,-0.05,0.42,0.81,1.2 1.4,1.6,1.6,2.1), mean=0.397, stddev=0.601], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.002,0.002 0.003,0.003,0.003,0.005), mean=0.000685, stddev=0.00104], oderiv-count=238272
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.11746, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01531, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.22,0.22 0.22,0.23,0.24,0.26,0.26 0.27,0.27,0.27,0.28), mean=0.244, stddev=0.0152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.10,0.11,0.12,0.13,0.14 0.14,0.15,0.15,0.16), mean=0.122, stddev=0.0129], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.11 0.12,0.14,0.22,0.31,0.35 0.37,0.39,0.40,0.42), mean=0.229, stddev=0.0858], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.01788, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.17 0.18,0.18,0.20,0.22,0.23 0.24,0.24,0.24,0.27), mean=0.201, stddev=0.0203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.17 0.18,0.19,0.20,0.21,0.22 0.23,0.24,0.24,0.25), mean=0.202, stddev=0.0172], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.002,0.004,0.01 0.02,0.05,0.14,0.27,0.34 0.38,0.42,0.44,0.46), mean=0.163, stddev=0.12], bias-{mean,stddev}=0.0004283,0.005259, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.54e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.13,-0.04,0.24,0.29 0.51,0.80,1.2,1.5,1.7 1.8,2.1,2.2,2.3), mean=1.15, stddev=0.452], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.23,0.25,0.28 0.31,0.35,0.46,0.58,0.63 0.65,0.66,0.71,0.83), mean=0.468, stddev=0.122]
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.11746, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01479, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.21 0.22,0.22,0.24,0.25,0.25 0.25,0.26,0.26,0.27), mean=0.236, stddev=0.0146], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.09 0.10,0.10,0.12,0.13,0.14 0.14,0.15,0.15,0.16), mean=0.117, stddev=0.0155], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.10 0.11,0.13,0.21,0.30,0.34 0.37,0.38,0.40,0.42), mean=0.22, stddev=0.0866], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.01734, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.17,0.18,0.20,0.21,0.22 0.23,0.23,0.24,0.26), mean=0.195, stddev=0.0207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.16,0.17 0.18,0.18,0.19,0.21,0.22 0.22,0.23,0.24,0.25), mean=0.195, stddev=0.0164], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.004,0.01 0.02,0.05,0.13,0.26,0.33 0.38,0.42,0.43,0.45), mean=0.157, stddev=0.117], bias-{mean,stddev}=-4.516e-05,0.004758, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.11746, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0149, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.26,0.27,0.27,0.28), mean=0.238, stddev=0.0177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.11,0.12,0.13,0.14 0.14,0.15,0.16,0.17), mean=0.118, stddev=0.0162], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.11,0.13,0.21,0.30,0.34 0.36,0.39,0.40,0.43), mean=0.221, stddev=0.0896], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.01721, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.17 0.17,0.18,0.19,0.20,0.22 0.22,0.23,0.23,0.26), mean=0.194, stddev=0.0177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.17 0.18,0.18,0.19,0.21,0.21 0.22,0.22,0.23,0.23), mean=0.194, stddev=0.0137], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.002,0.004,0.01 0.02,0.05,0.13,0.26,0.33 0.38,0.41,0.43,0.46), mean=0.156, stddev=0.116], bias-{mean,stddev}=0.0007768,0.00425, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.73e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-15,-12,-12,-10 -7.8,-5.3,1.4,6.5,9.3 11,13,13,19), mean=0.933, stddev=6.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-2.6,-2.3,-1.7 -0.99,-0.64,0.55,1.7,2.3 3.0,3.2,3.3,4.7), mean=0.612, stddev=1.39]
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.11746, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01508, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.20,0.21 0.22,0.23,0.24,0.25,0.26 0.26,0.27,0.28,0.29), mean=0.241, stddev=0.0174], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.11,0.12,0.13,0.14 0.15,0.15,0.16,0.17), mean=0.12, stddev=0.0158], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.11,0.13,0.21,0.31,0.35 0.37,0.39,0.41,0.42), mean=0.224, stddev=0.0905], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.01802, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.18,0.19,0.20,0.22,0.22 0.23,0.24,0.24,0.26), mean=0.203, stddev=0.0183], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.18 0.18,0.19,0.20,0.22,0.22 0.23,0.23,0.23,0.24), mean=0.203, stddev=0.0145], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.002,0.004,0.01 0.02,0.05,0.14,0.28,0.34 0.38,0.41,0.43,0.46), mean=0.165, stddev=0.12], bias-{mean,stddev}=0.0004062,0.004726, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.47e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.41,0.42,0.69 0.75,0.89,1.3,1.6,1.8 1.9,2.2,2.2,2.3), mean=1.28, stddev=0.394], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.26 0.32,0.38,0.43,0.50,0.55 0.57,0.62,0.65,0.75), mean=0.439, stddev=0.0931]
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.11746, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01559, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.22,0.22 0.23,0.23,0.25,0.26,0.27 0.27,0.27,0.27,0.28), mean=0.249, stddev=0.0156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.10,0.11,0.12,0.14,0.14 0.15,0.16,0.16,0.17), mean=0.123, stddev=0.0172], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.11,0.13,0.22,0.32,0.37 0.38,0.40,0.43,0.44), mean=0.231, stddev=0.095], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.01949, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.26,0.26,0.27), mean=0.219, stddev=0.0218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.25,0.28), mean=0.22, stddev=0.0166], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.003,0.004,0.01 0.02,0.05,0.15,0.30,0.38 0.41,0.45,0.47,0.51), mean=0.177, stddev=0.132], bias-{mean,stddev}=9.008e-05,0.005137, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.11746, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01668, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.23 0.25,0.25,0.27,0.28,0.28 0.29,0.30,0.31,0.32), mean=0.266, stddev=0.0184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.11,0.12,0.13,0.15,0.15 0.16,0.17,0.17,0.18), mean=0.132, stddev=0.0183], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.11 0.12,0.15,0.23,0.34,0.39 0.41,0.43,0.46,0.49), mean=0.246, stddev=0.103], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.26 0.27,0.30,0.30,0.30), mean=0.233, stddev=0.0242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.26,0.27,0.27,0.28), mean=0.234, stddev=0.0176], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.006,0.01 0.03,0.06,0.15,0.32,0.40 0.46,0.49,0.50,0.54), mean=0.188, stddev=0.14], bias-{mean,stddev}=-0.0001668,0.007767, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.11e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.32,-0.14,0.06,0.23 0.36,0.48,0.81,1.2,1.3 1.4,1.5,1.6,2.2), mean=0.822, stddev=0.388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.04,0.01,0.03,0.07 0.12,0.19,0.34,0.47,0.52 0.58,0.63,0.64,0.70), mean=0.337, stddev=0.154]
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.11746, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.01845, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.25,0.26 0.27,0.27,0.29,0.31,0.32 0.33,0.33,0.34,0.34), mean=0.294, stddev=0.0213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.15,0.16,0.17 0.18,0.18,0.19,0.20), mean=0.146, stddev=0.0184], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.12 0.13,0.16,0.25,0.37,0.43 0.46,0.50,0.53,0.55), mean=0.272, stddev=0.115], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02353, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.23 0.23,0.24,0.26,0.29,0.30 0.31,0.31,0.33,0.36), mean=0.265, stddev=0.0272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.23,0.23 0.24,0.25,0.26,0.28,0.29 0.29,0.31,0.32,0.33), mean=0.265, stddev=0.0206], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.003,0.007,0.02 0.03,0.06,0.18,0.35,0.45 0.51,0.58,0.59,0.61), mean=0.213, stddev=0.16], bias-{mean,stddev}=-0.0005225,0.008913, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.11746, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.005, max-change=0.75, params-rms=0.03557, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.34,0.35 0.37,0.38,0.41,0.42,0.43 0.44,0.45,0.45,0.49), mean=0.401, stddev=0.0281], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.22,0.23 0.24,0.25,0.28,0.31,0.32 0.33,0.34,0.34,0.35), mean=0.283, stddev=0.0308], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.14 0.16,0.20,0.36,0.53,0.59 0.62,0.66,0.67,0.69), mean=0.369, stddev=0.16], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.03934, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.25,0.26 0.27,0.28,0.31,0.34,0.36 0.37,0.39,0.40,0.41), mean=0.313, stddev=0.0364], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.37,0.39 0.40,0.43,0.44,0.47,0.48 0.50,0.51,0.51,0.51), mean=0.444, stddev=0.032], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.12,0.13 0.16,0.22,0.39,0.58,0.65 0.70,0.74,0.75,0.80), mean=0.405, stddev=0.185], bias-{mean,stddev}=-0.0006634,0.0135, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.2e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.5,-3.2,-3.0,-1.8 -1.3,-0.31,1.1,2.7,3.2 3.6,4.0,4.4,4.8), mean=1.12, stddev=1.75], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.33,-0.27,-0.26,-0.14 -0.01,0.09,0.34,0.65,0.74 0.85,0.93,1.0,1.1), mean=0.363, stddev=0.306]
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, params-rms=0.03645, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.37 0.38,0.38,0.41,0.43,0.44 0.45,0.46,0.47,0.47), mean=0.412, stddev=0.0268], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.24 0.24,0.26,0.29,0.32,0.33 0.35,0.36,0.36,0.37), mean=0.29, stddev=0.033], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.12,0.13 0.17,0.21,0.36,0.53,0.60 0.65,0.68,0.69,0.71), mean=0.378, stddev=0.164], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00196586, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.01556, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.002,0.003,0.009 0.01,0.02,0.06,0.16,0.22 0.27,0.31,0.34,0.45), mean=0.0931, stddev=0.0826], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.90,0.93 0.93,0.94,0.98,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.988, stddev=0.0465], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.33,0.58 0.64,0.74,0.95,1.2,1.3 1.3,1.4,1.4,1.4), mean=0.954, stddev=0.26], bias-{mean,stddev}=1.794e-06,0.02217, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.02198, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.14,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.175, stddev=0.019], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.21,0.22 0.22,0.23,0.25,0.26,0.27 0.28,0.29,0.29,0.29), mean=0.248, stddev=0.0193], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.08 0.10,0.13,0.21,0.32,0.37 0.39,0.41,0.42,0.44), mean=0.228, stddev=0.0995], bias-{mean,stddev}=-0.0003213,0.008366, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.18e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,-0.16,-0.16,0.10 0.36,0.53,0.86,1.4,1.6 1.7,2.1,2.1,2.5), mean=0.95, stddev=0.521], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.25 0.29,0.37,0.49,0.60,0.65 0.69,0.76,0.78,0.82), mean=0.481, stddev=0.144]
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00196586, l2-regularize=0.0005, max-change=0.75, params-rms=0.01441, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.15 0.15,0.15,0.16,0.17,0.17 0.18,0.18,0.18,0.18), mean=0.163, stddev=0.0104], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.10 0.10,0.10,0.11,0.13,0.13 0.14,0.14,0.14,0.14), mean=0.115, stddev=0.0128], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.09,0.14,0.21,0.24 0.25,0.27,0.27,0.28), mean=0.151, stddev=0.0625], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00982928, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.01389, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.002,0.005,0.01 0.02,0.03,0.07,0.14,0.19 0.22,0.26,0.28,0.44), mean=0.0892, stddev=0.0662], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.82,0.82,0.83 0.85,0.85,0.88,0.91,0.92 0.93,0.94,0.97,0.97), mean=0.882, stddev=0.0317], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.52,0.55 0.59,0.65,0.86,1.0,1.1 1.2,1.2,1.2,1.2), mean=0.861, stddev=0.196], bias-{mean,stddev}=3.699e-09,0.01043, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040

LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.42642 tdnnf2.linear:3.13245 tdnnf2.affine:3.57591 tdnnf3.linear:2.75362 tdnnf3.affine:3.55855 tdnnf4.linear:2.55032 tdnnf4.affine:3.24606 tdnnf5.linear:2.26024 tdnnf5.affine:2.62089 tdnnf6.linear:2.09783 tdnnf6.affine:2.38633 tdnnf7.linear:1.95961 tdnnf7.affine:2.28969 tdnnf8.linear:1.89307 tdnnf8.affine:2.22009 tdnnf9.linear:1.90709 tdnnf9.affine:2.20316 tdnnf10.linear:1.9301 tdnnf10.affine:2.30763 tdnnf11.linear:1.9949 tdnnf11.affine:2.49582 tdnnf12.linear:2.13505 tdnnf12.affine:2.65575 tdnnf13.linear:2.3616 tdnnf13.affine:3.01361 prefinal-l:3.21972 prefinal-chain.affine:3.56423 prefinal-chain.linear:3.29903 output.affine:8.03525 prefinal-xent.affine:1.99189 prefinal-xent.linear:1.30447 output-xent.affine:7.09384 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.2793 tdnnf2.linear:14.3227 tdnnf2.affine:14.527 tdnnf3.linear:13.3489 tdnnf3.affine:14.3177 tdnnf4.linear:12.293 tdnnf4.affine:12.9067 tdnnf5.linear:11.2303 tdnnf5.affine:10.9698 tdnnf6.linear:11.1404 tdnnf6.affine:10.5742 tdnnf7.linear:11.1688 tdnnf7.affine:10.512 tdnnf8.linear:11.4101 tdnnf8.affine:10.4013 tdnnf9.linear:11.6903 tdnnf9.affine:10.6866 tdnnf10.linear:11.8314 tdnnf10.affine:10.6967 tdnnf11.linear:11.0196 tdnnf11.affine:10.3013 tdnnf12.linear:10.414 tdnnf12.affine:10.1081 tdnnf13.linear:11.0812 tdnnf13.affine:11.1213 prefinal-l:11.0006 prefinal-chain.affine:16.7105 prefinal-chain.linear:21.5595 output.affine:103.646 prefinal-xent.affine:11.8004 prefinal-xent.linear:11.9844 output-xent.affine:100.532 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.290562 tdnnf2.linear:0.22051 tdnnf2.affine:0.248453 tdnnf3.linear:0.208007 tdnnf3.affine:0.25302 tdnnf4.linear:0.209996 tdnnf4.affine:0.255796 tdnnf5.linear:0.201925 tdnnf5.affine:0.240467 tdnnf6.linear:0.189106 tdnnf6.affine:0.226708 tdnnf7.linear:0.176191 tdnnf7.affine:0.218702 tdnnf8.linear:0.16665 tdnnf8.affine:0.214571 tdnnf9.linear:0.163554 tdnnf9.affine:0.206646 tdnnf10.linear:0.163565 tdnnf10.affine:0.216364 tdnnf11.linear:0.180886 tdnnf11.affine:0.242052 tdnnf12.linear:0.204876 tdnnf12.affine:0.262969 tdnnf13.linear:0.213156 tdnnf13.affine:0.271383 prefinal-l:0.290759 prefinal-chain.affine:0.213547 prefinal-chain.linear:0.152833 output.affine:0.0773126 prefinal-xent.affine:0.168684 prefinal-xent.linear:0.108946 output-xent.affine:0.0705892 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 12:59:00 CST 2020, elapsed time 3 seconds
