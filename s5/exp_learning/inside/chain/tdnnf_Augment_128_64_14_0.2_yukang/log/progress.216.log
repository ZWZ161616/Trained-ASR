# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/216.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/215.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/216.mdl 
# Started at Mon Feb 24 11:26:14 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/216.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1503, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.4,1.6 1.7,1.8,2.0,2.5,3.0 3.1,3.3,3.3,3.5), mean=2.18, stddev=0.488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.57,0.64,0.68 0.75,0.88,1.5,2.0,2.5 2.8,2.9,3.1,3.6), mean=1.57, stddev=0.644], bias-{mean,stddev}=-0.1441,0.2071, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=9.37e+06, self-repaired-proportion=0.0215851, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.007,0.02 0.03,0.05,0.11,0.20,0.24 0.29,0.33,0.34,0.35), mean=0.126, stddev=0.0854], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.05,0.09 0.11,0.17,0.31,0.52,0.67 0.69,0.74,0.76,0.80), mean=0.345, stddev=0.194], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.06,0.07,0.10,0.14), mean=0.0392, stddev=0.0182], oderiv-count=1.3395e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.005,0.008,0.02 0.03,0.05,0.10,0.19,0.26 0.29,0.30,0.33,0.36), mean=0.124, stddev=0.0861], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.05,0.09 0.11,0.14,0.22,0.28,0.30 0.31,0.34,0.35,0.35), mean=0.21, stddev=0.0748]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.31746, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1242, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.99, stddev=0.00272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.73,0.77,0.81 0.84,0.89,0.98,1.1,1.1 1.2,1.2,1.2,1.4), mean=0.987, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1237, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.4,1.5,1.6 1.7,1.8,1.8,1.8), mean=1.39, stddev=0.159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.3,1.3,1.4,1.5,1.5 1.6,1.6,1.6,1.7), mean=1.4, stddev=0.106], bias-{mean,stddev}=-0.181,0.1056, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.94e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,1.0,1.3 1.4,1.5,1.7,1.9,2.0 2.1,2.2,2.2,2.3), mean=1.7, stddev=0.262], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.37,0.38 0.40,0.45,0.54,0.58,0.59 0.60,0.61,0.61,0.62), mean=0.519, stddev=0.0703], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.003,0.006,0.007,0.008), mean=0.00179, stddev=0.00105], oderiv-count=1.20113e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.94,0.98,1.3 1.4,1.5,1.7,1.9,2.0 2.1,2.2,2.2,2.2), mean=1.69, stddev=0.261], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.7,1.7,2.0 2.1,2.3,2.6,3.1,3.2 3.4,3.7,3.7,3.8), mean=2.67, stddev=0.453]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.31746, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1102, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.76, stddev=0.00561], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.71,0.72,0.73 0.77,0.80,0.87,0.96,1.0 1.0,1.0,1.1,1.2), mean=0.877, stddev=0.0911], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.93,0.94,1.1 1.1,1.2,1.3,1.4,1.5 1.6,1.7,1.7,1.7), mean=1.3, stddev=0.164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.3,1.4,1.5 1.5,1.5,1.5,1.6), mean=1.31, stddev=0.108], bias-{mean,stddev}=-0.1852,0.09484, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.25e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,1.2,1.4,1.6 1.6,1.8,2.0,2.2,2.3 2.3,2.4,2.5,2.7), mean=1.99, stddev=0.27], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.40,0.42 0.44,0.48,0.51,0.56,0.57 0.58,0.59,0.59,0.59), mean=0.513, stddev=0.0494], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.002 0.003,0.003,0.004,0.008), mean=0.00115, stddev=0.000868], oderiv-count=1.11116e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,1.2,1.4,1.5 1.6,1.8,2.0,2.2,2.3 2.3,2.4,2.4,2.6), mean=1.95, stddev=0.273], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,1.6,1.9,2.4 2.6,2.7,3.1,3.5,3.7 3.8,4.0,4.1,4.4), mean=3.09, stddev=0.498]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.31746, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1039, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0.00548], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.64,0.67,0.71 0.73,0.76,0.82,0.89,0.93 0.96,0.99,1.0,1.1), mean=0.827, stddev=0.0784], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.65,0.77,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.21, stddev=0.141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.96,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,2.0), mean=1.21, stddev=0.144], bias-{mean,stddev}=-0.1731,0.1024, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.71e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.89,0.92,1.6 1.8,1.9,2.1,2.3,2.5 2.6,2.6,2.7,2.9), mean=2.08, stddev=0.34], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.41 0.44,0.47,0.51,0.55,0.57 0.58,0.58,0.58,0.60), mean=0.507, stddev=0.0498], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.0006,0.0007,0.0008,0.0009,0.001 0.002,0.003,0.004,0.007), mean=0.000913, stddev=0.000681], oderiv-count=9.6624e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.88,0.97,1.6 1.7,1.9,2.1,2.3,2.4 2.5,2.7,2.8,2.8), mean=2.06, stddev=0.344], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,1.4,1.4,2.6 2.7,2.9,3.2,3.7,4.0 4.3,4.6,4.6,5.3), mean=3.27, stddev=0.632]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.31746, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09658, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.63,0.64 0.68,0.70,0.76,0.83,0.87 0.90,0.94,0.97,1.0), mean=0.769, stddev=0.078], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09464, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.61,0.87 0.94,1.0,1.1,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.06, stddev=0.125], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.86,0.89 0.92,0.97,1.1,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.07, stddev=0.11], bias-{mean,stddev}=-0.1444,0.06426, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.13e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.78,0.78,1.4 1.6,1.7,1.9,2.1,2.2 2.2,2.3,2.3,2.4), mean=1.85, stddev=0.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.44 0.46,0.48,0.51,0.55,0.57 0.57,0.59,0.59,0.61), mean=0.513, stddev=0.0423], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0007 0.0007,0.0008,0.0008,0.001,0.001 0.001,0.002,0.003,0.003), mean=0.000927, stddev=0.000366], oderiv-count=8.8999e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.84,0.96,1.4 1.5,1.6,1.8,2.0,2.2 2.2,2.3,2.3,2.4), mean=1.83, stddev=0.267], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,2.2 2.4,2.5,2.8,3.1,3.4 3.7,3.8,3.8,4.3), mean=2.83, stddev=0.453]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.31746, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09135, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.46, stddev=0.00254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.57,0.58,0.60 0.64,0.67,0.73,0.79,0.82 0.84,0.87,0.89,0.92), mean=0.727, stddev=0.0721], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08647, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.65,0.83 0.86,0.90,0.97,1.1,1.1 1.1,1.1,1.2,1.3), mean=0.972, stddev=0.11], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.81,0.85 0.86,0.88,0.96,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.973, stddev=0.1], bias-{mean,stddev}=-0.1434,0.05689, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.91e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,1.1,1.1,1.2 1.3,1.5,1.6,1.8,1.9 2.0,2.0,2.1,2.2), mean=1.62, stddev=0.223], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.40,0.42 0.43,0.46,0.50,0.53,0.54 0.55,0.57,0.58,0.60), mean=0.495, stddev=0.0419], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00101, stddev=0.000178], oderiv-count=8.19936e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.1,1.1,1.2 1.3,1.4,1.6,1.8,1.9 2.0,2.0,2.0,2.2), mean=1.61, stddev=0.227], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.9,2.1 2.1,2.2,2.4,2.8,2.9 3.1,3.2,3.2,3.6), mean=2.48, stddev=0.341]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.31746, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09246, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.48, stddev=0.00218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.55,0.57,0.61 0.65,0.67,0.74,0.80,0.83 0.85,0.89,0.90,0.92), mean=0.736, stddev=0.074], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0872, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.61,0.62,0.81 0.83,0.89,0.99,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.979, stddev=0.121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.82,0.82,0.84 0.85,0.89,0.97,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.982, stddev=0.0963], bias-{mean,stddev}=-0.1248,0.06293, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.39e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.76,1.0,1.2 1.4,1.5,1.6,1.8,2.0 2.1,2.1,2.2,2.3), mean=1.65, stddev=0.255], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.33,0.41 0.43,0.45,0.47,0.50,0.53 0.54,0.56,0.57,0.61), mean=0.474, stddev=0.0457], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.00101, stddev=0.000185], oderiv-count=6.88211e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.78,1.1,1.3 1.4,1.5,1.6,1.8,1.9 2.0,2.2,2.2,2.3), mean=1.63, stddev=0.252], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,2.0,2.1 2.2,2.3,2.5,2.9,3.2 3.4,3.5,3.5,4.0), mean=2.62, stddev=0.398]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.31746, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09608, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.54, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.56,0.59,0.63 0.66,0.70,0.77,0.82,0.86 0.92,0.95,0.96,1.0), mean=0.764, stddev=0.0837], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08828, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.57,0.78 0.81,0.89,1.0,1.1,1.2 1.2,1.2,1.3,1.3), mean=0.989, stddev=0.143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.78,0.81,0.84 0.87,0.90,0.98,1.1,1.1 1.2,1.2,1.3,1.3), mean=0.992, stddev=0.112], bias-{mean,stddev}=-0.0959,0.06345, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.9e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.86,0.92,1.3 1.4,1.5,1.7,1.9,2.2 2.3,2.4,2.4,2.5), mean=1.69, stddev=0.309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.39 0.42,0.43,0.45,0.49,0.50 0.50,0.51,0.54,0.67), mean=0.455, stddev=0.0465], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00102, stddev=0.000164], oderiv-count=5.90451e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.82,1.0,1.2 1.4,1.5,1.7,1.8,2.1 2.3,2.4,2.4,2.6), mean=1.68, stddev=0.311], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.1,2.2 2.3,2.4,2.8,3.1,3.4 3.7,3.9,4.0,4.1), mean=2.81, stddev=0.446]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.31746, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1003, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00409], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.55,0.60,0.64 0.67,0.70,0.80,0.89,0.93 0.96,0.98,1.0,1.1), mean=0.795, stddev=0.104], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09163, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.56,0.59,0.72 0.82,0.92,1.0,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.02, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.82,0.83,0.86 0.88,0.95,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.03, stddev=0.103], bias-{mean,stddev}=-0.07937,0.05319, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.86,0.89,1.3 1.5,1.5,1.8,2.0,2.2 2.3,2.5,2.5,2.6), mean=1.77, stddev=0.315], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.32,0.39 0.41,0.42,0.45,0.47,0.49 0.49,0.51,0.51,0.53), mean=0.447, stddev=0.0403], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.00111, stddev=0.000156], oderiv-count=4.78656e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.93,0.94,1.2 1.5,1.6,1.7,2.0,2.1 2.3,2.4,2.5,2.6), mean=1.76, stddev=0.305], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.2,2.4,2.5 2.5,2.7,3.0,3.3,3.5 3.7,4.1,4.2,4.6), mean=3.04, stddev=0.417]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.31746, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00478], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.58,0.59,0.62 0.65,0.70,0.78,0.89,0.97 1.0,1.1,1.1,1.1), mean=0.799, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09112, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.47,0.70,0.75 0.83,0.90,1.0,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.02, stddev=0.158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.77,0.79,0.84 0.86,0.93,1.0,1.1,1.2 1.2,1.2,1.3,1.3), mean=1.02, stddev=0.115], bias-{mean,stddev}=-0.07638,0.04217, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.63e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.85,1.3,1.3 1.4,1.5,1.6,1.8,1.9 1.9,2.0,2.1,2.1), mean=1.62, stddev=0.212], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.34,0.36 0.37,0.40,0.43,0.46,0.48 0.48,0.49,0.50,0.50), mean=0.426, stddev=0.0444], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00141, stddev=0.00018], oderiv-count=3.91706e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.92,1.2,1.3 1.4,1.4,1.6,1.8,1.9 2.0,2.0,2.1,2.1), mean=1.62, stddev=0.22], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.4,2.5,2.5 2.6,2.8,3.0,3.5,3.8 4.0,4.1,4.2,4.6), mean=3.12, stddev=0.464]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.31746, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09679, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00375], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.56,0.61 0.62,0.66,0.74,0.87,0.94 0.98,1.0,1.1,1.1), mean=0.765, stddev=0.12], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08915, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.51,0.55,0.72 0.76,0.82,0.98,1.2,1.2 1.3,1.3,1.3,1.4), mean=0.99, stddev=0.193], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.81,0.82,0.85 0.87,0.91,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1, stddev=0.101], bias-{mean,stddev}=-0.08361,0.05012, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.91,0.91,1.0 1.2,1.3,1.4,1.5,1.6 1.6,1.8,1.8,2.0), mean=1.38, stddev=0.186], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.28,0.31 0.33,0.35,0.40,0.44,0.46 0.47,0.48,0.48,0.51), mean=0.398, stddev=0.0507], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00191, stddev=0.000217], oderiv-count=2.85158e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.91,0.92,1.0 1.1,1.3,1.4,1.6,1.6 1.7,1.8,1.9,1.9), mean=1.4, stddev=0.195], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.3,2.3,2.5 2.6,2.8,3.1,3.7,3.9 4.2,4.3,4.4,4.5), mean=3.21, stddev=0.512]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.31746, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09445, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.51, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.57,0.59 0.61,0.63,0.73,0.86,0.90 0.94,0.98,0.98,1.0), mean=0.747, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08862, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,0.54,0.66 0.71,0.78,0.97,1.2,1.3 1.3,1.3,1.3,1.4), mean=0.979, stddev=0.215], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.79,0.81,0.83 0.85,0.91,0.99,1.1,1.1 1.2,1.2,1.2,1.4), mean=0.997, stddev=0.105], bias-{mean,stddev}=-0.09408,0.06711, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.78,0.80,0.88 0.95,1.1,1.2,1.4,1.5 1.6,1.6,1.6,2.5), mean=1.22, stddev=0.222], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.22 0.25,0.28,0.36,0.42,0.45 0.46,0.50,0.51,0.63), mean=0.355, stddev=0.079], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003,0.003 0.004,0.004,0.004,0.004), mean=0.00285, stddev=0.000387], oderiv-count=1.90291e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.78,0.80,0.84 0.96,1.0,1.2,1.4,1.5 1.5,1.6,1.6,2.4), mean=1.2, stddev=0.221], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.6,2.7 2.8,2.9,3.4,4.1,4.3 4.5,4.8,4.8,5.1), mean=3.5, stddev=0.619]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.31746, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.61, stddev=0.00352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.61,0.63 0.66,0.70,0.78,0.90,0.93 0.96,1.0,1.0,1.1), mean=0.796, stddev=0.109], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09432, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.59,0.67 0.79,0.89,1.0,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.05, stddev=0.21], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.89,0.90 0.94,0.97,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.06, stddev=0.1], bias-{mean,stddev}=-0.09379,0.08945, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.19e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.72,0.83,0.87 0.98,1.1,1.2,1.4,1.6 1.7,1.7,1.7,1.9), mean=1.26, stddev=0.223], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.17 0.21,0.29,0.35,0.41,0.45 0.47,0.49,0.49,0.54), mean=0.345, stddev=0.0875], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.005,0.006,0.006 0.007,0.008,0.008,0.009), mean=0.00551, stddev=0.000835], oderiv-count=637568
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.75,0.76,0.86 0.92,1.0,1.2,1.4,1.6 1.7,1.8,1.9,1.9), mean=1.26, stddev=0.251], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.8,3.0 3.2,3.6,4.2,5.0,5.3 5.5,5.6,5.7,6.2), mean=4.25, stddev=0.783]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.31746, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.005, max-change=0.75, params-rms=0.1391, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.57, stddev=0.00962], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.91,0.91,0.95 0.99,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.11, stddev=0.104], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.204, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.3 1.4,1.5,1.6,1.8,1.8 1.8,1.9,1.9,1.9), mean=1.63, stddev=0.153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.1,2.2 2.2,2.2,2.3,2.4,2.4 2.5,2.6,2.6,2.7), mean=2.31, stddev=0.123], bias-{mean,stddev}=-0.06492,0.1298, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.8,1.8,2.0 2.0,2.2,2.4,2.7,2.9 3.0,3.2,3.3,3.4), mean=2.44, stddev=0.329], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.33,0.34 0.35,0.36,0.39,0.41,0.42 0.43,0.44,0.44,0.46), mean=0.387, stddev=0.0284], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00904, stddev=0.00125], oderiv-count=606016
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.7,1.8,1.9 2.0,2.1,2.3,2.7,2.9 3.0,3.1,3.1,3.3), mean=2.4, stddev=0.335], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.9,5.1,5.4,5.7 6.0,6.5,7.1,8.0,8.4 9.1,9.6,9.7,12), mean=7.25, stddev=1.09]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, params-rms=0.2966, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.3,3.3 3.3,3.3,3.4,3.4,3.4 3.4,3.4,3.4,3.4), mean=3.36, stddev=0.0116], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.9 2.0,2.1,2.4,2.6,2.7 2.8,2.8,2.9,2.9), mean=2.36, stddev=0.284], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-4e-08 -4e-08,-2e-08,-6e-11,2e-08,3e-08 3e-08,4e-08,5e-08,6e-08), mean=-6.59e-10, stddev=2.39e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.6,3.6,3.7,3.8 3.8,3.9,4.1,4.4,4.5 4.5,4.5,4.7,4.8), mean=4.12, stddev=0.263]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00311567, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.234, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.15,0.25,0.56 0.91,1.3,1.9,2.2,2.4 2.5,2.7,2.8,3.5), mean=1.78, stddev=0.59], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(13,13,13,14 14,14,15,16,16 17,17,17,18), mean=14.8, stddev=0.982], bias-{mean,stddev}=0.001417,0.3356, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1487, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.72,0.82,1.0 1.1,1.1,1.2,1.3,1.3 1.3,1.3,1.3,1.7), mean=1.18, stddev=0.117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.6,1.7,1.8,1.8 1.9,1.9,2.0,2.0), mean=1.68, stddev=0.13], bias-{mean,stddev}=-0.08284,0.1841, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.25e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.86,0.95 0.96,1.1,1.2,1.4,1.6 1.7,1.9,1.9,2.1), mean=1.27, stddev=0.249], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.36,0.40 0.42,0.43,0.48,0.52,0.56 0.60,0.61,0.62,0.68), mean=0.481, stddev=0.0607], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.004,0.005,0.005,0.005 0.005,0.006,0.007,0.008), mean=0.00468, stddev=0.000573], oderiv-count=603840
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.80,0.80,0.96 0.99,1.0,1.2,1.5,1.6 1.8,1.9,2.0,2.3), mean=1.27, stddev=0.275], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.6,1.7,1.9,2.1,2.2 2.3,2.5,2.5,3.4), mean=1.92, stddev=0.273]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00311567, l2-regularize=0.0005, max-change=0.75, params-rms=0.1481, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.68, stddev=0.00138], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.88,0.88,0.97 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.5,1.5), mean=1.18, stddev=0.13], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-3e-08 -3e-08,-2e-08,-4e-10,2e-08,2e-08 3e-08,4e-08,5e-08,5e-08), mean=-1.07e-09, stddev=2.04e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.7,1.7,1.8,1.9 1.9,1.9,2.0,2.1), mean=1.75, stddev=0.11]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0155784, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1885, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.07,0.27 0.68,0.96,1.4,1.9,2.1 2.2,2.4,2.4,3.3), mean=1.4, stddev=0.555], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,12 12,12,12,12,12 12,12,12,12), mean=12, stddev=0.236], bias-{mean,stddev}=9.442e-09,0.2414, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,8e-06 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000783, stddev=0.0012], oderiv-count=595136
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/215.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/216.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.84003 tdnnf2.linear:4.39165 tdnnf2.affine:4.99302 tdnnf3.linear:3.76987 tdnnf3.affine:4.67751 tdnnf4.linear:3.55371 tdnnf4.affine:4.27299 tdnnf5.linear:3.266 tdnnf5.affine:3.71465 tdnnf6.linear:2.94827 tdnnf6.affine:3.35442 tdnnf7.linear:2.86798 tdnnf7.affine:3.24124 tdnnf8.linear:2.73394 tdnnf8.affine:3.15502 tdnnf9.linear:2.82164 tdnnf9.affine:3.28671 tdnnf10.linear:2.92107 tdnnf10.affine:3.50457 tdnnf11.linear:3.00277 tdnnf11.affine:3.66959 tdnnf12.linear:3.11993 tdnnf12.affine:3.81949 tdnnf13.linear:3.47492 tdnnf13.affine:4.39412 prefinal-l:4.31454 prefinal-chain.affine:4.71831 prefinal-chain.linear:5.02597 output.affine:13.7793 prefinal-xent.affine:2.66863 prefinal-xent.linear:1.69975 output-xent.affine:11.4787 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.3859 tdnnf2.linear:15.8955 tdnnf2.affine:16.0109 tdnnf3.linear:14.1101 tdnnf3.affine:15.059 tdnnf4.linear:13.2979 tdnnf4.affine:13.9387 tdnnf5.linear:12.3626 tdnnf5.affine:12.2456 tdnnf6.linear:11.6928 tdnnf6.affine:11.2054 tdnnf7.linear:11.8344 tdnnf7.affine:11.2728 tdnnf8.linear:12.2977 tdnnf8.affine:11.3739 tdnnf9.linear:12.8356 tdnnf9.affine:11.7784 tdnnf10.linear:12.9251 tdnnf10.affine:11.7052 tdnnf11.linear:12.3895 tdnnf11.affine:11.4643 tdnnf12.linear:12.09 tdnnf12.affine:11.4182 tdnnf13.linear:12.8533 tdnnf13.affine:12.1616 prefinal-l:12.5915 prefinal-chain.affine:18.5398 prefinal-chain.linear:26.8489 output.affine:120.872 prefinal-xent.affine:13.6482 prefinal-xent.linear:13.4023 output-xent.affine:97.094 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.344326 tdnnf2.linear:0.274467 tdnnf2.affine:0.309324 tdnnf3.linear:0.264379 tdnnf3.affine:0.30609 tdnnf4.linear:0.26438 tdnnf4.affine:0.304031 tdnnf5.linear:0.262319 tdnnf5.affine:0.30091 tdnnf6.linear:0.251114 tdnnf6.affine:0.298057 tdnnf7.linear:0.24125 tdnnf7.affine:0.286078 tdnnf8.linear:0.222165 tdnnf8.affine:0.276718 tdnnf9.linear:0.219882 tdnnf9.affine:0.278984 tdnnf10.linear:0.225597 tdnnf10.affine:0.298823 tdnnf11.linear:0.242293 tdnnf11.affine:0.319685 tdnnf12.linear:0.256812 tdnnf12.affine:0.333519 tdnnf13.linear:0.269522 tdnnf13.affine:0.360657 prefinal-l:0.34537 prefinal-chain.affine:0.254539 prefinal-chain.linear:0.186585 output.affine:0.11385 prefinal-xent.affine:0.194704 prefinal-xent.linear:0.126622 output-xent.affine:0.118378 ]
# Accounting: time=2 threads=1
# Ended (code 0) at Mon Feb 24 11:26:17 CST 2020, elapsed time 2 seconds
