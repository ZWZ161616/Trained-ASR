# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/257.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/256.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/257.mdl 
# Started at Mon Feb 24 12:25:38 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/257.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1383, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.4,1.5 1.6,1.6,1.9,2.3,2.6 2.8,3.0,3.0,3.3), mean=2, stddev=0.431], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.58,0.63 0.73,0.85,1.4,1.9,2.3 2.5,2.7,2.7,3.2), mean=1.45, stddev=0.577], bias-{mean,stddev}=-0.1227,0.1863, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.96e+06, self-repaired-proportion=0.0197093, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.005,0.009,0.02 0.03,0.05,0.10,0.18,0.22 0.26,0.28,0.28,0.34), mean=0.115, stddev=0.0751], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.05,0.09 0.10,0.18,0.31,0.49,0.67 0.71,0.73,0.75,0.84), mean=0.349, stddev=0.192], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.06,0.07 0.08,0.09,0.09,0.14), mean=0.0437, stddev=0.0196], oderiv-count=1.31652e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.002,0.01,0.02 0.03,0.05,0.10,0.18,0.22 0.26,0.26,0.29,0.33), mean=0.115, stddev=0.0749], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.05,0.08 0.11,0.13,0.20,0.26,0.27 0.30,0.32,0.32,0.33), mean=0.195, stddev=0.0658]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.187302, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.86, stddev=0.00207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.69,0.72,0.75 0.79,0.84,0.93,0.99,1.1 1.1,1.2,1.2,1.2), mean=0.922, stddev=0.106], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1163, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.99,0.99,1.1 1.1,1.2,1.3,1.4,1.5 1.6,1.7,1.7,1.7), mean=1.31, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.2 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.5), mean=1.31, stddev=0.0981], bias-{mean,stddev}=-0.1701,0.1016, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.28e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.84,0.89,1.0 1.1,1.2,1.3,1.5,1.6 1.6,1.7,1.8,1.9), mean=1.36, stddev=0.198], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.38 0.41,0.44,0.54,0.58,0.59 0.60,0.61,0.61,0.62), mean=0.513, stddev=0.0713], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002,0.003 0.004,0.008,0.01,0.01), mean=0.00227, stddev=0.00155], oderiv-count=1.19054e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.85,0.90,0.97 1.1,1.2,1.3,1.5,1.6 1.7,1.7,1.8,1.9), mean=1.35, stddev=0.204], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.4,1.5,1.6 1.7,1.9,2.1,2.5,2.6 2.7,2.9,2.9,3.0), mean=2.15, stddev=0.348]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.187302, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1057, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.00154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.64,0.66,0.69 0.72,0.77,0.84,0.91,0.95 0.98,1.0,1.1,1.1), mean=0.841, stddev=0.0897], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.65,0.85,1.1 1.1,1.2,1.3,1.4,1.5 1.5,1.6,1.6,1.7), mean=1.27, stddev=0.164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.3,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.28, stddev=0.0819], bias-{mean,stddev}=-0.1762,0.0821, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.35e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,1.1,1.4 1.4,1.5,1.6,1.8,1.9 1.9,2.0,2.0,2.2), mean=1.63, stddev=0.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.38,0.40 0.44,0.46,0.52,0.56,0.57 0.58,0.59,0.59,0.60), mean=0.511, stddev=0.0536], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0009,0.0009,0.0009 0.0009,0.001,0.001,0.001,0.002 0.004,0.004,0.005,0.01), mean=0.00146, stddev=0.00137], oderiv-count=1.11698e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.53,0.99,1.3 1.4,1.5,1.7,1.8,1.9 2.0,2.0,2.0,2.2), mean=1.64, stddev=0.244], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.79,1.4,2.1 2.2,2.3,2.6,2.9,3.2 3.2,3.5,3.6,3.7), mean=2.61, stddev=0.438]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.187302, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09839, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.57, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.63,0.64,0.66 0.69,0.72,0.78,0.84,0.88 0.89,0.94,0.96,0.99), mean=0.784, stddev=0.0744], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1017, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.61,0.99 1.0,1.1,1.1,1.2,1.3 1.4,1.4,1.4,1.4), mean=1.14, stddev=0.139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.98,1.0 1.0,1.1,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.15, stddev=0.109], bias-{mean,stddev}=-0.1729,0.08577, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.39e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.63,1.3 1.4,1.5,1.6,1.8,1.9 2.0,2.1,2.1,2.3), mean=1.64, stddev=0.266], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.39,0.41 0.43,0.46,0.50,0.55,0.56 0.57,0.58,0.58,0.58), mean=0.5, stddev=0.0494], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.002,0.004,0.004,0.007), mean=0.00117, stddev=0.000889], oderiv-count=1.01728e+07
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.61,0.61,1.3 1.4,1.5,1.6,1.8,1.9 2.0,2.2,2.2,2.4), mean=1.63, stddev=0.272], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,1.0,1.1,2.1 2.2,2.4,2.6,3.0,3.3 3.4,3.6,3.6,4.0), mean=2.64, stddev=0.479]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.187302, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09057, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.45, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.58,0.61 0.63,0.66,0.71,0.78,0.82 0.85,0.88,0.90,0.95), mean=0.721, stddev=0.0745], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08839, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.58,0.83 0.88,0.92,0.99,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.993, stddev=0.118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.80,0.82,0.86 0.90,0.92,0.99,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.996, stddev=0.086], bias-{mean,stddev}=-0.148,0.05577, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.66,0.73,1.1 1.2,1.3,1.4,1.6,1.7 1.7,1.7,1.8,1.8), mean=1.41, stddev=0.201], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.38,0.43 0.45,0.47,0.51,0.54,0.56 0.57,0.57,0.58,0.59), mean=0.505, stddev=0.0447], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.001,0.001,0.001,0.001,0.001 0.002,0.002,0.004,0.004), mean=0.00122, stddev=0.000441], oderiv-count=9.20026e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.65,0.76,1.1 1.2,1.3,1.4,1.6,1.6 1.7,1.7,1.7,1.8), mean=1.4, stddev=0.2], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.1,1.2,1.7 1.9,2.0,2.2,2.4,2.5 2.7,2.8,3.0,3.3), mean=2.2, stddev=0.326]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.187302, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08839, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.41, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.57,0.58,0.60 0.62,0.65,0.71,0.76,0.78 0.80,0.82,0.85,0.87), mean=0.704, stddev=0.062], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08321, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.62,0.64,0.75 0.84,0.87,0.94,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.936, stddev=0.105], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.77,0.78,0.80 0.83,0.87,0.92,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.937, stddev=0.0883], bias-{mean,stddev}=-0.1402,0.05301, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.76,0.89,0.96 1.1,1.2,1.3,1.5,1.6 1.6,1.7,1.7,1.9), mean=1.33, stddev=0.191], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.41 0.44,0.46,0.50,0.53,0.56 0.57,0.57,0.58,0.60), mean=0.495, stddev=0.0464], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00128, stddev=0.000242], oderiv-count=7.72282e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.78,0.87,0.96 1.1,1.2,1.3,1.5,1.5 1.6,1.7,1.7,1.8), mean=1.32, stddev=0.187], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.5,1.6 1.7,1.8,2.0,2.3,2.4 2.5,2.7,2.7,2.9), mean=2.05, stddev=0.284]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.187302, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0887, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.42, stddev=0.00224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.57,0.60 0.63,0.65,0.70,0.76,0.80 0.82,0.84,0.85,0.88), mean=0.707, stddev=0.0652], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08272, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.58,0.59,0.77 0.81,0.84,0.94,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.929, stddev=0.113], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.75,0.77,0.80 0.82,0.86,0.93,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.932, stddev=0.0864], bias-{mean,stddev}=-0.1305,0.05527, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.78e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.76,0.99 1.1,1.2,1.3,1.4,1.5 1.6,1.7,1.8,1.9), mean=1.32, stddev=0.194], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.32,0.41 0.43,0.45,0.47,0.51,0.54 0.55,0.57,0.57,0.59), mean=0.476, stddev=0.0463], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00128, stddev=0.000226], oderiv-count=6.94323e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.68,0.73,0.95 1.1,1.2,1.3,1.4,1.5 1.6,1.7,1.7,2.0), mean=1.3, stddev=0.197], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.4,1.6 1.7,1.9,2.0,2.3,2.5 2.7,2.8,2.8,3.4), mean=2.08, stddev=0.321]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.187302, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09111, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.46, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.58,0.59 0.63,0.66,0.72,0.78,0.82 0.87,0.90,0.92,0.95), mean=0.724, stddev=0.0809], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08287, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.57,0.58,0.72 0.79,0.83,0.93,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.929, stddev=0.126], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.76,0.77,0.79 0.82,0.85,0.92,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.932, stddev=0.101], bias-{mean,stddev}=-0.1025,0.05654, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.68,0.73,1.0 1.1,1.2,1.3,1.5,1.7 1.8,1.9,1.9,1.9), mean=1.35, stddev=0.235], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.40 0.42,0.43,0.45,0.48,0.50 0.50,0.53,0.53,0.57), mean=0.452, stddev=0.0418], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00125, stddev=0.000211], oderiv-count=6.04013e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.70,0.75,1.0 1.1,1.2,1.3,1.5,1.7 1.8,1.9,1.9,1.9), mean=1.35, stddev=0.233], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.7,1.8 1.9,2.0,2.2,2.5,2.9 3.0,3.2,3.2,3.5), mean=2.28, stddev=0.377]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.187302, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09453, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.51, stddev=0.00129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.56,0.60 0.64,0.67,0.73,0.84,0.88 0.92,0.96,0.97,1.0), mean=0.75, stddev=0.0996], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0859, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.57,0.57,0.71 0.76,0.86,0.98,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.961, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.79,0.80,0.80 0.82,0.90,0.95,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.967, stddev=0.0986], bias-{mean,stddev}=-0.07746,0.04487, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.34e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.79,0.88,1.1 1.2,1.3,1.4,1.6,1.7 1.8,2.1,2.1,2.3), mean=1.45, stddev=0.244], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.35,0.40 0.40,0.43,0.45,0.48,0.49 0.49,0.51,0.51,0.52), mean=0.449, stddev=0.0376], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00131, stddev=0.000198], oderiv-count=4.91616e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.76,0.88,1.1 1.2,1.3,1.4,1.6,1.7 1.9,2.0,2.1,2.2), mean=1.44, stddev=0.248], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.8,2.0 2.1,2.2,2.4,2.7,2.9 3.0,3.4,3.4,3.9), mean=2.46, stddev=0.347]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.187302, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09502, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.52, stddev=0.00313], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.50,0.56,0.58 0.61,0.65,0.74,0.84,0.93 0.98,0.99,1.0,1.1), mean=0.75, stddev=0.121], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08553, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.47,0.64,0.71 0.78,0.84,0.96,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.957, stddev=0.142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.77,0.77,0.79 0.82,0.88,0.96,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.962, stddev=0.102], bias-{mean,stddev}=-0.07558,0.03917, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.58e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.74,1.0,1.1 1.2,1.2,1.3,1.5,1.6 1.6,1.6,1.7,1.8), mean=1.35, stddev=0.179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.34,0.35 0.38,0.40,0.43,0.45,0.47 0.48,0.49,0.49,0.52), mean=0.426, stddev=0.0417], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00164, stddev=0.000216], oderiv-count=3.85542e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.74,1.0,1.1 1.1,1.2,1.3,1.5,1.6 1.6,1.6,1.7,1.8), mean=1.34, stddev=0.18], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,2.0 2.1,2.2,2.4,2.7,2.9 3.0,3.2,3.3,3.4), mean=2.47, stddev=0.315]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.187302, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08951, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.43, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.51,0.52,0.53 0.56,0.60,0.68,0.82,0.87 0.90,0.95,0.95,1.0), mean=0.706, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.083, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.58,0.67 0.72,0.75,0.92,1.1,1.2 1.2,1.2,1.2,1.3), mean=0.922, stddev=0.176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.77,0.78,0.80 0.82,0.85,0.93,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.935, stddev=0.0878], bias-{mean,stddev}=-0.08098,0.04209, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.95e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.79,0.81,0.93 0.97,1.0,1.1,1.2,1.3 1.4,1.5,1.5,1.6), mean=1.13, stddev=0.151], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.31,0.32 0.35,0.36,0.40,0.43,0.44 0.45,0.46,0.46,0.49), mean=0.397, stddev=0.0398], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.003,0.003,0.003,0.003), mean=0.00232, stddev=0.000273], oderiv-count=2.88698e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.79,0.80,0.88 0.96,1.0,1.1,1.2,1.3 1.4,1.5,1.5,1.6), mean=1.13, stddev=0.155], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.8,1.9,2.0 2.0,2.1,2.5,2.8,3.0 3.1,3.2,3.2,3.4), mean=2.49, stddev=0.374]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.187302, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08551, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.37, stddev=0.00138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.50,0.51 0.54,0.57,0.65,0.78,0.84 0.89,0.91,0.95,0.97), mean=0.674, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.54,0.59 0.67,0.72,0.88,1.1,1.2 1.2,1.2,1.2,1.3), mean=0.903, stddev=0.198], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.74,0.75,0.78 0.80,0.84,0.92,1.0,1.0 1.0,1.1,1.1,1.2), mean=0.92, stddev=0.0902], bias-{mean,stddev}=-0.0894,0.05169, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.70,0.76 0.80,0.84,0.95,1.1,1.1 1.2,1.2,1.3,1.9), mean=0.966, stddev=0.16], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.24 0.25,0.29,0.35,0.41,0.43 0.46,0.48,0.48,0.57), mean=0.35, stddev=0.0706], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.003,0.003,0.004,0.004 0.004,0.005,0.005,0.006), mean=0.00347, stddev=0.000516], oderiv-count=1.82131e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.70,0.75 0.78,0.84,0.96,1.1,1.2 1.2,1.3,1.3,1.8), mean=0.981, stddev=0.166], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,2.0 2.1,2.2,2.7,3.0,3.3 3.4,3.5,3.6,3.7), mean=2.67, stddev=0.455]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.187302, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09115, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.46, stddev=0.0012], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.55,0.57 0.59,0.62,0.70,0.82,0.87 0.93,0.95,0.98,1.0), mean=0.721, stddev=0.11], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08914, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.60,0.65 0.76,0.85,0.97,1.2,1.3 1.3,1.3,1.3,1.4), mean=0.991, stddev=0.186], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.81,0.83,0.88 0.90,0.93,0.99,1.1,1.1 1.2,1.2,1.2,1.2), mean=1, stddev=0.0881], bias-{mean,stddev}=-0.08316,0.07517, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.71,0.71,0.81 0.88,0.93,1.1,1.2,1.3 1.4,1.5,1.5,1.5), mean=1.08, stddev=0.169], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.21 0.24,0.29,0.35,0.42,0.45 0.45,0.48,0.50,0.51), mean=0.35, stddev=0.0756], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.005,0.006,0.006,0.007,0.007 0.008,0.008,0.008,0.009), mean=0.00619, stddev=0.00079], oderiv-count=592960
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.78,0.80,0.83 0.91,0.98,1.1,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.12, stddev=0.174], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.3,2.3,2.5 2.8,3.1,3.5,4.1,4.3 4.6,4.7,4.7,5.0), mean=3.55, stddev=0.596]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.187302, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.005, max-change=0.75, params-rms=0.13, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.47, stddev=0.0084], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.77,0.83,0.86 0.89,0.95,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.101], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1917, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.3 1.4,1.4,1.6,1.6,1.7 1.7,1.7,1.8,1.8), mean=1.53, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.0 2.0,2.0,2.2,2.3,2.3 2.4,2.4,2.4,2.4), mean=2.16, stddev=0.143], bias-{mean,stddev}=-0.04145,0.1257, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.7,1.8,2.0,2.2,2.3 2.3,2.5,2.5,2.6), mean=1.98, stddev=0.242], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.35 0.36,0.37,0.39,0.41,0.43 0.44,0.46,0.46,0.48), mean=0.395, stddev=0.0276], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.009 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0101, stddev=0.00139], oderiv-count=621248
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.7 1.7,1.8,2.0,2.2,2.3 2.4,2.5,2.5,2.7), mean=2.01, stddev=0.253], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,4.0,4.0,4.2 4.5,4.6,5.2,5.9,6.3 6.5,6.9,7.1,8.2), mean=5.3, stddev=0.791]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, params-rms=0.2617, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.0,3.0,3.0 3.0,3.0,3.0,3.0,3.0 3.0,3.0,3.0,3.0), mean=2.96, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.6,1.7 1.8,1.9,2.1,2.3,2.4 2.4,2.5,2.5,2.6), mean=2.08, stddev=0.229], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-5e-08 -3e-08,-2e-08,-8e-10,2e-08,3e-08 4e-08,5e-08,6e-08,7e-08), mean=4e-10, stddev=2.58e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.1,3.1,3.2,3.3 3.4,3.5,3.6,3.8,4.0 4.0,4.2,4.3,4.3), mean=3.64, stddev=0.25]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00230883, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2149, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.15,0.24,0.54 0.86,1.2,1.8,2.1,2.2 2.3,2.4,2.5,3.1), mean=1.63, stddev=0.532], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,13 13,13,14,14,15 15,16,16,16), mean=13.6, stddev=0.824], bias-{mean,stddev}=0.001395,0.3079, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1356, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.70,0.76,0.94 0.98,1.0,1.1,1.1,1.2 1.2,1.2,1.2,1.4), mean=1.08, stddev=0.0971], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.4,1.4,1.5,1.6,1.7 1.7,1.8,1.8,1.8), mean=1.53, stddev=0.118], bias-{mean,stddev}=-0.04916,0.183, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.95e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.67,0.72,0.80 0.83,0.89,1.1,1.3,1.4 1.5,1.6,1.6,1.8), mean=1.09, stddev=0.231], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.35,0.39 0.41,0.42,0.47,0.52,0.55 0.58,0.62,0.62,0.66), mean=0.476, stddev=0.0591], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.005,0.005,0.005,0.006,0.006 0.006,0.007,0.007,0.01), mean=0.00536, stddev=0.000804], oderiv-count=606016
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.67,0.72,0.78 0.82,0.88,1.1,1.3,1.4 1.6,1.6,1.6,2.0), mean=1.09, stddev=0.241], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.4,1.4,1.7,1.9,1.9 2.0,2.2,2.2,2.8), mean=1.67, stddev=0.239]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00230883, l2-regularize=0.0005, max-change=0.75, params-rms=0.138, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.56, stddev=0.00146], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.82,0.84,0.89 0.94,0.99,1.1,1.2,1.3 1.3,1.3,1.4,1.4), mean=1.1, stddev=0.128], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8e-08,-8e-08,-4e-08,-3e-08 -3e-08,-2e-08,-3e-09,1e-08,3e-08 4e-08,4e-08,5e-08,6e-08), mean=-1.18e-09, stddev=2.32e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.5,1.6,1.7,1.7 1.8,1.8,1.9,1.9), mean=1.6, stddev=0.105]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0115442, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1939, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.07,0.30 0.72,1.0,1.5,1.9,2.1 2.3,2.4,2.5,3.6), mean=1.45, stddev=0.559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,12,12,13 13,13,13,13), mean=12.3, stddev=0.229], bias-{mean,stddev}=1.31e-08,0.2161, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000796, stddev=0.0012], oderiv-count=611456
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/256.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/257.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.21193 tdnnf2.linear:3.50137 tdnnf2.affine:3.9985 tdnnf3.linear:3.03532 tdnnf3.affine:4.04003 tdnnf4.linear:2.81393 tdnnf4.affine:3.54513 tdnnf5.linear:2.56141 tdnnf5.affine:2.99396 tdnnf6.linear:2.37554 tdnnf6.affine:2.70592 tdnnf7.linear:2.22154 tdnnf7.affine:2.59596 tdnnf8.linear:2.13685 tdnnf8.affine:2.44768 tdnnf9.linear:2.16912 tdnnf9.affine:2.54163 tdnnf10.linear:2.23795 tdnnf10.affine:2.68773 tdnnf11.linear:2.30225 tdnnf11.affine:2.85399 tdnnf12.linear:2.45636 tdnnf12.affine:3.00643 tdnnf13.linear:2.67812 tdnnf13.affine:3.41997 prefinal-l:3.59247 prefinal-chain.affine:3.95693 prefinal-chain.linear:3.91955 output.affine:9.96908 prefinal-xent.affine:2.19026 prefinal-xent.linear:1.40676 output-xent.affine:8.50684 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.3371 tdnnf2.linear:14.847 tdnnf2.affine:15.0591 tdnnf3.linear:13.5248 tdnnf3.affine:14.6498 tdnnf4.linear:12.5939 tdnnf4.affine:13.2034 tdnnf5.linear:11.5932 tdnnf5.affine:11.4544 tdnnf6.linear:11.3138 tdnnf6.affine:10.7856 tdnnf7.linear:11.3531 tdnnf7.affine:10.7084 tdnnf8.linear:11.6626 tdnnf8.affine:10.6893 tdnnf9.linear:12.0994 tdnnf9.affine:11.0422 tdnnf10.linear:12.1622 tdnnf10.affine:10.9904 tdnnf11.linear:11.4567 tdnnf11.affine:10.674 tdnnf12.linear:10.9457 tdnnf12.affine:10.5185 tdnnf13.linear:11.6669 tdnnf13.affine:11.4799 prefinal-l:11.7674 prefinal-chain.affine:17.4139 prefinal-chain.linear:23.6902 output.affine:110.999 prefinal-xent.affine:12.4614 prefinal-xent.linear:12.493 output-xent.affine:99.5585 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.309621 tdnnf2.linear:0.236568 tdnnf2.affine:0.267523 tdnnf3.linear:0.226025 tdnnf3.affine:0.281288 tdnnf4.linear:0.22558 tdnnf4.affine:0.272256 tdnnf5.linear:0.221846 tdnnf5.affine:0.262622 tdnnf6.linear:0.209919 tdnnf6.affine:0.250987 tdnnf7.linear:0.19567 tdnnf7.affine:0.242344 tdnnf8.linear:0.18325 tdnnf8.affine:0.228821 tdnnf9.linear:0.179321 tdnnf9.affine:0.230501 tdnnf10.linear:0.183788 tdnnf10.affine:0.24425 tdnnf11.linear:0.201244 tdnnf11.affine:0.267673 tdnnf12.linear:0.224146 tdnnf12.affine:0.285418 tdnnf13.linear:0.22926 tdnnf13.affine:0.297234 prefinal-l:0.306044 prefinal-chain.affine:0.22688 prefinal-chain.linear:0.164896 output.affine:0.0895703 prefinal-xent.affine:0.17527 prefinal-xent.linear:0.11243 output-xent.affine:0.0854946 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 12:25:41 CST 2020, elapsed time 3 seconds
