# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/297.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/296.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/297.mdl 
# Started at Mon Feb 24 13:23:44 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/297.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.3,1.4 1.4,1.5,1.8,2.2,2.4 2.6,2.8,2.8,3.1), mean=1.84, stddev=0.393], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.53,0.55,0.59 0.65,0.80,1.3,1.7,2.0 2.3,2.4,2.5,2.9), mean=1.34, stddev=0.524], bias-{mean,stddev}=-0.1035,0.1628, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=9.4e+06, self-repaired-proportion=0.0176176, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.01,0.02 0.03,0.05,0.10,0.17,0.21 0.25,0.27,0.27,0.28), mean=0.108, stddev=0.0694], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.06,0.09 0.12,0.20,0.32,0.47,0.64 0.70,0.74,0.77,0.79), mean=0.35, stddev=0.184], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.07 0.08,0.09,0.09,0.14), mean=0.045, stddev=0.0193], oderiv-count=1.3418e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.02 0.03,0.05,0.09,0.17,0.21 0.24,0.27,0.27,0.28), mean=0.109, stddev=0.07], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.08 0.11,0.13,0.19,0.25,0.26 0.29,0.30,0.30,0.33), mean=0.186, stddev=0.0638]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0603175, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1095, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.75, stddev=0.00409], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.62,0.66,0.70 0.75,0.79,0.86,0.95,0.99 1.0,1.1,1.1,1.2), mean=0.87, stddev=0.102], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.94,0.94,1.0 1.1,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.24, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3,1.3 1.4,1.4,1.5,1.5), mean=1.25, stddev=0.0833], bias-{mean,stddev}=-0.1463,0.09323, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.37e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.75,0.77,0.82 0.88,0.98,1.1,1.3,1.4 1.4,1.4,1.5,1.6), mean=1.13, stddev=0.179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.37,0.38 0.40,0.43,0.53,0.58,0.60 0.60,0.61,0.61,0.62), mean=0.511, stddev=0.0737], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.004,0.01,0.01,0.01), mean=0.00279, stddev=0.00194], oderiv-count=1.21808e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.76,0.77,0.82 0.91,1.0,1.1,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.15, stddev=0.182], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.3,1.4 1.5,1.6,1.8,2.1,2.3 2.3,2.5,2.5,2.5), mean=1.82, stddev=0.286]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0603175, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1021, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.00224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.65,0.67 0.70,0.74,0.81,0.89,0.91 0.94,0.98,1.0,1.1), mean=0.812, stddev=0.084], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1071, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.64,0.85,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.2, stddev=0.153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.3,1.3 1.3,1.3,1.4,1.4), mean=1.21, stddev=0.0753], bias-{mean,stddev}=-0.1613,0.07629, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.49e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.50,0.84,1.1 1.1,1.2,1.4,1.5,1.6 1.6,1.7,1.7,1.7), mean=1.35, stddev=0.197], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.41 0.42,0.47,0.52,0.56,0.57 0.58,0.60,0.60,0.60), mean=0.512, stddev=0.0553], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.004,0.005,0.005,0.01), mean=0.0018, stddev=0.00142], oderiv-count=1.10922e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.59,0.97,1.1 1.1,1.2,1.4,1.5,1.6 1.7,1.7,1.7,1.7), mean=1.36, stddev=0.197], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.94,1.3,1.7 1.8,2.0,2.2,2.4,2.5 2.6,2.8,2.8,3.1), mean=2.17, stddev=0.336]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0603175, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09424, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.51, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.61,0.65 0.67,0.70,0.75,0.81,0.85 0.86,0.88,0.89,0.95), mean=0.751, stddev=0.067], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.68,0.74,0.98 1.0,1.1,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.14, stddev=0.135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.94,0.96,0.97 1.0,1.1,1.1,1.2,1.3 1.3,1.3,1.3,1.5), mean=1.14, stddev=0.0993], bias-{mean,stddev}=-0.1737,0.07805, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.86e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.67,0.81,1.1 1.2,1.3,1.4,1.6,1.7 1.7,1.8,1.8,1.9), mean=1.4, stddev=0.223], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.37,0.39 0.42,0.45,0.51,0.55,0.56 0.57,0.58,0.58,0.59), mean=0.497, stddev=0.0554], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.004,0.004,0.01), mean=0.00141, stddev=0.00122], oderiv-count=9.7328e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.67,0.77,1.1 1.2,1.3,1.4,1.6,1.7 1.8,1.8,1.9,1.9), mean=1.41, stddev=0.233], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,1.1,1.3,1.9 2.0,2.1,2.3,2.5,2.7 2.8,3.1,3.1,3.7), mean=2.3, stddev=0.384]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0603175, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08693, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.39, stddev=0.000598], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.56,0.59 0.61,0.64,0.69,0.75,0.78 0.80,0.83,0.86,0.98), mean=0.692, stddev=0.068], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08286, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.63,0.82 0.83,0.86,0.93,0.99,1.0 1.1,1.1,1.1,1.3), mean=0.932, stddev=0.101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.74,0.76,0.82 0.84,0.87,0.93,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.934, stddev=0.0786], bias-{mean,stddev}=-0.143,0.05399, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.67,0.69,0.87 0.93,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.12, stddev=0.15], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.43 0.44,0.47,0.50,0.53,0.55 0.56,0.58,0.58,0.61), mean=0.501, stddev=0.0436], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.004), mean=0.00162, stddev=0.000385], oderiv-count=8.64698e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.65,0.68,0.88 0.92,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.12, stddev=0.153], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,1.1,1.1,1.5 1.5,1.6,1.7,1.9,2.0 2.1,2.2,2.3,2.6), mean=1.75, stddev=0.228]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0603175, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0857, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.37, stddev=0.000846], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.56,0.57 0.59,0.63,0.68,0.73,0.76 0.78,0.81,0.82,0.86), mean=0.683, stddev=0.0627], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08032, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.63,0.64,0.75 0.80,0.83,0.90,0.96,1.0 1.1,1.1,1.1,1.2), mean=0.904, stddev=0.0968], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.76,0.77,0.79 0.80,0.83,0.90,0.98,1.0 1.0,1.1,1.1,1.1), mean=0.905, stddev=0.0809], bias-{mean,stddev}=-0.1373,0.05392, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.73,0.81 0.91,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.09, stddev=0.153], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.43 0.44,0.46,0.49,0.52,0.54 0.55,0.56,0.58,0.62), mean=0.491, stddev=0.0405], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00164, stddev=0.00027], oderiv-count=7.90502e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.74,0.82 0.92,0.98,1.1,1.2,1.3 1.4,1.4,1.4,1.6), mean=1.1, stddev=0.16], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.3 1.4,1.5,1.7,1.9,2.1 2.1,2.3,2.3,2.5), mean=1.72, stddev=0.249]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0603175, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08593, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.37, stddev=0.00386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,0.55,0.57 0.60,0.63,0.68,0.74,0.77 0.80,0.82,0.84,0.89), mean=0.684, stddev=0.0675], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07973, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.55,0.74 0.79,0.82,0.90,0.98,1.0 1.0,1.1,1.1,1.2), mean=0.896, stddev=0.108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.74,0.76,0.78 0.79,0.83,0.90,0.97,1.0 1.0,1.1,1.1,1.1), mean=0.899, stddev=0.078], bias-{mean,stddev}=-0.1276,0.05083, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.44e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.57,0.60,0.81 0.94,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.08, stddev=0.159], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.41 0.43,0.45,0.48,0.51,0.53 0.55,0.57,0.58,0.60), mean=0.479, stddev=0.0461], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00165, stddev=0.000263], oderiv-count=7.00435e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.55,0.58,0.82 0.91,0.99,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.08, stddev=0.166], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.4 1.4,1.5,1.6,1.9,2.0 2.2,2.3,2.3,2.6), mean=1.71, stddev=0.269]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0603175, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08758, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.4, stddev=0.000598], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.54,0.57 0.59,0.63,0.69,0.76,0.80 0.83,0.87,0.92,0.96), mean=0.696, stddev=0.0825], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07894, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.51,0.56,0.71 0.75,0.79,0.88,0.98,1.0 1.1,1.1,1.1,1.1), mean=0.885, stddev=0.118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.72,0.73,0.77 0.78,0.81,0.88,0.95,0.99 1.0,1.1,1.1,1.3), mean=0.889, stddev=0.0898], bias-{mean,stddev}=-0.1077,0.05129, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.93e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.48,0.63,0.83 0.90,0.97,1.1,1.2,1.4 1.4,1.5,1.6,1.6), mean=1.1, stddev=0.196], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.29,0.29,0.38 0.41,0.42,0.44,0.47,0.49 0.52,0.54,0.55,0.55), mean=0.445, stddev=0.0449], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00157, stddev=0.000273], oderiv-count=6.0297e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.47,0.59,0.81 0.88,0.97,1.1,1.2,1.4 1.5,1.5,1.5,1.6), mean=1.09, stddev=0.197], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.4 1.5,1.6,1.8,2.0,2.4 2.5,2.7,2.7,2.8), mean=1.86, stddev=0.334]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0603175, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08953, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.43, stddev=0.00207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.53,0.57 0.59,0.62,0.70,0.80,0.85 0.88,0.90,0.93,0.99), mean=0.709, stddev=0.0985], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.54,0.59,0.69 0.75,0.82,0.92,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.912, stddev=0.123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.75,0.76,0.77 0.80,0.85,0.91,0.98,1.0 1.1,1.1,1.1,1.2), mean=0.916, stddev=0.0879], bias-{mean,stddev}=-0.08123,0.0379, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.87e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.68,0.70,0.97 1.0,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.8), mean=1.19, stddev=0.184], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.31,0.37,0.39 0.41,0.42,0.45,0.47,0.48 0.49,0.51,0.52,0.53), mean=0.446, stddev=0.0359], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00161, stddev=0.000238], oderiv-count=4.74336e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.68,0.70,0.94 1.0,1.1,1.2,1.3,1.4 1.5,1.5,1.6,1.8), mean=1.19, stddev=0.182], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.7,1.8,2.0,2.2,2.4 2.5,2.6,2.6,3.1), mean=2.03, stddev=0.271]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0603175, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09008, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.44, stddev=0.00305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.49,0.54,0.56 0.59,0.61,0.69,0.80,0.89 0.93,0.96,0.97,1.0), mean=0.711, stddev=0.115], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.51,0.61,0.71 0.76,0.83,0.92,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.913, stddev=0.12], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.71,0.75,0.78 0.79,0.84,0.92,0.98,1.0 1.1,1.1,1.1,1.2), mean=0.916, stddev=0.0895], bias-{mean,stddev}=-0.07503,0.03442, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.5e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.67,0.87,0.89 0.96,1.0,1.1,1.3,1.3 1.4,1.4,1.4,1.6), mean=1.14, stddev=0.157], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.31,0.33,0.37 0.39,0.40,0.43,0.46,0.47 0.47,0.49,0.50,0.55), mean=0.428, stddev=0.04], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00194, stddev=0.000275], oderiv-count=3.77325e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.72,0.88,0.91 0.95,1.0,1.1,1.2,1.3 1.4,1.5,1.5,1.6), mean=1.13, stddev=0.158], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.8,1.8,2.0,2.2,2.3 2.5,2.7,2.7,2.8), mean=2.04, stddev=0.245]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0603175, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08469, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.36, stddev=0.000598], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.48 0.52,0.56,0.65,0.79,0.84 0.88,0.90,0.93,1.0), mean=0.666, stddev=0.123], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07888, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.50,0.59,0.66 0.69,0.74,0.87,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.879, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.73,0.74,0.75 0.77,0.81,0.88,0.97,1.0 1.0,1.0,1.0,1.1), mean=0.889, stddev=0.0825], bias-{mean,stddev}=-0.07828,0.03638, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.94e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.71,0.71,0.79 0.84,0.89,0.96,1.1,1.2 1.2,1.3,1.3,1.6), mean=0.99, stddev=0.141], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.34 0.36,0.37,0.41,0.43,0.45 0.46,0.46,0.47,0.49), mean=0.406, stddev=0.0356], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.003,0.003,0.004), mean=0.00272, stddev=0.00029], oderiv-count=2.80608e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.69,0.70,0.78 0.83,0.89,0.98,1.1,1.2 1.3,1.3,1.4,1.5), mean=0.994, stddev=0.143], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.5,1.6 1.7,1.7,2.0,2.3,2.5 2.6,2.6,2.6,2.8), mean=2.02, stddev=0.313]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0603175, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.07914, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.27, stddev=0.00162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.45,0.47 0.50,0.53,0.59,0.72,0.77 0.84,0.88,0.89,0.92), mean=0.623, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07646, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.51,0.51,0.59 0.64,0.69,0.82,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.848, stddev=0.173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.69,0.70,0.73 0.76,0.80,0.86,0.93,0.95 0.98,1.0,1.0,1.2), mean=0.861, stddev=0.08], bias-{mean,stddev}=-0.08091,0.04679, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.27e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.57,0.62 0.65,0.71,0.79,0.90,0.98 1.0,1.1,1.1,1.3), mean=0.809, stddev=0.13], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.27 0.29,0.31,0.36,0.41,0.43 0.45,0.46,0.46,0.52), mean=0.361, stddev=0.0566], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.004,0.005,0.005 0.005,0.006,0.006,0.007), mean=0.00426, stddev=0.000614], oderiv-count=1.8768e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.58,0.58,0.61 0.63,0.71,0.79,0.89,0.96 1.0,1.1,1.2,1.3), mean=0.805, stddev=0.131], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.7,2.0,2.3,2.5 2.6,2.7,2.8,3.0), mean=2.02, stddev=0.351]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0603175, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08372, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.34, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.49,0.50,0.51 0.53,0.56,0.64,0.76,0.81 0.86,0.89,0.91,1.0), mean=0.661, stddev=0.109], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0843, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.67 0.77,0.83,0.94,1.1,1.1 1.2,1.2,1.2,1.2), mean=0.942, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.79,0.79,0.84 0.86,0.90,0.94,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.95, stddev=0.0789], bias-{mean,stddev}=-0.07072,0.0616, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.03e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.67,0.69 0.76,0.80,0.91,1.1,1.2 1.3,1.3,1.3,1.4), mean=0.942, stddev=0.163], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.25 0.27,0.31,0.37,0.41,0.43 0.45,0.47,0.47,0.50), mean=0.362, stddev=0.0617], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.006 0.006,0.006,0.007,0.008,0.008 0.009,0.009,0.009,0.01), mean=0.00735, stddev=0.000879], oderiv-count=626688
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.62,0.64,0.69 0.74,0.80,0.93,1.1,1.2 1.3,1.3,1.3,1.5), mean=0.947, stddev=0.176], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.9,1.9 2.1,2.2,2.7,3.0,3.2 3.4,3.5,3.5,3.7), mean=2.66, stddev=0.437]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0603175, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.005, max-change=0.75, params-rms=0.1179, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.33, stddev=0.00204], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.73,0.74,0.77 0.81,0.86,0.94,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.939, stddev=0.0922], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1761, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.1,1.1,1.2 1.3,1.3,1.4,1.5,1.5 1.6,1.6,1.6,1.6), mean=1.4, stddev=0.109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.9,2.0,2.1,2.1 2.1,2.2,2.2,2.2), mean=1.99, stddev=0.108], bias-{mean,stddev}=-0.03096,0.1206, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.19e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.3,1.4,1.5,1.7,1.8 1.9,1.9,2.0,2.0), mean=1.54, stddev=0.18], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.36 0.37,0.38,0.40,0.43,0.43 0.45,0.45,0.47,0.48), mean=0.402, stddev=0.0267], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.009,0.01 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0114, stddev=0.00165], oderiv-count=614720
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.3,1.4,1.5,1.7,1.8 1.9,1.9,2.0,2.1), mean=1.55, stddev=0.2], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.6,2.8,2.9 3.0,3.2,3.5,3.9,4.0 4.3,4.8,4.8,4.9), mean=3.54, stddev=0.452]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, params-rms=0.2216, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.5,2.5 2.5,2.5,2.5,2.5,2.5 2.5,2.5,2.5,2.5), mean=2.51, stddev=0.00728], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.4,1.5 1.6,1.6,1.8,1.9,2.0 2.0,2.1,2.1,2.1), mean=1.76, stddev=0.18], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-3e-08,-3e-08 -3e-08,-2e-08,8e-10,2e-08,3e-08 4e-08,4e-08,5e-08,5e-08), mean=2.77e-09, stddev=2.15e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.6,2.7,2.8 2.8,2.9,3.1,3.2,3.3 3.4,3.5,3.5,3.7), mean=3.1, stddev=0.196]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00172349, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.1898, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.16,0.25,0.51 0.79,1.1,1.5,1.8,1.9 2.0,2.1,2.2,2.9), mean=1.45, stddev=0.46], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,11,12,13,13 13,14,14,14), mean=12, stddev=0.679], bias-{mean,stddev}=0.001313,0.2736, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1219, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.70,0.76,0.82 0.89,0.92,0.97,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.972, stddev=0.0826], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.3,1.4,1.4,1.5 1.6,1.6,1.6,1.6), mean=1.38, stddev=0.104], bias-{mean,stddev}=-0.02432,0.1875, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.2e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.53,0.56,0.64 0.66,0.73,0.89,1.1,1.2 1.3,1.4,1.5,1.6), mean=0.916, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.35,0.38 0.40,0.41,0.46,0.52,0.55 0.56,0.61,0.62,0.64), mean=0.466, stddev=0.0615], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.006,0.006,0.006,0.006,0.007 0.007,0.008,0.008,0.02), mean=0.00622, stddev=0.00108], oderiv-count=639744
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.49,0.55,0.58 0.65,0.72,0.86,1.1,1.2 1.3,1.4,1.5,1.6), mean=0.901, stddev=0.221], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,1.0,1.0 1.1,1.2,1.4,1.5,1.6 1.6,1.7,1.7,1.9), mean=1.38, stddev=0.187]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00172349, l2-regularize=0.0005, max-change=0.75, params-rms=0.128, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.5), mean=1.45, stddev=0.000977], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.76,0.78,0.84 0.88,0.92,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.02, stddev=0.113], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-3e-08 -3e-08,-2e-08,6e-10,2e-08,3e-08 3e-08,4e-08,4e-08,5e-08), mean=-1.65e-10, stddev=2.07e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.3 1.3,1.4,1.4,1.5,1.6 1.6,1.6,1.6,1.7), mean=1.45, stddev=0.0932]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00861745, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1971, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.08,0.31 0.77,1.1,1.5,2.0,2.2 2.3,2.5,2.5,3.9), mean=1.47, stddev=0.559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,13,13,13 13,13,13,13), mean=12.5, stddev=0.226], bias-{mean,stddev}=1.711e-08,0.1901, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,9e-06 0.0001,0.0002,0.0006,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000808, stddev=0.0012], oderiv-count=622336
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/296.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/297.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.88605 tdnnf2.linear:2.82883 tdnnf2.affine:3.32966 tdnnf3.linear:2.54135 tdnnf3.affine:3.29349 tdnnf4.linear:2.3554 tdnnf4.affine:3.09024 tdnnf5.linear:2.10782 tdnnf5.affine:2.42799 tdnnf6.linear:1.95622 tdnnf6.affine:2.24721 tdnnf7.linear:1.86256 tdnnf7.affine:2.14118 tdnnf8.linear:1.74018 tdnnf8.affine:2.02021 tdnnf9.linear:1.72826 tdnnf9.affine:2.05376 tdnnf10.linear:1.78717 tdnnf10.affine:2.13966 tdnnf11.linear:1.84506 tdnnf11.affine:2.27262 tdnnf12.linear:1.92306 tdnnf12.affine:2.38387 tdnnf13.linear:2.11786 tdnnf13.affine:2.75546 prefinal-l:2.79729 prefinal-chain.affine:3.21793 prefinal-chain.linear:2.90695 output.affine:6.8267 prefinal-xent.affine:1.79043 prefinal-xent.linear:1.14687 output-xent.affine:6.10219 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:21.425 tdnnf2.linear:14.0129 tdnnf2.affine:14.2806 tdnnf3.linear:13.0656 tdnnf3.affine:13.8595 tdnnf4.linear:12.0628 tdnnf4.affine:13.1168 tdnnf5.linear:11.1269 tdnnf5.affine:10.7458 tdnnf6.linear:10.9691 tdnnf6.affine:10.4157 tdnnf7.linear:10.9985 tdnnf7.affine:10.3236 tdnnf8.linear:11.2098 tdnnf8.affine:10.1947 tdnnf9.linear:11.4603 tdnnf9.affine:10.4608 tdnnf10.linear:11.5299 tdnnf10.affine:10.4539 tdnnf11.linear:10.8409 tdnnf11.affine:10.144 tdnnf12.linear:10.1305 tdnnf12.affine:9.84421 tdnnf13.linear:10.7162 tdnnf13.affine:10.8423 prefinal-l:10.6698 prefinal-chain.affine:16.0054 prefinal-chain.linear:20.0525 output.affine:98.0478 prefinal-xent.affine:11.2422 prefinal-xent.linear:11.5832 output-xent.affine:100.954 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.276463 tdnnf2.linear:0.202977 tdnnf2.affine:0.236389 tdnnf3.linear:0.19611 tdnnf3.affine:0.241206 tdnnf4.linear:0.197372 tdnnf4.affine:0.238601 tdnnf5.linear:0.190666 tdnnf5.affine:0.227501 tdnnf6.linear:0.17871 tdnnf6.affine:0.216567 tdnnf7.linear:0.169849 tdnnf7.affine:0.208032 tdnnf8.linear:0.155485 tdnnf8.affine:0.198563 tdnnf9.linear:0.15075 tdnnf9.affine:0.196425 tdnnf10.linear:0.154982 tdnnf10.affine:0.204763 tdnnf11.linear:0.170067 tdnnf11.affine:0.223829 tdnnf12.linear:0.189643 tdnnf12.affine:0.242112 tdnnf13.linear:0.197236 tdnnf13.affine:0.253878 prefinal-l:0.263685 prefinal-chain.affine:0.200561 prefinal-chain.linear:0.144342 output.affine:0.0694096 prefinal-xent.affine:0.158756 prefinal-xent.linear:0.0987913 output-xent.affine:0.0604407 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 13:23:47 CST 2020, elapsed time 3 seconds
