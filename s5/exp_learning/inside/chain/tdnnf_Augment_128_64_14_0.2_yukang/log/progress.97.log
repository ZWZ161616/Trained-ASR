# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/97.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/96.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/97.mdl 
# Started at Mon Feb 24 08:27:06 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/97.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.142, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.0,1.3 1.4,1.7,2.0,2.4,2.7 3.0,3.3,3.3,3.5), mean=2.05, stddev=0.498], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.57,0.57,0.66 0.74,0.86,1.5,1.9,2.3 2.5,2.7,2.8,3.4), mean=1.5, stddev=0.587], bias-{mean,stddev}=-0.1286,0.203, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.96e+06, self-repaired-proportion=0.100095, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.002,0.002,0.004 0.007,0.03,0.10,0.19,0.25 0.29,0.33,0.36,0.40), mean=0.123, stddev=0.0936], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.03 0.05,0.11,0.33,0.52,0.64 0.72,0.79,0.79,0.85), mean=0.341, stddev=0.217], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.07,0.10 0.12,0.15,0.22,0.26), mean=0.0573, stddev=0.039], oderiv-count=1.30044e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0008,0.001,0.004 0.007,0.03,0.11,0.20,0.24 0.30,0.34,0.35,0.40), mean=0.123, stddev=0.0944], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.03 0.04,0.12,0.21,0.27,0.31 0.32,0.34,0.37,0.39), mean=0.197, stddev=0.0932]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.174603, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.141, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3), mean=2.26, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.58,0.59,0.71 0.82,0.98,1.1,1.3,1.3 1.4,1.4,1.5,1.7), mean=1.11, stddev=0.196], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1391, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.2,1.3 1.4,1.4,1.5,1.7,1.8 1.9,2.0,2.0,2.2), mean=1.56, stddev=0.184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.5,1.6,1.7,1.7 1.8,1.8,1.8,1.9), mean=1.57, stddev=0.119], bias-{mean,stddev}=-0.1533,0.09323, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.9e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.1,1.2,1.5 1.6,1.7,1.9,2.2,2.3 2.3,2.4,2.4,2.9), mean=1.93, stddev=0.286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.39 0.41,0.44,0.53,0.57,0.59 0.59,0.60,0.60,0.61), mean=0.513, stddev=0.0658], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.006,0.006,0.009), mean=0.00182, stddev=0.00112], oderiv-count=1.20749e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,1.1,1.2,1.5 1.6,1.7,2.0,2.2,2.4 2.4,2.6,2.6,2.9), mean=1.95, stddev=0.309], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.6,2.0,2.2 2.5,2.7,3.1,3.5,3.7 3.8,3.9,4.0,4.2), mean=3.09, stddev=0.511]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.174603, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1225, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.96, stddev=0.00234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.75,0.79,0.82 0.86,0.90,0.97,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.975, stddev=0.0982], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1206, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.99,0.99,1.1 1.2,1.3,1.3,1.4,1.6 1.7,1.7,1.8,1.9), mean=1.36, stddev=0.161], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.3,1.4,1.4,1.5 1.5,1.6,1.6,1.6), mean=1.36, stddev=0.101], bias-{mean,stddev}=-0.1313,0.05705, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.7,1.9,2.0,2.2,2.3 2.4,2.4,2.4,2.6), mean=2.04, stddev=0.226], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.43 0.44,0.47,0.52,0.55,0.57 0.57,0.58,0.58,0.59), mean=0.51, stddev=0.0463], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.002,0.003,0.005,0.007), mean=0.00124, stddev=0.000767], oderiv-count=1.10147e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.7,1.8,2.0,2.3,2.3 2.4,2.5,2.6,2.8), mean=2.04, stddev=0.242], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.1,2.4,2.5 2.7,2.9,3.2,3.7,3.9 4.0,4.2,4.3,4.7), mean=3.27, stddev=0.471]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.174603, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.78, stddev=0.00767], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.72,0.74,0.75 0.79,0.82,0.89,0.95,0.99 1.0,1.0,1.1,1.3), mean=0.887, stddev=0.079], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.118, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.73,0.90,1.1 1.2,1.2,1.3,1.4,1.5 1.6,1.6,1.6,1.7), mean=1.32, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.5 1.5,1.5,1.5,1.6), mean=1.33, stddev=0.104], bias-{mean,stddev}=-0.1567,0.07669, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.79e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.99,1.6,1.8 1.8,1.9,2.1,2.3,2.5 2.6,2.7,2.8,2.8), mean=2.12, stddev=0.301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.42 0.43,0.46,0.50,0.54,0.55 0.56,0.58,0.58,0.59), mean=0.5, stddev=0.0459], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0007 0.0007,0.0008,0.0009,0.001,0.001 0.002,0.004,0.004,0.008), mean=0.00105, stddev=0.000864], oderiv-count=9.9792e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.86,1.5,1.7 1.8,1.9,2.1,2.3,2.5 2.6,2.8,2.8,2.9), mean=2.13, stddev=0.317], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,1.3,2.2,2.8 2.9,3.1,3.4,3.8,4.2 4.4,5.2,5.3,5.3), mean=3.51, stddev=0.618]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.174603, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1069, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00476], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.70,0.73 0.76,0.79,0.85,0.91,0.94 0.98,1.0,1.0,1.1), mean=0.852, stddev=0.0743], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1102, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.72,0.85,1.1 1.1,1.1,1.2,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.24, stddev=0.145], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,1.0,1.1 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.6,1.7), mean=1.24, stddev=0.121], bias-{mean,stddev}=-0.143,0.07051, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.91e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.84,1.2,1.8 1.8,1.9,2.1,2.3,2.4 2.5,2.6,2.6,2.8), mean=2.12, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.41,0.42 0.44,0.47,0.51,0.54,0.55 0.56,0.58,0.58,0.61), mean=0.502, stddev=0.0404], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0007 0.0007,0.0007,0.0009,0.001,0.001 0.001,0.002,0.002,0.007), mean=0.000963, stddev=0.000681], oderiv-count=8.82086e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.95,1.2,1.8 1.9,1.9,2.2,2.4,2.5 2.5,2.6,2.7,2.9), mean=2.15, stddev=0.293], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.5,1.9,2.8 2.9,3.1,3.4,3.9,4.1 4.4,4.6,4.6,5.3), mean=3.46, stddev=0.565]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.174603, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1015, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.63,0.66,0.68 0.71,0.74,0.81,0.87,0.91 0.93,0.95,0.98,1.1), mean=0.808, stddev=0.0768], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09825, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.79,0.81,0.93 0.95,0.99,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.1, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.90,0.90,0.93 0.99,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.3), mean=1.11, stddev=0.102], bias-{mean,stddev}=-0.1314,0.0556, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.49e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,1.1,1.3,1.4 1.6,1.7,1.8,2.0,2.1 2.2,2.3,2.4,2.6), mean=1.84, stddev=0.251], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.43 0.44,0.46,0.50,0.53,0.54 0.54,0.56,0.57,0.58), mean=0.492, stddev=0.0385], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.00105, stddev=0.000285], oderiv-count=7.83494e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,1.1,1.3,1.5 1.6,1.7,1.8,2.1,2.1 2.1,2.2,2.5,2.6), mean=1.85, stddev=0.248], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.8,2.1,2.4 2.5,2.6,2.9,3.3,3.5 3.7,4.0,4.2,4.3), mean=2.97, stddev=0.434]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.174603, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1027, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.64, stddev=0.00201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.68 0.71,0.74,0.82,0.89,0.92 0.96,1.0,1.0,1.0), mean=0.817, stddev=0.084], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09678, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.74,0.77,0.83 0.92,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.09, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.91,0.94 0.95,0.99,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.09, stddev=0.105], bias-{mean,stddev}=-0.1207,0.04907, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.79e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.4 1.6,1.7,1.8,2.0,2.1 2.3,2.4,2.4,2.5), mean=1.84, stddev=0.254], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.42 0.44,0.46,0.48,0.51,0.52 0.53,0.55,0.56,0.58), mean=0.482, stddev=0.0363], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00107, stddev=0.000183], oderiv-count=6.62541e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.4 1.6,1.7,1.8,2.0,2.1 2.3,2.4,2.5,2.5), mean=1.84, stddev=0.26], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.1,2.4 2.5,2.6,2.9,3.3,3.6 3.8,4.1,4.2,4.2), mean=2.98, stddev=0.453]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.174603, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.7, stddev=0.00258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.68,0.71 0.74,0.77,0.84,0.91,0.94 0.98,1.0,1.1,1.1), mean=0.844, stddev=0.0846], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09787, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.67,0.73,0.82 0.91,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.1, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.82,0.85,0.91 0.97,0.99,1.1,1.2,1.2 1.3,1.4,1.4,1.5), mean=1.1, stddev=0.123], bias-{mean,stddev}=-0.1005,0.05101, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.12e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.5 1.6,1.6,1.9,2.1,2.3 2.5,2.6,2.7,2.8), mean=1.88, stddev=0.313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.37,0.40 0.41,0.43,0.45,0.49,0.50 0.52,0.53,0.54,0.56), mean=0.456, stddev=0.0403], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00105, stddev=0.000142], oderiv-count=5.86278e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.5 1.5,1.6,1.8,2.1,2.3 2.5,2.7,2.7,2.7), mean=1.88, stddev=0.32], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.4,2.5 2.7,2.8,3.0,3.6,3.9 4.4,4.7,4.9,5.0), mean=3.21, stddev=0.571]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.174603, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1067, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.61,0.63,0.68 0.71,0.76,0.85,0.93,0.97 1.0,1.1,1.1,1.2), mean=0.847, stddev=0.104], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09881, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.55,0.79 0.83,0.93,1.1,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.1, stddev=0.201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.87,0.88,0.93 0.95,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.11, stddev=0.124], bias-{mean,stddev}=-0.0855,0.04852, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.19e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.96,1.0,1.4 1.5,1.7,1.9,2.1,2.2 2.5,2.6,2.6,2.7), mean=1.88, stddev=0.326], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.38 0.40,0.42,0.45,0.48,0.49 0.50,0.51,0.51,0.53), mean=0.443, stddev=0.0476], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00119, stddev=0.000166], oderiv-count=4.89888e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,1.0,1.3 1.5,1.7,1.9,2.2,2.3 2.4,2.6,2.6,2.8), mean=1.89, stddev=0.339], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.4,2.5,2.7 2.7,2.9,3.2,3.6,4.0 4.3,4.6,4.6,5.0), mean=3.28, stddev=0.494]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.174603, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0.00397], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.63,0.64,0.67 0.70,0.76,0.86,0.99,1.1 1.1,1.2,1.2,1.3), mean=0.874, stddev=0.136], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1017, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.55,0.59,0.65 0.83,0.94,1.2,1.4,1.4 1.4,1.5,1.5,1.5), mean=1.13, stddev=0.233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.88,0.88,0.94 0.97,1.0,1.1,1.2,1.3 1.4,1.5,1.5,1.6), mean=1.14, stddev=0.143], bias-{mean,stddev}=-0.06288,0.04432, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.78e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.2,1.2,1.4 1.5,1.7,2.0,2.3,2.4 2.6,2.8,2.8,3.0), mean=1.98, stddev=0.371], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.31 0.38,0.40,0.44,0.46,0.47 0.48,0.49,0.49,0.51), mean=0.428, stddev=0.0498], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00136, stddev=0.000205], oderiv-count=3.88282e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.2,1.2,1.3 1.5,1.7,2.0,2.3,2.5 2.6,2.7,2.8,3.0), mean=1.98, stddev=0.384], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.8,2.8,2.9 3.0,3.2,3.5,4.0,4.3 4.6,4.9,5.0,5.2), mean=3.58, stddev=0.507]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.174603, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1069, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.61,0.63,0.65 0.68,0.72,0.81,0.97,1.1 1.1,1.2,1.2,1.3), mean=0.843, stddev=0.143], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09899, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.59,0.59,0.68 0.72,0.83,1.0,1.3,1.5 1.5,1.6,1.6,1.7), mean=1.09, stddev=0.274], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.85,0.92,0.93 0.98,1.0,1.1,1.2,1.3 1.3,1.3,1.4,1.4), mean=1.11, stddev=0.107], bias-{mean,stddev}=-0.07736,0.046, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.3,1.4,1.7,1.9,2.0 2.0,2.4,2.4,2.7), mean=1.67, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.30 0.32,0.35,0.40,0.43,0.45 0.46,0.46,0.47,0.49), mean=0.391, stddev=0.0515], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.003), mean=0.00191, stddev=0.000304], oderiv-count=2.88192e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.7,1.8,2.0 2.1,2.5,2.5,2.7), mean=1.67, stddev=0.292], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.8,2.8,2.9 3.0,3.1,3.5,4.0,4.3 4.4,5.0,5.1,5.3), mean=3.59, stddev=0.537]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.174603, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1035, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0.00559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.57,0.59,0.64 0.66,0.69,0.80,0.92,1.0 1.1,1.2,1.2,1.2), mean=0.816, stddev=0.141], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09671, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.55,0.58,0.64 0.68,0.78,1.0,1.4,1.5 1.6,1.6,1.6,1.7), mean=1.05, stddev=0.297], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.85,0.88,0.91 0.94,0.98,1.1,1.2,1.3 1.3,1.3,1.3,1.5), mean=1.09, stddev=0.124], bias-{mean,stddev}=-0.08427,0.05901, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.2e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.84,0.93,0.99 1.1,1.2,1.4,1.6,1.8 2.0,2.1,2.1,2.4), mean=1.43, stddev=0.301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.16,0.20 0.22,0.27,0.36,0.41,0.43 0.46,0.48,0.49,0.54), mean=0.343, stddev=0.0801], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003,0.003 0.004,0.005,0.005,0.005), mean=0.00297, stddev=0.000542], oderiv-count=1.88333e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.80,0.93,0.98 1.0,1.2,1.4,1.6,1.8 2.0,2.1,2.1,2.4), mean=1.42, stddev=0.307], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.5,2.6,2.8 2.9,3.0,3.6,4.1,4.5 4.8,5.2,5.2,5.6), mean=3.64, stddev=0.647]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.174603, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09972, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.60,0.63 0.65,0.69,0.76,0.87,0.97 1.1,1.1,1.2,1.2), mean=0.787, stddev=0.128], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09257, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.56,0.59 0.65,0.71,0.95,1.3,1.5 1.5,1.6,1.6,1.7), mean=1, stddev=0.307], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.81,0.83,0.86 0.89,0.95,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.105], bias-{mean,stddev}=-0.1065,0.08451, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.96e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.79,0.80,0.85 0.90,0.95,1.2,1.5,1.6 1.7,1.8,1.8,2.0), mean=1.23, stddev=0.273], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.16,0.19,0.28,0.38,0.44 0.45,0.47,0.47,0.52), mean=0.288, stddev=0.104], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.006,0.007,0.008 0.009,0.01,0.01,0.01), mean=0.0064, stddev=0.00135], oderiv-count=610368
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.81,0.81,0.90 0.91,1.0,1.2,1.5,1.6 1.7,1.8,1.8,1.9), mean=1.25, stddev=0.263], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.6,3.1 3.2,3.5,4.1,4.4,4.9 5.2,5.4,5.4,5.6), mean=4.02, stddev=0.628]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.174603, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.005, max-change=0.75, params-rms=0.125, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.41, stddev=0.0057], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.72,0.76,0.81 0.85,0.90,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.994, stddev=0.109], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.217, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.6,1.6,1.7,1.8,1.9 1.9,1.9,1.9,2.0), mean=1.73, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.2 2.2,2.3,2.4,2.6,2.7 2.7,2.8,2.9,3.0), mean=2.45, stddev=0.178], bias-{mean,stddev}=-0.006038,0.1293, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.8 1.9,2.0,2.2,2.4,2.6 2.7,2.8,2.9,3.0), mean=2.21, stddev=0.273], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.35 0.36,0.37,0.39,0.42,0.44 0.44,0.45,0.45,0.47), mean=0.392, stddev=0.03], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.009,0.009 0.009,0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0106, stddev=0.0013], oderiv-count=613632
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.8 1.9,2.0,2.2,2.4,2.6 2.7,2.9,3.0,3.2), mean=2.23, stddev=0.278], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.3,4.5,4.6,4.9 5.0,5.2,5.9,6.5,6.9 7.3,8.4,8.7,9.0), mean=5.97, stddev=0.862]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, params-rms=0.274, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.1,3.1,3.1,3.1 3.1,3.1,3.1,3.1,3.1 3.1,3.1,3.1,3.1), mean=3.1, stddev=-nan], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.6,1.8 1.9,2.0,2.2,2.4,2.4 2.5,2.6,2.6,2.7), mean=2.18, stddev=0.209], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8e-08,-8e-08,-5e-08,-4e-08 -4e-08,-3e-08,-2e-09,1e-08,2e-08 3e-08,4e-08,4e-08,4e-08), mean=-5.68e-09, stddev=2.46e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.4,3.5 3.6,3.6,3.8,3.9,4.1 4.1,4.2,4.5,4.6), mean=3.8, stddev=0.232]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00743583, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2142, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.14,0.22,0.47 0.74,1.1,1.7,2.1,2.3 2.4,2.5,2.6,3.1), mean=1.61, stddev=0.592], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,12,12 13,13,13,14,15 15,16,16,16), mean=13.6, stddev=0.917], bias-{mean,stddev}=0.0009676,0.2824, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1633, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.79,0.98,1.2 1.2,1.2,1.3,1.4,1.4 1.4,1.4,1.5,1.7), mean=1.3, stddev=0.112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.8,1.8,1.9,2.0 2.0,2.0,2.1,2.2), mean=1.84, stddev=0.116], bias-{mean,stddev}=-0.04412,0.2202, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.95e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.73,0.74,0.79 0.82,0.91,1.1,1.4,1.5 1.6,1.7,1.7,1.9), mean=1.14, stddev=0.257], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.37,0.39 0.41,0.43,0.47,0.53,0.56 0.57,0.60,0.60,0.66), mean=0.478, stddev=0.0594], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.005,0.005,0.006 0.006,0.006,0.007,0.01), mean=0.00514, stddev=0.000887], oderiv-count=622336
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.73,0.74 0.85,0.90,1.1,1.3,1.6 1.6,1.7,1.7,1.9), mean=1.14, stddev=0.26], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.4,1.5,1.7,1.9,2.0 2.0,2.1,2.1,2.2), mean=1.72, stddev=0.218]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00743583, l2-regularize=0.0005, max-change=0.75, params-rms=0.1553, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.76, stddev=0.000977], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.95,0.95,1.0 1.1,1.2,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.24, stddev=0.118], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-4e-08,-3e-08 -2e-08,-2e-08,2e-09,2e-08,2e-08 3e-08,3e-08,3e-08,4e-08), mean=6.32e-10, stddev=1.97e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.8,1.8,1.9,2.0,2.0 2.0,2.0,2.1,2.2), mean=1.87, stddev=0.0999]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0371791, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1907, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.25 0.68,0.99,1.5,1.9,2.1 2.3,2.4,2.5,3.7), mean=1.42, stddev=0.563], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,12,12,12 12,12,12,12), mean=12.1, stddev=0.203], bias-{mean,stddev}=3.989e-08,0.2177, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000783, stddev=0.0012], oderiv-count=603840
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/96.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/97.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.41494 tdnnf2.linear:5.18095 tdnnf2.affine:5.8368 tdnnf3.linear:4.38283 tdnnf3.affine:5.10605 tdnnf4.linear:4.04457 tdnnf4.affine:5.12572 tdnnf5.linear:3.88498 tdnnf5.affine:4.83672 tdnnf6.linear:3.58876 tdnnf6.affine:4.17268 tdnnf7.linear:3.402 tdnnf7.affine:3.86175 tdnnf8.linear:3.2198 tdnnf8.affine:3.68448 tdnnf9.linear:3.20073 tdnnf9.affine:3.82517 tdnnf10.linear:3.28815 tdnnf10.affine:4.01698 tdnnf11.linear:3.45273 tdnnf11.affine:4.22541 tdnnf12.linear:3.61771 tdnnf12.affine:4.51015 tdnnf13.linear:3.88269 tdnnf13.affine:4.73974 prefinal-l:2.89645 prefinal-chain.affine:5.17449 prefinal-chain.linear:4.28879 output.affine:14.1532 prefinal-xent.affine:3.27941 prefinal-xent.linear:1.97381 output-xent.affine:13.8015 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.9849 tdnnf2.linear:18.0446 tdnnf2.affine:17.9194 tdnnf3.linear:15.6771 tdnnf3.affine:15.5271 tdnnf4.linear:14.2513 tdnnf4.affine:15.2275 tdnnf5.linear:13.6866 tdnnf5.affine:14.2185 tdnnf6.linear:12.9941 tdnnf6.affine:12.6798 tdnnf7.linear:13.1445 tdnnf7.affine:12.4758 tdnnf8.linear:13.5678 tdnnf8.affine:12.5927 tdnnf9.linear:13.6554 tdnnf9.affine:12.6967 tdnnf10.linear:14.1582 tdnnf10.affine:13.0511 tdnnf11.linear:13.6869 tdnnf11.affine:12.7118 tdnnf12.linear:13.2462 tdnnf12.affine:12.4331 tdnnf13.linear:12.7644 tdnnf13.affine:11.949 prefinal-l:11.311 prefinal-chain.affine:19.6965 prefinal-chain.linear:24.8026 output.affine:110.378 prefinal-xent.affine:14.9948 prefinal-xent.linear:14.0573 output-xent.affine:97.9431 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.310122 tdnnf2.linear:0.289 tdnnf2.affine:0.329757 tdnnf3.linear:0.281414 tdnnf3.affine:0.331709 tdnnf4.linear:0.285559 tdnnf4.affine:0.341879 tdnnf5.linear:0.288477 tdnnf5.affine:0.348606 tdnnf6.linear:0.278851 tdnnf6.affine:0.332059 tdnnf7.linear:0.259605 tdnnf7.affine:0.310898 tdnnf8.linear:0.236677 tdnnf8.affine:0.292454 tdnnf9.linear:0.234325 tdnnf9.affine:0.301103 tdnnf10.linear:0.23211 tdnnf10.affine:0.308571 tdnnf11.linear:0.252394 tdnnf11.affine:0.332674 tdnnf12.linear:0.273583 tdnnf12.affine:0.362691 tdnnf13.linear:0.305045 tdnnf13.affine:0.396631 prefinal-l:0.256611 prefinal-chain.affine:0.263525 prefinal-chain.linear:0.173167 output.affine:0.12848 prefinal-xent.affine:0.219006 prefinal-xent.linear:0.140785 output-xent.affine:0.14092 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 08:27:09 CST 2020, elapsed time 3 seconds
