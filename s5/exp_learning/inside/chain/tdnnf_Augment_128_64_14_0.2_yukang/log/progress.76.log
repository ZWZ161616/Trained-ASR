# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/76.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/75.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/76.mdl 
# Started at Mon Feb 24 07:55:11 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/76.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1383, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.93,0.99,1.2 1.3,1.6,2.0,2.3,2.6 2.9,3.2,3.3,3.3), mean=1.99, stddev=0.493], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.53,0.53,0.59 0.71,0.81,1.4,1.9,2.3 2.5,2.7,2.7,3.4), mean=1.45, stddev=0.59], bias-{mean,stddev}=-0.1206,0.2032, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.52e+06, self-repaired-proportion=0.0899231, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.002,0.002,0.004 0.006,0.03,0.12,0.20,0.23 0.29,0.34,0.35,0.42), mean=0.125, stddev=0.0929], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.04 0.05,0.11,0.34,0.52,0.67 0.70,0.80,0.80,0.84), mean=0.348, stddev=0.216], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.09 0.10,0.13,0.14,0.16), mean=0.0482, stddev=0.0277], oderiv-count=1.3418e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0008,0.0008,0.002 0.006,0.03,0.12,0.20,0.24 0.28,0.34,0.35,0.43), mean=0.124, stddev=0.0926], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.04,0.11,0.21,0.27,0.31 0.33,0.35,0.36,0.37), mean=0.199, stddev=0.0939]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0634921, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1424, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3), mean=2.28, stddev=0.00431], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.57,0.61,0.69 0.82,0.98,1.2,1.3,1.3 1.4,1.4,1.5,1.7), mean=1.12, stddev=0.202], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1368, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.3 1.3,1.4,1.5,1.6,1.8 1.8,1.9,2.0,2.2), mean=1.54, stddev=0.183], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.4 1.4,1.4,1.5,1.6,1.7 1.8,1.8,1.8,1.8), mean=1.54, stddev=0.114], bias-{mean,stddev}=-0.1359,0.08451, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.39e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.5,1.6,1.8,2.1,2.2 2.2,2.3,2.3,2.5), mean=1.82, stddev=0.264], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.39 0.41,0.44,0.52,0.56,0.58 0.59,0.60,0.60,0.60), mean=0.505, stddev=0.0639], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.004,0.005,0.006), mean=0.00167, stddev=0.000783], oderiv-count=1.20325e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.5,1.6,1.8,2.0,2.2 2.3,2.3,2.4,2.5), mean=1.8, stddev=0.272], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.6,2.0,2.1 2.3,2.5,2.9,3.3,3.5 3.7,3.8,3.9,4.2), mean=2.93, stddev=0.487]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0634921, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1238, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.98, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.75,0.80,0.81 0.86,0.90,0.98,1.1,1.1 1.2,1.2,1.3,1.4), mean=0.985, stddev=0.107], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.96,0.98,1.1 1.2,1.2,1.3,1.4,1.5 1.6,1.8,1.8,1.9), mean=1.34, stddev=0.17], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.3,1.4,1.5 1.5,1.6,1.6,1.6), mean=1.35, stddev=0.102], bias-{mean,stddev}=-0.1135,0.05452, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.5e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.6 1.7,1.8,1.9,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.96, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.43 0.44,0.47,0.51,0.55,0.57 0.57,0.58,0.59,0.59), mean=0.508, stddev=0.0452], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.0009,0.001,0.001,0.001 0.002,0.003,0.004,0.005), mean=0.00117, stddev=0.000577], oderiv-count=1.07626e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.7,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.95, stddev=0.223], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.0,2.1,2.5 2.7,2.9,3.1,3.5,3.7 3.9,4.0,4.1,4.6), mean=3.18, stddev=0.44]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0634921, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.76, stddev=0.00352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.66,0.70,0.74 0.77,0.81,0.88,0.94,0.98 1.0,1.1,1.1,1.3), mean=0.877, stddev=0.0851], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1115, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.76,0.87,1.0 1.1,1.1,1.2,1.4,1.5 1.5,1.5,1.6,1.6), mean=1.25, stddev=0.154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.1,1.2,1.3,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.26, stddev=0.0944], bias-{mean,stddev}=-0.1313,0.06829, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.69e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.90,1.5,1.6 1.7,1.8,2.0,2.1,2.3 2.4,2.4,2.5,2.5), mean=1.96, stddev=0.266], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.40,0.42 0.43,0.46,0.51,0.55,0.56 0.56,0.57,0.57,0.60), mean=0.504, stddev=0.0478], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0007,0.0007 0.0007,0.0008,0.0009,0.001,0.001 0.001,0.003,0.004,0.006), mean=0.00101, stddev=0.000593], oderiv-count=9.9088e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.87,1.5,1.6 1.7,1.8,2.0,2.2,2.3 2.4,2.4,2.5,2.6), mean=1.96, stddev=0.274], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.3,2.4,2.6 2.7,2.8,3.1,3.5,3.8 4.2,4.5,4.6,4.6), mean=3.19, stddev=0.53]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0634921, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1042, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.67, stddev=0.00602], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.68,0.71 0.73,0.77,0.83,0.90,0.93 0.94,0.96,0.99,1.1), mean=0.83, stddev=0.0767], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1064, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.74,0.74,0.99 1.0,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.2, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.0,1.0,1.1 1.1,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.6), mean=1.2, stddev=0.105], bias-{mean,stddev}=-0.1286,0.06642, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.79e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.95,1.3,1.6 1.7,1.8,2.0,2.2,2.3 2.4,2.5,2.5,2.6), mean=1.98, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.43 0.43,0.45,0.49,0.53,0.55 0.56,0.57,0.57,0.58), mean=0.494, stddev=0.0426], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0007 0.0007,0.0008,0.0008,0.001,0.001 0.001,0.002,0.002,0.006), mean=0.000939, stddev=0.00052], oderiv-count=9.15283e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.96,1.3,1.6 1.7,1.8,2.0,2.2,2.3 2.3,2.5,2.5,2.6), mean=1.97, stddev=0.278], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.5,1.9,2.6 2.7,2.8,3.2,3.7,4.0 4.4,4.7,4.7,4.8), mean=3.26, stddev=0.583]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0634921, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1008, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.61, stddev=0.00224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.66,0.68 0.71,0.74,0.80,0.87,0.90 0.92,0.94,0.96,0.99), mean=0.803, stddev=0.0731], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09733, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.76,0.81,0.92 0.94,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.09, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.91,0.92,0.95 0.98,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.1, stddev=0.0928], bias-{mean,stddev}=-0.1192,0.05587, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.35e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,1.1,1.2,1.4 1.6,1.6,1.8,1.9,2.1 2.2,2.3,2.4,2.6), mean=1.79, stddev=0.254], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.42 0.43,0.45,0.50,0.52,0.54 0.55,0.56,0.56,0.58), mean=0.49, stddev=0.042], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.00102, stddev=0.000252], oderiv-count=7.76486e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,1.1,1.2,1.4 1.5,1.6,1.8,1.9,2.1 2.2,2.2,2.3,2.6), mean=1.78, stddev=0.255], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.9,1.9,2.3 2.4,2.5,2.8,3.3,3.5 3.6,3.7,3.8,4.6), mean=2.89, stddev=0.462]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0634921, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1022, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.64, stddev=0.0042], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.67,0.68 0.71,0.73,0.81,0.88,0.93 0.95,0.99,1.0,1.1), mean=0.813, stddev=0.0848], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09648, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.70,0.83 0.91,0.97,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.08, stddev=0.147], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.88,0.89,0.92 0.95,0.97,1.1,1.2,1.2 1.3,1.4,1.4,1.4), mean=1.09, stddev=0.107], bias-{mean,stddev}=-0.1086,0.04681, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.72e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.99,1.2,1.4 1.5,1.6,1.8,2.0,2.1 2.2,2.3,2.4,2.4), mean=1.79, stddev=0.257], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.37,0.42 0.43,0.45,0.48,0.51,0.52 0.54,0.55,0.55,0.57), mean=0.477, stddev=0.0383], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00104, stddev=0.000178], oderiv-count=7.11437e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,1.0,1.3,1.4 1.5,1.6,1.8,2.0,2.1 2.2,2.3,2.3,2.3), mean=1.79, stddev=0.258], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.9,1.9,2.3 2.4,2.5,2.9,3.2,3.5 3.8,4.1,4.1,4.4), mean=2.92, stddev=0.478]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0634921, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1065, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.7, stddev=0.00498], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.68,0.70 0.73,0.77,0.84,0.93,0.95 0.98,1.1,1.1,1.1), mean=0.847, stddev=0.0899], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09801, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.72,0.78,0.82 0.89,0.97,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.1, stddev=0.154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.86,0.92 0.95,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.1, stddev=0.12], bias-{mean,stddev}=-0.09195,0.04144, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.63e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.4 1.5,1.7,1.8,2.1,2.3 2.5,2.6,2.7,2.8), mean=1.87, stddev=0.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.38,0.40 0.41,0.42,0.45,0.49,0.51 0.52,0.52,0.52,0.55), mean=0.456, stddev=0.0386], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00101, stddev=0.000129], oderiv-count=5.77933e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.4 1.5,1.7,1.9,2.1,2.3 2.5,2.7,2.7,2.8), mean=1.88, stddev=0.315], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.3,2.3,2.4 2.6,2.8,3.0,3.5,3.9 4.5,4.9,4.9,5.1), mean=3.2, stddev=0.599]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0634921, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.107, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00375], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.65,0.67 0.70,0.75,0.85,0.94,0.99 1.0,1.1,1.1,1.2), mean=0.849, stddev=0.108], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09958, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.54,0.61,0.76 0.83,0.94,1.1,1.3,1.3 1.4,1.5,1.5,1.6), mean=1.11, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.89,0.92 0.95,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.12, stddev=0.119], bias-{mean,stddev}=-0.07826,0.04201, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.98e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,1.0,1.1,1.3 1.6,1.7,1.9,2.2,2.3 2.4,2.5,2.6,2.8), mean=1.91, stddev=0.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.29,0.36 0.40,0.41,0.45,0.48,0.50 0.51,0.52,0.53,0.57), mean=0.445, stddev=0.049], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00113, stddev=0.00017], oderiv-count=4.8816e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,1.0,1.1,1.3 1.6,1.7,1.9,2.2,2.3 2.5,2.5,2.5,2.7), mean=1.92, stddev=0.328], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.4,2.4,2.5 2.7,2.9,3.2,3.7,4.1 4.2,4.5,4.7,5.2), mean=3.32, stddev=0.537]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0634921, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1108, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0.00207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.61,0.64,0.67 0.71,0.76,0.87,0.99,1.1 1.1,1.2,1.2,1.3), mean=0.876, stddev=0.134], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.102, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.57,0.61,0.72 0.76,0.95,1.1,1.4,1.4 1.4,1.5,1.5,1.5), mean=1.13, stddev=0.233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.86,0.86,0.92 0.99,1.0,1.1,1.2,1.3 1.4,1.5,1.5,1.5), mean=1.14, stddev=0.144], bias-{mean,stddev}=-0.05813,0.04246, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.52e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.3,1.4 1.5,1.8,2.0,2.3,2.5 2.7,2.8,2.9,2.9), mean=2.02, stddev=0.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.32 0.37,0.40,0.44,0.46,0.47 0.48,0.50,0.50,0.51), mean=0.43, stddev=0.0484], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00128, stddev=0.000203], oderiv-count=4.01978e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.3,1.4 1.5,1.8,2.0,2.3,2.4 2.7,2.8,2.8,2.9), mean=2.01, stddev=0.365], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.7,2.7,2.9 3.0,3.2,3.5,4.0,4.2 4.5,4.9,5.0,5.5), mean=3.59, stddev=0.524]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0634921, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1091, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.8), mean=1.75, stddev=0.00201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.63,0.65,0.67 0.70,0.74,0.84,0.99,1.1 1.1,1.2,1.3,1.3), mean=0.861, stddev=0.145], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.49,0.54,0.67 0.78,0.86,1.1,1.4,1.5 1.6,1.6,1.7,1.7), mean=1.11, stddev=0.284], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.92,0.97 0.99,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.14, stddev=0.111], bias-{mean,stddev}=-0.06855,0.04404, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.86e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.2,1.4 1.5,1.6,1.8,2.1,2.2 2.4,2.5,2.5,2.6), mean=1.84, stddev=0.314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.27,0.30 0.32,0.36,0.40,0.44,0.45 0.46,0.47,0.47,0.48), mean=0.397, stddev=0.0508], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00173, stddev=0.000261], oderiv-count=2.84653e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.0,1.2,1.3 1.4,1.6,1.8,2.1,2.2 2.4,2.5,2.5,2.7), mean=1.83, stddev=0.33], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.7,2.8,2.9 3.1,3.3,3.6,4.1,4.3 4.5,4.7,4.9,5.2), mean=3.68, stddev=0.509]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0634921, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1069, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00324], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.62,0.64 0.68,0.72,0.81,0.97,1.0 1.1,1.2,1.3,1.3), mean=0.842, stddev=0.15], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09981, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.59,0.66 0.74,0.78,1.0,1.4,1.6 1.6,1.7,1.7,1.7), mean=1.08, stddev=0.317], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.92,0.93,0.97 0.98,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.12, stddev=0.116], bias-{mean,stddev}=-0.06516,0.0513, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.87,0.97,1.2 1.2,1.3,1.6,1.8,2.1 2.2,2.4,2.4,2.4), mean=1.61, stddev=0.326], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.20,0.21 0.26,0.30,0.35,0.41,0.44 0.46,0.48,0.48,0.59), mean=0.353, stddev=0.0736], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.004,0.004,0.005), mean=0.00264, stddev=0.000467], oderiv-count=1.88333e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.82,0.90,1.1 1.2,1.3,1.6,1.8,2.1 2.2,2.4,2.4,2.5), mean=1.59, stddev=0.346], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.7,2.9 3.0,3.2,3.7,4.3,4.6 4.7,4.9,5.3,5.9), mean=3.78, stddev=0.621]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0634921, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09872, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.58, stddev=0.00224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.59,0.61 0.64,0.67,0.75,0.88,0.95 1.1,1.1,1.2,1.2), mean=0.779, stddev=0.132], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09251, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.57,0.57,0.61 0.63,0.69,0.96,1.3,1.5 1.5,1.6,1.6,1.7), mean=1, stddev=0.305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.83,0.88,0.90 0.92,0.95,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.0978], bias-{mean,stddev}=-0.08719,0.07531, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.16e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.78,0.79,0.86 0.94,1.0,1.3,1.6,1.7 1.8,1.8,1.8,2.1), mean=1.3, stddev=0.288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.17,0.19,0.29,0.39,0.43 0.44,0.45,0.46,0.54), mean=0.293, stddev=0.0973], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.006,0.007,0.008 0.009,0.009,0.01,0.01), mean=0.00617, stddev=0.00136], oderiv-count=622336
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.73,0.74,0.80 0.88,0.99,1.3,1.5,1.7 1.7,1.8,1.9,2.1), mean=1.28, stddev=0.292], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.8,2.8,3.0 3.2,3.4,3.8,4.1,4.4 4.7,4.9,4.9,5.2), mean=3.8, stddev=0.508]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0634921, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.005, max-change=0.75, params-rms=0.122, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.38, stddev=0.000772], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.67,0.69,0.78 0.81,0.86,0.98,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.969, stddev=0.117], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2123, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.5 1.5,1.6,1.7,1.8,1.8 1.9,1.9,1.9,2.0), mean=1.69, stddev=0.122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.1 2.2,2.3,2.4,2.5,2.6 2.7,2.7,2.8,2.8), mean=2.4, stddev=0.167], bias-{mean,stddev}=-0.00601,0.1274, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.19e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.8,1.8,2.1,2.3,2.4 2.5,2.6,2.7,2.8), mean=2.09, stddev=0.259], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.35,0.35 0.35,0.36,0.39,0.42,0.43 0.44,0.45,0.45,0.46), mean=0.39, stddev=0.0292], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.009,0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0107, stddev=0.00135], oderiv-count=614720
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.7,1.8,2.1,2.3,2.5 2.5,2.6,2.7,2.7), mean=2.07, stddev=0.273], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.5,4.1,4.3,4.4 4.6,4.8,5.2,5.7,6.1 6.4,6.8,6.9,7.5), mean=5.27, stddev=0.634]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, params-rms=0.265, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.0,3.0,3.0 3.0,3.0,3.0,3.0,3.0 3.0,3.0,3.0,3.0), mean=3, stddev=0.00507], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.8 1.9,2.0,2.1,2.2,2.3 2.4,2.5,2.6,2.6), mean=2.11, stddev=0.186], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-4e-08 -3e-08,-2e-08,3e-09,3e-08,3e-08 4e-08,5e-08,5e-08,5e-08), mean=2.14e-09, stddev=2.52e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.3,3.4 3.4,3.5,3.7,3.8,4.0 4.1,4.1,4.3,4.5), mean=3.71, stddev=0.229]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00866954, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2037, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.12,0.21,0.42 0.68,0.99,1.6,2.0,2.2 2.3,2.4,2.5,3.0), mean=1.53, stddev=0.573], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,12 12,12,13,14,14 15,15,15,15), mean=12.9, stddev=0.888], bias-{mean,stddev}=0.0008144,0.2782, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1646, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.79,1.0,1.1 1.2,1.3,1.3,1.4,1.4 1.4,1.5,1.5,1.6), mean=1.31, stddev=0.115], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.8,1.9,2.0,2.0 2.0,2.0,2.1,2.1), mean=1.86, stddev=0.112], bias-{mean,stddev}=-0.02939,0.209, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.70,0.71,0.74 0.80,0.89,1.1,1.3,1.4 1.5,1.6,1.6,1.8), mean=1.1, stddev=0.231], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.37,0.39 0.40,0.42,0.47,0.51,0.55 0.56,0.56,0.57,0.62), mean=0.47, stddev=0.0542], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.005,0.005,0.006 0.006,0.006,0.006,0.01), mean=0.00512, stddev=0.000889], oderiv-count=609280
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.68,0.73 0.76,0.88,1.1,1.3,1.4 1.5,1.6,1.6,1.8), mean=1.09, stddev=0.24], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.3 1.4,1.5,1.7,1.9,2.0 2.1,2.1,2.1,2.3), mean=1.7, stddev=0.223]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00866954, l2-regularize=0.0005, max-change=0.75, params-rms=0.1574, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.78, stddev=-nan], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,1.1 1.1,1.2,1.3,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.25, stddev=0.117], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-3e-08 -3e-08,-2e-08,-7e-10,2e-08,3e-08 3e-08,3e-08,4e-08,7e-08), mean=1.37e-09, stddev=2.18e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.9,2.0,2.0 2.1,2.1,2.1,2.1), mean=1.89, stddev=0.104]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0433477, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1904, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.24 0.68,1.0,1.5,1.9,2.1 2.3,2.4,2.5,3.7), mean=1.42, stddev=0.562], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,12,12,12 12,12,12,13), mean=12.1, stddev=0.21], bias-{mean,stddev}=6.905e-08,0.2118, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000782, stddev=0.00121], oderiv-count=613632
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/75.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/76.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.02316 tdnnf2.linear:5.10417 tdnnf2.affine:5.59602 tdnnf3.linear:4.40528 tdnnf3.affine:4.99057 tdnnf4.linear:3.969 tdnnf4.affine:4.72828 tdnnf5.linear:3.69095 tdnnf5.affine:4.48321 tdnnf6.linear:3.44264 tdnnf6.affine:4.05363 tdnnf7.linear:3.39018 tdnnf7.affine:3.90226 tdnnf8.linear:3.14734 tdnnf8.affine:3.72013 tdnnf9.linear:3.18172 tdnnf9.affine:3.83994 tdnnf10.linear:3.1986 tdnnf10.affine:4.0063 tdnnf11.linear:3.41567 tdnnf11.affine:4.23202 tdnnf12.linear:3.59035 tdnnf12.affine:4.48755 tdnnf13.linear:3.8605 tdnnf13.affine:4.8402 prefinal-l:2.64348 prefinal-chain.affine:4.95147 prefinal-chain.linear:4.11812 output.affine:13.42 prefinal-xent.affine:3.33477 prefinal-xent.linear:2.0296 output-xent.affine:13.6231 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.363 tdnnf2.linear:18.2214 tdnnf2.affine:17.6087 tdnnf3.linear:15.8456 tdnnf3.affine:15.3487 tdnnf4.linear:14.0975 tdnnf4.affine:14.3719 tdnnf5.linear:13.3381 tdnnf5.affine:13.7233 tdnnf6.linear:12.907 tdnnf6.affine:12.5475 tdnnf7.linear:13.0827 tdnnf7.affine:12.4215 tdnnf8.linear:13.6289 tdnnf8.affine:12.5969 tdnnf9.linear:13.6896 tdnnf9.affine:12.7855 tdnnf10.linear:14.1766 tdnnf10.affine:13.0774 tdnnf11.linear:13.9663 tdnnf11.affine:12.9681 tdnnf12.linear:13.6802 tdnnf12.affine:12.8106 tdnnf13.linear:12.6365 tdnnf13.affine:11.9124 prefinal-l:11.0455 prefinal-chain.affine:19.2725 prefinal-chain.linear:23.982 output.affine:105.071 prefinal-xent.affine:15.0869 prefinal-xent.linear:14.2435 output-xent.affine:97.7274 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.300139 tdnnf2.linear:0.279826 tdnnf2.affine:0.317639 tdnnf3.linear:0.27709 tdnnf3.affine:0.322576 tdnnf4.linear:0.280156 tdnnf4.affine:0.329528 tdnnf5.linear:0.276336 tdnnf5.affine:0.326625 tdnnf6.linear:0.265734 tdnnf6.affine:0.322158 tdnnf7.linear:0.259066 tdnnf7.affine:0.31416 tdnnf8.linear:0.230045 tdnnf8.affine:0.295699 tdnnf9.linear:0.232638 tdnnf9.affine:0.300861 tdnnf10.linear:0.225721 tdnnf10.affine:0.306749 tdnnf11.linear:0.243793 tdnnf11.affine:0.32601 tdnnf12.linear:0.261922 tdnnf12.affine:0.350711 tdnnf13.linear:0.305405 tdnnf13.affine:0.406697 prefinal-l:0.240772 prefinal-chain.affine:0.257011 prefinal-chain.linear:0.17219 output.affine:0.128154 prefinal-xent.affine:0.220871 prefinal-xent.linear:0.142524 output-xent.affine:0.139331 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 07:55:14 CST 2020, elapsed time 3 seconds
