# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/175.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/174.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/175.mdl 
# Started at Mon Feb 24 10:24:38 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/175.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1551, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.6 1.8,1.9,2.1,2.6,3.1 3.2,3.4,3.4,3.8), mean=2.25, stddev=0.504], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.64,0.73 0.79,0.97,1.6,2.1,2.6 2.8,3.2,3.3,3.9), mean=1.63, stddev=0.662], bias-{mean,stddev}=-0.16,0.217, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=9.01e+06, self-repaired-proportion=0.0220073, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.008,0.02 0.03,0.05,0.10,0.20,0.26 0.32,0.35,0.37,0.39), mean=0.127, stddev=0.0907], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.05,0.08 0.10,0.17,0.30,0.51,0.65 0.73,0.76,0.80,0.82), mean=0.337, stddev=0.199], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.06,0.06 0.07,0.11,0.11,0.17), mean=0.0438, stddev=0.0216], oderiv-count=1.27747e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.006,0.02 0.03,0.05,0.11,0.20,0.25 0.32,0.35,0.36,0.40), mean=0.129, stddev=0.0923], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.08 0.11,0.15,0.22,0.29,0.31 0.33,0.34,0.34,0.37), mean=0.218, stddev=0.0777]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.447619, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1275, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=2.04, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.75,0.80,0.82 0.86,0.91,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.01, stddev=0.119], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1239, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.2 1.2,1.3,1.4,1.5,1.6 1.7,1.8,1.8,1.8), mean=1.39, stddev=0.158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.3,1.3,1.4,1.5,1.5 1.6,1.6,1.6,1.8), mean=1.4, stddev=0.106], bias-{mean,stddev}=-0.1803,0.1132, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.69e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.5,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.88, stddev=0.281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.36,0.39 0.40,0.45,0.53,0.58,0.60 0.60,0.61,0.61,0.62), mean=0.519, stddev=0.0686], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.004,0.005,0.006,0.007), mean=0.00173, stddev=0.000927], oderiv-count=1.163e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.4 1.5,1.6,1.9,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.88, stddev=0.291], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.9,2.0,2.2 2.2,2.5,2.9,3.4,3.8 3.9,4.1,4.2,4.4), mean=2.97, stddev=0.551]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.447619, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1102, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.76, stddev=0.00254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.67,0.70,0.74 0.76,0.79,0.87,0.96,1.0 1.0,1.1,1.2,1.2), mean=0.876, stddev=0.0967], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.84,0.88,1.0 1.1,1.1,1.2,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.24, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.2,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.24, stddev=0.0973], bias-{mean,stddev}=-0.1765,0.09472, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.12e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.4,1.6 1.7,1.8,2.0,2.2,2.4 2.4,2.5,2.5,2.6), mean=2.03, stddev=0.266], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.42 0.45,0.48,0.52,0.56,0.58 0.58,0.59,0.59,0.60), mean=0.513, stddev=0.05], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.001,0.001,0.002 0.003,0.004,0.005,0.005), mean=0.0012, stddev=0.00077], oderiv-count=1.11116e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.4,1.4,1.5 1.7,1.8,2.1,2.3,2.4 2.5,2.5,2.6,2.7), mean=2.05, stddev=0.28], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.7,2.1,2.4 2.6,2.8,3.2,3.7,4.0 4.3,4.6,4.6,4.7), mean=3.27, stddev=0.568]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.447619, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1072, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00608], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.70,0.71,0.72 0.75,0.78,0.85,0.91,0.95 1.0,1.0,1.1,1.1), mean=0.853, stddev=0.0827], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1087, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.73,0.78,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.22, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.99,1.0,1.0 1.1,1.1,1.2,1.3,1.4 1.5,1.5,1.6,1.9), mean=1.22, stddev=0.148], bias-{mean,stddev}=-0.1779,0.1061, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.49e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.97,1.1,1.8 1.9,2.1,2.3,2.6,2.7 2.9,3.0,3.0,3.2), mean=2.3, stddev=0.366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.41,0.42 0.43,0.46,0.50,0.55,0.57 0.57,0.58,0.60,0.60), mean=0.504, stddev=0.0476], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.0006,0.0006,0.0007,0.0008,0.001 0.002,0.002,0.003,0.005), mean=0.000874, stddev=0.000662], oderiv-count=9.7152e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,1.1,1.2,1.8 1.9,2.0,2.3,2.7,2.8 2.9,3.2,3.2,3.3), mean=2.32, stddev=0.405], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.5,1.7,2.8 3.0,3.2,3.7,4.3,4.7 5.1,5.5,5.6,5.9), mean=3.75, stddev=0.779]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.447619, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09914, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.59, stddev=0.00437], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.59,0.63,0.66 0.69,0.73,0.79,0.86,0.90 0.93,0.96,0.97,1.0), mean=0.789, stddev=0.0806], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09997, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.59,0.68,0.94 0.99,1.0,1.1,1.2,1.3 1.3,1.3,1.4,1.5), mean=1.12, stddev=0.131], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.90,0.91,0.96 0.98,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.13, stddev=0.112], bias-{mean,stddev}=-0.1491,0.07581, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.92,0.98,1.8 1.9,2.0,2.2,2.4,2.6 2.7,2.8,2.8,3.1), mean=2.2, stddev=0.337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.45,0.48,0.51,0.55,0.56 0.57,0.58,0.58,0.59), mean=0.511, stddev=0.0423], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0006 0.0006,0.0007,0.0007,0.0009,0.001 0.001,0.002,0.003,0.004), mean=0.000838, stddev=0.000468], oderiv-count=8.82086e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.98,1.1,1.8 1.9,2.0,2.2,2.5,2.6 2.7,2.8,2.9,3.1), mean=2.22, stddev=0.34], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.5,1.8,2.7 2.9,3.1,3.4,3.8,4.2 4.4,4.5,4.6,5.7), mean=3.47, stddev=0.577]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.447619, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0932, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.49, stddev=0.00561], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,0.58,0.63 0.65,0.68,0.74,0.81,0.85 0.87,0.89,0.89,0.98), mean=0.742, stddev=0.0779], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08931, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.70,0.71,0.84 0.89,0.93,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1, stddev=0.112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.81,0.84,0.86 0.87,0.91,0.99,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.01, stddev=0.104], bias-{mean,stddev}=-0.1441,0.06241, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.2,1.2,1.4 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.89, stddev=0.269], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.40,0.43 0.45,0.47,0.50,0.52,0.54 0.56,0.57,0.57,0.61), mean=0.496, stddev=0.0397], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.000936, stddev=0.000231], oderiv-count=7.9751e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.3,1.4 1.6,1.7,1.9,2.1,2.2 2.3,2.3,2.4,2.4), mean=1.89, stddev=0.266], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.0,2.2,2.3 2.5,2.6,2.8,3.3,3.4 3.6,3.8,3.8,4.2), mean=2.92, stddev=0.395]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.447619, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09415, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.51, stddev=0.00146], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.58,0.61,0.63 0.65,0.67,0.75,0.82,0.85 0.87,0.91,0.92,0.95), mean=0.749, stddev=0.078], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08951, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.66,0.81 0.87,0.92,1.0,1.1,1.1 1.2,1.2,1.2,1.4), mean=1.01, stddev=0.118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.82,0.83,0.87 0.89,0.92,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.01, stddev=0.0997], bias-{mean,stddev}=-0.1312,0.06589, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.78e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,1.2,1.4 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.5,2.5), mean=1.87, stddev=0.271], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.41 0.43,0.46,0.48,0.51,0.52 0.54,0.56,0.56,0.57), mean=0.48, stddev=0.0409], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.000955, stddev=0.000191], oderiv-count=6.94323e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.95,1.1,1.4 1.6,1.7,1.8,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.86, stddev=0.277], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.0,2.2,2.4 2.5,2.7,2.9,3.2,3.5 3.6,3.9,3.9,4.2), mean=2.97, stddev=0.395]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.447619, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09757, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.56, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.61,0.63 0.66,0.70,0.78,0.85,0.88 0.92,0.95,0.95,1.0), mean=0.776, stddev=0.0844], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09067, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.57,0.63,0.75 0.85,0.92,1.0,1.1,1.2 1.2,1.2,1.3,1.3), mean=1.02, stddev=0.145], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.82,0.86 0.87,0.93,1.0,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.02, stddev=0.111], bias-{mean,stddev}=-0.1006,0.08101, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.87e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.99,0.99,1.3 1.6,1.7,1.9,2.1,2.3 2.6,2.7,2.7,2.7), mean=1.91, stddev=0.337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.40 0.42,0.44,0.46,0.49,0.51 0.51,0.52,0.53,0.64), mean=0.462, stddev=0.0446], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0008,0.0009,0.0009,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.000983, stddev=0.000176], oderiv-count=5.86278e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.92,0.98,1.3 1.5,1.7,1.9,2.1,2.3 2.6,2.7,2.7,2.8), mean=1.9, stddev=0.348], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.3,2.3,2.6 2.6,2.8,3.1,3.4,3.7 4.0,4.4,4.4,4.5), mean=3.16, stddev=0.452]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.447619, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1012, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00328], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.61,0.62,0.64 0.68,0.72,0.79,0.89,0.93 0.96,1.0,1.0,1.1), mean=0.803, stddev=0.0975], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09286, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.64,0.73 0.82,0.92,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.04, stddev=0.159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.78,0.80,0.83 0.89,0.95,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.04, stddev=0.118], bias-{mean,stddev}=-0.08448,0.06387, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.37e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.0,1.0,1.4 1.5,1.7,1.9,2.2,2.3 2.4,2.5,2.5,2.7), mean=1.91, stddev=0.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.30,0.38 0.41,0.43,0.45,0.48,0.49 0.49,0.50,0.51,0.51), mean=0.448, stddev=0.041], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00111, stddev=0.000152], oderiv-count=4.80384e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.4 1.5,1.6,1.9,2.1,2.3 2.4,2.6,2.6,2.7), mean=1.92, stddev=0.329], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.3,2.5,2.7 2.9,3.0,3.3,3.6,3.9 4.1,4.8,4.8,5.3), mean=3.37, stddev=0.48]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.447619, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1031, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.65, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.61,0.62,0.65 0.68,0.73,0.81,0.90,0.97 1.0,1.1,1.1,1.1), mean=0.818, stddev=0.107], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09354, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.71,0.74 0.88,0.93,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.05, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.75,0.84,0.88 0.92,0.96,1.1,1.1,1.2 1.3,1.3,1.3,1.4), mean=1.05, stddev=0.117], bias-{mean,stddev}=-0.0784,0.053, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.66e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.96,1.2,1.4 1.5,1.6,1.8,2.0,2.1 2.2,2.2,2.2,2.5), mean=1.8, stddev=0.242], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.33,0.34 0.38,0.40,0.44,0.46,0.48 0.49,0.49,0.49,0.52), mean=0.431, stddev=0.0445], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00135, stddev=0.00017], oderiv-count=3.86227e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.96,1.2,1.4 1.5,1.7,1.8,2.0,2.1 2.2,2.3,2.3,2.6), mean=1.82, stddev=0.254], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.6,2.7,2.8 2.9,3.1,3.4,4.0,4.3 4.6,4.8,5.2,5.6), mean=3.56, stddev=0.573]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.447619, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1008, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.61, stddev=0.00388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.60,0.61,0.65 0.66,0.69,0.79,0.89,0.96 1.0,1.0,1.0,1.1), mean=0.798, stddev=0.112], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09216, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.49,0.60,0.72 0.76,0.86,1.0,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.02, stddev=0.194], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.82,0.83,0.86 0.91,0.94,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.103], bias-{mean,stddev}=-0.08878,0.06072, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.76e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.98,1.1,1.2 1.3,1.4,1.6,1.7,1.8 1.9,2.0,2.0,2.2), mean=1.58, stddev=0.215], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.31 0.33,0.37,0.40,0.45,0.46 0.48,0.48,0.49,0.50), mean=0.404, stddev=0.0513], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00184, stddev=0.000203], oderiv-count=2.79091e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.1,1.2 1.3,1.4,1.6,1.7,1.8 2.0,2.0,2.0,2.1), mean=1.58, stddev=0.209], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.6,2.8 2.9,3.2,3.6,4.4,4.7 5.0,5.2,5.4,6.3), mean=3.77, stddev=0.715]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.447619, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.58,0.61,0.63 0.65,0.70,0.78,0.89,0.94 0.99,1.0,1.1,1.1), mean=0.794, stddev=0.11], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09282, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.61,0.71 0.74,0.83,1.0,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.03, stddev=0.215], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.84,0.87 0.89,0.95,1.0,1.1,1.2 1.2,1.3,1.4,1.6), mean=1.04, stddev=0.124], bias-{mean,stddev}=-0.09874,0.0773, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.18e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.91,0.92,1.0 1.1,1.2,1.4,1.6,1.7 1.8,1.9,2.1,2.7), mean=1.41, stddev=0.261], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.22 0.27,0.30,0.38,0.44,0.47 0.49,0.51,0.54,0.61), mean=0.37, stddev=0.0834], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.004,0.004,0.004), mean=0.0027, stddev=0.000349], oderiv-count=1.90944e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.87,0.92,1.0 1.1,1.2,1.4,1.6,1.7 1.8,2.0,2.0,2.6), mean=1.43, stddev=0.258], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.7,2.8,2.9 3.0,3.3,4.2,4.9,5.3 5.6,6.0,6.0,6.5), mean=4.14, stddev=0.886]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.447619, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1056, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.00328], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.62,0.65,0.66 0.69,0.74,0.83,0.95,0.98 1.0,1.0,1.1,1.1), mean=0.837, stddev=0.11], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09694, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.59,0.71 0.78,0.89,1.1,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.08, stddev=0.215], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.93,0.93,0.95 0.96,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.09, stddev=0.0969], bias-{mean,stddev}=-0.1021,0.1019, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.83,0.84,0.89 1.1,1.3,1.4,1.6,1.7 1.7,1.8,1.9,2.1), mean=1.39, stddev=0.224], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.18 0.23,0.29,0.37,0.44,0.46 0.48,0.50,0.50,0.53), mean=0.358, stddev=0.0894], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.005,0.006,0.006 0.006,0.008,0.008,0.008), mean=0.00534, stddev=0.00071], oderiv-count=603840
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.90,0.92,0.98 1.1,1.3,1.4,1.6,1.7 1.8,1.9,2.0,2.1), mean=1.43, stddev=0.233], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.0,3.4,3.6 3.8,4.1,4.8,5.7,6.1 6.5,6.9,6.9,7.2), mean=4.89, stddev=0.9]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.447619, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.005, max-change=0.75, params-rms=0.135, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.53, stddev=0.00207], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.83,0.84,0.88 0.94,0.99,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.07, stddev=0.108], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2045, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.4 1.4,1.5,1.6,1.8,1.8 1.9,1.9,1.9,2.0), mean=1.63, stddev=0.153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.1,2.1 2.1,2.2,2.3,2.4,2.5 2.6,2.6,2.6,2.7), mean=2.31, stddev=0.141], bias-{mean,stddev}=-0.07021,0.1201, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.98e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.0,2.1 2.2,2.2,2.5,2.8,3.0 3.1,3.2,3.2,3.5), mean=2.52, stddev=0.329], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.34,0.34 0.36,0.37,0.39,0.42,0.43 0.44,0.45,0.46,0.47), mean=0.394, stddev=0.0301], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00939, stddev=0.00121], oderiv-count=612544
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,2.0,2.0,2.1 2.2,2.3,2.5,2.8,3.0 3.1,3.2,3.4,3.6), mean=2.56, stddev=0.326], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.9,5.8,6.0,6.2 6.5,6.9,7.9,8.9,9.3 9.7,10,11,14), mean=7.95, stddev=1.27]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, params-rms=0.305, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,3.4,3.5,3.5 3.5,3.5,3.5,3.5,3.5 3.5,3.5,3.5,3.5), mean=3.45, stddev=-nan], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.8,2.0 2.1,2.2,2.4,2.6,2.8 2.9,2.9,3.0,3.0), mean=2.42, stddev=0.281], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-4e-08 -3e-08,-2e-08,-2e-09,2e-08,3e-08 3e-08,4e-08,5e-08,6e-08), mean=-8.61e-10, stddev=2.18e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.7,3.7,3.7,3.8 3.9,3.9,4.1,4.5,4.6 4.7,4.7,4.9,5.3), mean=4.21, stddev=0.309]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00420446, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2363, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.15,0.25,0.55 0.88,1.3,1.9,2.3,2.4 2.5,2.7,2.9,3.7), mean=1.79, stddev=0.605], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(13,13,13,14 14,14,15,16,16 17,17,18,18), mean=15, stddev=1.07], bias-{mean,stddev}=0.001336,0.3445, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.151, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.72,0.73,1.0 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.4,1.6), mean=1.2, stddev=0.115], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.6,1.6,1.7,1.8,1.9 1.9,2.0,2.0,2.0), mean=1.7, stddev=0.128], bias-{mean,stddev}=-0.1067,0.1898, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.92,0.97 1.0,1.1,1.3,1.5,1.7 1.9,1.9,1.9,2.1), mean=1.32, stddev=0.256], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.37,0.40 0.43,0.45,0.48,0.53,0.57 0.60,0.64,0.64,0.69), mean=0.488, stddev=0.0597], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.004,0.005,0.005,0.005 0.005,0.006,0.007,0.009), mean=0.00465, stddev=0.000633], oderiv-count=609280
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.94 0.97,1.1,1.3,1.5,1.6 1.9,1.9,2.0,2.0), mean=1.31, stddev=0.259], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.7,2.0,2.1,2.3 2.4,2.5,2.6,4.5), mean=1.98, stddev=0.336]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00420446, l2-regularize=0.0005, max-change=0.75, params-rms=0.151, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00176], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.83,0.94,0.98 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.2, stddev=0.131], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-3e-08,-3e-08 -3e-08,-1e-08,5e-09,2e-08,3e-08 3e-08,3e-08,4e-08,7e-08), mean=4.33e-09, stddev=2.11e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.7,1.8,1.9,2.0 2.0,2.0,2.0,2.1), mean=1.79, stddev=0.128]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0210223, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1822, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.08,0.24 0.61,0.90,1.4,1.8,2.0 2.2,2.3,2.4,3.2), mean=1.35, stddev=0.547], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,11,12,12,12 12,12,12,12), mean=11.6, stddev=0.238], bias-{mean,stddev}=5.252e-09,0.2636, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000771, stddev=0.0012], oderiv-count=612544
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/174.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/175.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.82801 tdnnf2.linear:5.0176 tdnnf2.affine:5.62847 tdnnf3.linear:4.31973 tdnnf3.affine:4.98606 tdnnf4.linear:4.1865 tdnnf4.affine:4.83398 tdnnf5.linear:3.95677 tdnnf5.affine:4.47849 tdnnf6.linear:3.50242 tdnnf6.affine:3.9074 tdnnf7.linear:3.39919 tdnnf7.affine:3.75029 tdnnf8.linear:3.23526 tdnnf8.affine:3.69727 tdnnf9.linear:3.36838 tdnnf9.affine:3.81625 tdnnf10.linear:3.35347 tdnnf10.affine:3.97277 tdnnf11.linear:3.46858 tdnnf11.affine:4.1532 tdnnf12.linear:3.69949 tdnnf12.affine:4.37217 tdnnf13.linear:4.04697 tdnnf13.affine:4.96908 prefinal-l:4.18275 prefinal-chain.affine:5.11805 prefinal-chain.linear:5.64103 output.affine:15.5865 prefinal-xent.affine:2.81328 prefinal-xent.linear:1.87104 output-xent.affine:13.0059 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.2108 tdnnf2.linear:16.319 tdnnf2.affine:16.0454 tdnnf3.linear:14.1086 tdnnf3.affine:14.3046 tdnnf4.linear:13.7191 tdnnf4.affine:14.1124 tdnnf5.linear:12.6898 tdnnf5.affine:12.9359 tdnnf6.linear:11.9295 tdnnf6.affine:11.5693 tdnnf7.linear:12.0509 tdnnf7.affine:11.5773 tdnnf8.linear:12.4887 tdnnf8.affine:11.6971 tdnnf9.linear:12.9481 tdnnf9.affine:11.9469 tdnnf10.linear:13.1976 tdnnf10.affine:12.0214 tdnnf11.linear:12.897 tdnnf11.affine:11.8597 tdnnf12.linear:12.8311 tdnnf12.affine:11.9653 tdnnf13.linear:13.5149 tdnnf13.affine:12.5149 prefinal-l:12.2224 prefinal-chain.affine:18.5749 prefinal-chain.linear:27.6055 output.affine:122.152 prefinal-xent.affine:13.8899 prefinal-xent.linear:13.6645 output-xent.affine:94.1264 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.37586 tdnnf2.linear:0.307396 tdnnf2.affine:0.349282 tdnnf3.linear:0.306138 tdnnf3.affine:0.348486 tdnnf4.linear:0.305638 tdnnf4.affine:0.343127 tdnnf5.linear:0.311657 tdnnf5.affine:0.347331 tdnnf6.linear:0.292534 tdnnf6.affine:0.336485 tdnnf7.linear:0.28294 tdnnf7.affine:0.324564 tdnnf8.linear:0.259427 tdnnf8.affine:0.316192 tdnnf9.linear:0.260454 tdnnf9.affine:0.319451 tdnnf10.linear:0.253921 tdnnf10.affine:0.330435 tdnnf11.linear:0.268406 tdnnf11.affine:0.34925 tdnnf12.linear:0.287965 tdnnf12.affine:0.364936 tdnnf13.linear:0.29909 tdnnf13.affine:0.396015 prefinal-l:0.344729 prefinal-chain.affine:0.275977 prefinal-chain.linear:0.205382 output.affine:0.127709 prefinal-xent.affine:0.202214 prefinal-xent.linear:0.13688 output-xent.affine:0.138191 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 10:24:41 CST 2020, elapsed time 3 seconds
