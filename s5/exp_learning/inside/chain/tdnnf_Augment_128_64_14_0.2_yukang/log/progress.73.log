# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/73.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/72.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/73.mdl 
# Started at Mon Feb 24 07:51:12 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/73.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1375, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.97,1.1,1.3 1.4,1.6,1.9,2.3,2.5 2.9,3.2,3.2,3.3), mean=1.98, stddev=0.481], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.54,0.60 0.70,0.84,1.4,1.9,2.3 2.5,2.7,2.7,3.4), mean=1.44, stddev=0.585], bias-{mean,stddev}=-0.1192,0.2045, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.8e+06, self-repaired-proportion=0.0815326, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.002,0.002,0.005 0.008,0.03,0.12,0.20,0.24 0.30,0.33,0.36,0.43), mean=0.126, stddev=0.0945], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.05 0.06,0.11,0.33,0.54,0.66 0.72,0.80,0.82,0.85), mean=0.348, stddev=0.218], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.06,0.09 0.10,0.12,0.14,0.17), mean=0.0472, stddev=0.0275], oderiv-count=1.3418e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0007,0.002,0.003 0.007,0.03,0.13,0.20,0.23 0.28,0.34,0.35,0.41), mean=0.126, stddev=0.0932], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.03 0.04,0.10,0.21,0.28,0.31 0.33,0.34,0.34,0.36), mean=0.2, stddev=0.0951]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.047619, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1424, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3), mean=2.28, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.49,0.59,0.68 0.82,1.0,1.1,1.3,1.3 1.4,1.4,1.5,1.7), mean=1.12, stddev=0.202], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1364, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.4,1.5,1.6,1.8 1.8,1.9,2.1,2.2), mean=1.53, stddev=0.184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.4,1.5,1.6,1.7 1.7,1.7,1.8,1.8), mean=1.54, stddev=0.109], bias-{mean,stddev}=-0.1337,0.08211, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.48e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.5,1.6,1.8,2.0,2.2 2.2,2.3,2.3,2.6), mean=1.81, stddev=0.257], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.36,0.37 0.41,0.45,0.51,0.56,0.57 0.59,0.60,0.60,0.61), mean=0.502, stddev=0.0638], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.004,0.004,0.006), mean=0.00162, stddev=0.000706], oderiv-count=1.20325e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.2,1.4 1.4,1.6,1.8,2.0,2.1 2.2,2.3,2.3,2.7), mean=1.8, stddev=0.261], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.6,2.0,2.2 2.3,2.5,2.9,3.3,3.5 3.7,3.8,3.9,4.2), mean=2.94, stddev=0.482]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.047619, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1234, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.97, stddev=0.00939], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.73,0.77,0.82 0.84,0.89,0.97,1.1,1.1 1.2,1.2,1.3,1.4), mean=0.981, stddev=0.11], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,1.0,1.0,1.1 1.1,1.2,1.3,1.4,1.5 1.7,1.7,1.8,1.9), mean=1.34, stddev=0.168], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.3,1.4,1.5 1.5,1.5,1.5,1.6), mean=1.35, stddev=0.105], bias-{mean,stddev}=-0.1134,0.05589, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.08e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.8,2.0,2.2,2.3 2.4,2.5,2.5,2.7), mean=1.99, stddev=0.223], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.40,0.41 0.44,0.47,0.52,0.55,0.56 0.57,0.58,0.59,0.60), mean=0.511, stddev=0.0487], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.002,0.003,0.004,0.004), mean=0.00111, stddev=0.000485], oderiv-count=1.11504e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.7,1.8,2.0,2.1,2.3 2.4,2.5,2.5,2.6), mean=1.98, stddev=0.224], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.0,2.3,2.5 2.6,2.8,3.2,3.5,3.8 3.9,4.1,4.2,4.9), mean=3.19, stddev=0.464]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.047619, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0.00213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.69,0.71,0.74 0.77,0.81,0.88,0.95,0.97 1.0,1.0,1.1,1.3), mean=0.879, stddev=0.0851], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1097, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.81,0.88,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.23, stddev=0.142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.24, stddev=0.0923], bias-{mean,stddev}=-0.1264,0.06479, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.88e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.5,1.6 1.7,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.92, stddev=0.247], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.39,0.41 0.43,0.46,0.51,0.55,0.56 0.57,0.57,0.58,0.60), mean=0.503, stddev=0.0483], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0007,0.0007 0.0007,0.0008,0.0009,0.001,0.001 0.001,0.003,0.003,0.004), mean=0.00101, stddev=0.000478], oderiv-count=1.00672e+07
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.99,1.5,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.3,2.4,2.6), mean=1.89, stddev=0.25], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.5,2.2,2.5 2.6,2.7,3.0,3.4,3.6 3.8,4.3,4.3,4.5), mean=3.08, stddev=0.489]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.047619, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1036, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0.00352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.64,0.68,0.70 0.73,0.77,0.82,0.89,0.93 0.95,0.96,0.97,1.0), mean=0.825, stddev=0.0754], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1049, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.76,0.96 1.0,1.1,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.18, stddev=0.141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.98,0.99,1.0 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.4,1.5), mean=1.18, stddev=0.105], bias-{mean,stddev}=-0.1283,0.06493, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.13e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.86,1.3,1.6 1.7,1.7,2.0,2.2,2.3 2.4,2.4,2.5,2.5), mean=1.96, stddev=0.272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.40,0.42 0.43,0.45,0.49,0.53,0.55 0.56,0.57,0.57,0.60), mean=0.493, stddev=0.0432], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0007,0.0007,0.0008,0.001,0.001 0.001,0.002,0.002,0.004), mean=0.000932, stddev=0.000419], oderiv-count=9.26349e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.80,1.2,1.6 1.7,1.8,2.0,2.2,2.3 2.3,2.4,2.5,2.7), mean=1.96, stddev=0.282], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.8,2.6 2.7,2.9,3.2,3.6,3.8 4.3,4.6,4.7,4.9), mean=3.23, stddev=0.567]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.047619, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1008, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.61, stddev=0.00642], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.65,0.67,0.68 0.71,0.74,0.81,0.86,0.90 0.92,0.95,0.97,1.0), mean=0.803, stddev=0.0729], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09702, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.80,0.89,0.91 0.95,0.99,1.1,1.2,1.2 1.3,1.4,1.4,1.5), mean=1.09, stddev=0.126], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.87,0.91,0.94 0.97,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.09, stddev=0.0982], bias-{mean,stddev}=-0.1141,0.05408, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.16e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,1.2,1.2,1.5 1.6,1.6,1.8,2.0,2.1 2.2,2.3,2.4,2.4), mean=1.81, stddev=0.246], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.41,0.42 0.44,0.45,0.49,0.53,0.54 0.55,0.56,0.57,0.57), mean=0.489, stddev=0.042], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0008,0.0009,0.0009,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.00101, stddev=0.000215], oderiv-count=8.00314e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,1.2,1.2,1.4 1.5,1.6,1.8,2.0,2.0 2.2,2.3,2.3,2.4), mean=1.8, stddev=0.244], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,2.0,2.2,2.3 2.4,2.6,2.8,3.4,3.5 3.6,3.9,4.0,4.5), mean=2.93, stddev=0.462]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.047619, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1021, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.00207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.66,0.66,0.68 0.71,0.74,0.81,0.89,0.93 0.94,0.96,1.0,1.1), mean=0.812, stddev=0.0817], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09619, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.70,0.70,0.84 0.91,0.96,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.08, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.89,0.91,0.93 0.95,0.99,1.1,1.2,1.2 1.3,1.3,1.4,1.4), mean=1.08, stddev=0.105], bias-{mean,stddev}=-0.1082,0.04704, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.82e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,1.1,1.2,1.4 1.5,1.6,1.8,2.0,2.1 2.2,2.3,2.4,2.5), mean=1.8, stddev=0.258], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.42 0.43,0.44,0.47,0.51,0.52 0.53,0.55,0.56,0.58), mean=0.475, stddev=0.0383], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00102, stddev=0.000168], oderiv-count=6.86989e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,1.1,1.2,1.4 1.5,1.6,1.8,2.0,2.1 2.3,2.4,2.4,2.6), mean=1.81, stddev=0.268], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.9,2.1,2.4 2.4,2.6,2.9,3.3,3.5 3.8,4.3,4.3,4.7), mean=2.97, stddev=0.49]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.047619, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1068, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00478], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.66,0.68,0.70 0.74,0.78,0.85,0.93,0.95 0.99,1.0,1.1,1.1), mean=0.85, stddev=0.0887], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09772, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.76,0.77,0.81 0.90,0.97,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.1, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.85,0.85,0.92 0.95,0.99,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.1, stddev=0.124], bias-{mean,stddev}=-0.09033,0.04215, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.94e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.4 1.5,1.6,1.8,2.0,2.2 2.4,2.6,2.7,2.7), mean=1.86, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.40 0.41,0.43,0.46,0.49,0.50 0.51,0.52,0.54,0.54), mean=0.458, stddev=0.0372], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.001), mean=0.000996, stddev=0.000124], oderiv-count=6.01926e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.4 1.4,1.6,1.8,2.0,2.2 2.4,2.6,2.6,2.8), mean=1.85, stddev=0.297], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.4,2.4,2.5 2.6,2.8,3.1,3.5,3.9 4.3,4.8,4.9,5.4), mean=3.21, stddev=0.59]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.047619, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1066, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.63,0.65,0.69 0.71,0.76,0.84,0.94,0.98 1.0,1.1,1.1,1.1), mean=0.847, stddev=0.102], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09911, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.62,0.77 0.84,0.92,1.1,1.2,1.3 1.4,1.5,1.5,1.6), mean=1.1, stddev=0.201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.85,0.87,0.92 0.96,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.11, stddev=0.126], bias-{mean,stddev}=-0.07778,0.04129, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.29e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,1.0,1.1,1.3 1.5,1.7,1.9,2.1,2.3 2.5,2.5,2.6,2.7), mean=1.9, stddev=0.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.33,0.37 0.39,0.42,0.45,0.47,0.50 0.50,0.52,0.53,0.57), mean=0.445, stddev=0.0432], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00112, stddev=0.000161], oderiv-count=4.93344e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.93,1.1,1.3 1.5,1.7,1.9,2.2,2.4 2.5,2.6,2.6,2.7), mean=1.9, stddev=0.343], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.4,2.5 2.7,2.8,3.3,3.7,4.0 4.2,4.4,4.5,5.3), mean=3.3, stddev=0.545]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.047619, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.64,0.68 0.71,0.76,0.86,0.98,1.0 1.1,1.2,1.2,1.3), mean=0.874, stddev=0.134], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.102, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.62,0.70 0.76,0.94,1.2,1.4,1.4 1.4,1.5,1.5,1.5), mean=1.13, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.87,0.88,0.91 0.98,1.0,1.1,1.2,1.3 1.4,1.5,1.5,1.5), mean=1.14, stddev=0.142], bias-{mean,stddev}=-0.05853,0.04342, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.5e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.3,1.5 1.5,1.7,2.0,2.3,2.5 2.7,2.9,2.9,2.9), mean=2.04, stddev=0.371], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.30,0.33 0.37,0.40,0.44,0.46,0.47 0.48,0.49,0.49,0.50), mean=0.432, stddev=0.0438], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00126, stddev=0.000191], oderiv-count=3.83488e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.3,1.4 1.6,1.7,2.0,2.4,2.5 2.8,2.8,2.9,3.0), mean=2.03, stddev=0.379], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.7,2.9,2.9 3.0,3.2,3.5,4.1,4.3 4.7,5.0,5.0,5.9), mean=3.67, stddev=0.557]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.047619, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1097, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.75, stddev=0.00224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.63,0.64,0.66 0.69,0.74,0.84,0.98,1.1 1.1,1.3,1.3,1.3), mean=0.865, stddev=0.148], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1014, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.55,0.72 0.77,0.85,1.1,1.4,1.5 1.6,1.6,1.6,1.7), mean=1.11, stddev=0.279], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.93,0.93,0.97 1.0,1.1,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.14, stddev=0.11], bias-{mean,stddev}=-0.06864,0.04447, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.88e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.4 1.4,1.6,1.9,2.1,2.3 2.4,2.5,2.6,2.7), mean=1.85, stddev=0.326], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.30 0.32,0.36,0.40,0.44,0.45 0.46,0.47,0.47,0.48), mean=0.397, stddev=0.0487], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00172, stddev=0.00026], oderiv-count=2.8263e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.4 1.4,1.6,1.8,2.1,2.3 2.3,2.6,2.6,2.8), mean=1.84, stddev=0.318], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.8,2.8,2.9 3.1,3.3,3.7,4.2,4.6 4.8,5.1,5.1,5.8), mean=3.79, stddev=0.597]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.047619, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.72, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.61,0.63,0.66 0.68,0.72,0.81,0.98,1.1 1.2,1.2,1.3,1.3), mean=0.845, stddev=0.153], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1001, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.60,0.64 0.73,0.80,1.0,1.4,1.6 1.6,1.7,1.7,1.7), mean=1.09, stddev=0.317], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.90,0.93,0.96 0.98,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.13, stddev=0.121], bias-{mean,stddev}=-0.06179,0.05044, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.17e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.91,0.97,1.1 1.2,1.4,1.6,1.9,2.1 2.3,2.4,2.4,2.8), mean=1.64, stddev=0.338], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.22 0.27,0.30,0.36,0.42,0.45 0.46,0.49,0.49,0.58), mean=0.358, stddev=0.0713], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.004,0.004,0.005), mean=0.00259, stddev=0.00048], oderiv-count=1.80826e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.91,1.0,1.1 1.2,1.4,1.6,1.8,2.2 2.3,2.4,2.5,2.8), mean=1.64, stddev=0.349], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.6,2.8 3.0,3.3,3.9,4.4,4.8 5.2,5.4,5.5,5.7), mean=3.92, stddev=0.69]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.047619, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0994, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.59, stddev=0.0032], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.59,0.62 0.64,0.67,0.75,0.89,0.99 1.1,1.1,1.2,1.2), mean=0.783, stddev=0.138], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09304, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.57,0.62 0.64,0.68,0.96,1.3,1.5 1.5,1.6,1.6,1.7), mean=1.01, stddev=0.307], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.83,0.84,0.88 0.90,0.96,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.05, stddev=0.105], bias-{mean,stddev}=-0.08525,0.07621, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.1e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.80,0.81,0.86 0.93,1.1,1.3,1.6,1.8 1.8,1.9,2.0,2.1), mean=1.32, stddev=0.308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.17,0.19,0.28,0.38,0.43 0.45,0.47,0.49,0.51), mean=0.293, stddev=0.1], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.006,0.007,0.008 0.008,0.009,0.009,0.01), mean=0.00608, stddev=0.00133], oderiv-count=617984
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.75,0.78,0.87 0.92,1.0,1.3,1.6,1.7 1.8,1.9,2.0,2.1), mean=1.32, stddev=0.308], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.8,2.9,3.1 3.2,3.5,3.9,4.5,4.7 4.8,5.1,5.1,5.7), mean=3.99, stddev=0.557]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.047619, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.005, max-change=0.75, params-rms=0.1218, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.38, stddev=0.0129], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.67,0.70,0.77 0.81,0.86,0.98,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.968, stddev=0.118], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2122, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.6,1.7,1.8,1.9 1.9,1.9,1.9,2.0), mean=1.69, stddev=0.124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.2 2.2,2.3,2.4,2.5,2.6 2.6,2.8,2.8,2.8), mean=2.4, stddev=0.159], bias-{mean,stddev}=-0.003752,0.1265, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.6,1.7 1.7,1.9,2.1,2.3,2.4 2.5,2.6,2.6,2.9), mean=2.1, stddev=0.263], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.34,0.35 0.35,0.37,0.39,0.42,0.43 0.44,0.45,0.45,0.47), mean=0.391, stddev=0.0295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.009,0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.0106, stddev=0.00131], oderiv-count=603840
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.9,2.1,2.3,2.4 2.6,2.6,2.7,3.0), mean=2.1, stddev=0.276], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.6,4.0,4.1,4.4 4.6,4.8,5.2,5.9,6.5 6.8,7.2,7.2,8.3), mean=5.38, stddev=0.792]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, params-rms=0.2638, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.0,3.0,3.0 3.0,3.0,3.0,3.0,3.0 3.0,3.0,3.0,3.0), mean=2.98, stddev=0.0084], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.8 1.9,2.0,2.1,2.2,2.3 2.4,2.5,2.5,2.6), mean=2.1, stddev=0.191], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-4e-08 -3e-08,-2e-08,-7e-09,1e-08,3e-08 3e-08,3e-08,6e-08,6e-08), mean=-4.69e-09, stddev=2.28e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.3,3.4 3.5,3.5,3.6,3.8,4.0 4.0,4.1,4.4,4.5), mean=3.69, stddev=0.225]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00886176, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2018, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.13,0.21,0.43 0.66,0.98,1.6,2.0,2.2 2.3,2.4,2.5,3.1), mean=1.51, stddev=0.571], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,12 12,12,13,13,14 14,15,15,15), mean=12.8, stddev=0.886], bias-{mean,stddev}=0.0007899,0.2769, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1654, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.81,1.1,1.2 1.2,1.3,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.32, stddev=0.115], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.7,1.8,1.9,2.0,2.0 2.0,2.0,2.1,2.1), mean=1.87, stddev=0.112], bias-{mean,stddev}=-0.02513,0.2051, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.71,0.74,0.75 0.80,0.90,1.1,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.1, stddev=0.227], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.38,0.39 0.40,0.42,0.46,0.51,0.53 0.55,0.57,0.57,0.61), mean=0.467, stddev=0.0516], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.005,0.005,0.006 0.006,0.006,0.006,0.01), mean=0.00505, stddev=0.00084], oderiv-count=609280
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.69,0.69,0.75 0.82,0.87,1.1,1.3,1.4 1.5,1.7,1.7,1.8), mean=1.11, stddev=0.242], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.4,1.5,1.7,1.9,2.0 2.0,2.1,2.1,2.3), mean=1.71, stddev=0.223]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00886176, l2-regularize=0.0005, max-change=0.75, params-rms=0.1575, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.78, stddev=0.00169], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.96,1.1 1.1,1.2,1.3,1.4,1.4 1.4,1.5,1.5,1.6), mean=1.25, stddev=0.12], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-4e-08,-3e-08 -2e-08,-2e-08,9e-10,2e-08,2e-08 3e-08,3e-08,3e-08,3e-08), mean=-1.19e-09, stddev=1.86e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.9,2.0,2.1 2.1,2.1,2.1,2.2), mean=1.91, stddev=0.121]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0443088, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1901, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.24 0.68,0.99,1.5,1.9,2.1 2.3,2.4,2.5,3.7), mean=1.41, stddev=0.562], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,12,12,12 12,12,12,13), mean=12.1, stddev=0.214], bias-{mean,stddev}=3.446e-08,0.2124, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000783, stddev=0.00121], oderiv-count=589696
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/72.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/73.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.9201 tdnnf2.linear:5.0158 tdnnf2.affine:5.62907 tdnnf3.linear:4.33311 tdnnf3.affine:4.9531 tdnnf4.linear:3.91398 tdnnf4.affine:4.62145 tdnnf5.linear:3.62811 tdnnf5.affine:4.31268 tdnnf6.linear:3.44437 tdnnf6.affine:3.99032 tdnnf7.linear:3.30609 tdnnf7.affine:3.87499 tdnnf8.linear:3.17138 tdnnf8.affine:3.70976 tdnnf9.linear:3.13803 tdnnf9.affine:3.85542 tdnnf10.linear:3.20567 tdnnf10.affine:4.0094 tdnnf11.linear:3.42633 tdnnf11.affine:4.28286 tdnnf12.linear:3.63494 tdnnf12.affine:4.4949 tdnnf13.linear:3.88421 tdnnf13.affine:4.80952 prefinal-l:2.68964 prefinal-chain.affine:4.99352 prefinal-chain.linear:4.17216 output.affine:13.4619 prefinal-xent.affine:3.30522 prefinal-xent.linear:2.09028 output-xent.affine:13.5161 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.2316 tdnnf2.linear:18.2291 tdnnf2.affine:17.5467 tdnnf3.linear:15.799 tdnnf3.affine:15.3442 tdnnf4.linear:14.1263 tdnnf4.affine:14.1317 tdnnf5.linear:13.2589 tdnnf5.affine:13.5236 tdnnf6.linear:12.906 tdnnf6.affine:12.5003 tdnnf7.linear:13.0634 tdnnf7.affine:12.3839 tdnnf8.linear:13.6696 tdnnf8.affine:12.5593 tdnnf9.linear:13.6507 tdnnf9.affine:12.7251 tdnnf10.linear:14.1544 tdnnf10.affine:13.076 tdnnf11.linear:14.0358 tdnnf11.affine:13.0172 tdnnf12.linear:13.7432 tdnnf12.affine:12.8449 tdnnf13.linear:12.7226 tdnnf13.affine:11.9797 prefinal-l:11.0272 prefinal-chain.affine:19.2619 prefinal-chain.linear:23.8786 output.affine:104.117 prefinal-xent.affine:15.15 prefinal-xent.linear:14.2585 output-xent.affine:97.6168 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.297291 tdnnf2.linear:0.274107 tdnnf2.affine:0.318892 tdnnf3.linear:0.272533 tdnnf3.affine:0.320369 tdnnf4.linear:0.27624 tdnnf4.affine:0.32384 tdnnf5.linear:0.270487 tdnnf5.affine:0.314646 tdnnf6.linear:0.264898 tdnnf6.affine:0.31688 tdnnf7.linear:0.251278 tdnnf7.affine:0.311241 tdnnf8.linear:0.231666 tdnnf8.affine:0.294968 tdnnf9.linear:0.229683 tdnnf9.affine:0.303384 tdnnf10.linear:0.226124 tdnnf10.affine:0.30685 tdnnf11.linear:0.24331 tdnnf11.affine:0.328665 tdnnf12.linear:0.264681 tdnnf12.affine:0.350122 tdnnf13.linear:0.306388 tdnnf13.affine:0.401742 prefinal-l:0.246448 prefinal-chain.affine:0.259782 prefinal-chain.linear:0.175413 output.affine:0.129735 prefinal-xent.affine:0.2185 prefinal-xent.linear:0.146425 output-xent.affine:0.138529 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 07:51:15 CST 2020, elapsed time 3 seconds
