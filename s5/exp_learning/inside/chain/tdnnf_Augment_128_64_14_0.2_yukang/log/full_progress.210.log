# nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/209.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/210.mdl 
# Started at Mon Feb 24 11:18:03 CST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/209.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/210.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.05476, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.62,0.66 0.68,0.71,0.79,0.90,0.96 0.99,1.0,1.1,1.1), mean=0.805, stddev=0.105], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.27 0.29,0.33,0.56,0.82,0.90 0.94,0.97,0.99,1.1), mean=0.575, stddev=0.231], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.19 0.23,0.33,0.62,1.1,1.3 1.4,1.6,1.6,1.7), mean=0.707, stddev=0.399], bias-{mean,stddev}=-0.0003378,0.03922, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.07e+05, self-repaired-proportion=0.457031, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.83,-0.77,-0.64 -0.45,-0.26,0.08,0.42,0.71 1.2,1.7,1.7,1.7), mean=0.149, stddev=0.523], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.5,-1.5,-1.1 -0.74,-0.22,0.37,1.2,1.5 1.9,2.1,2.5,3.3), mean=0.416, stddev=0.896], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.12,0.15 0.18,0.28,0.33,0.36), mean=0.0723, stddev=0.0708], oderiv-count=298688
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.339683, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03638, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.50,0.51 0.52,0.54,0.58,0.62,0.64 0.64,0.65,0.65,0.67), mean=0.58, stddev=0.0431], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.24,0.26,0.29,0.32,0.33 0.34,0.36,0.37,0.43), mean=0.289, stddev=0.0342], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.24,0.26 0.28,0.35,0.52,0.73,0.84 0.88,0.92,0.97,0.97), mean=0.545, stddev=0.205], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.04066, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.40 0.41,0.42,0.46,0.49,0.52 0.53,0.55,0.56,0.58), mean=0.458, stddev=0.0439], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.41 0.43,0.43,0.46,0.48,0.50 0.51,0.52,0.52,0.53), mean=0.459, stddev=0.0293], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.009,0.01,0.02 0.05,0.11,0.32,0.62,0.77 0.85,0.92,0.95,1.0), mean=0.373, stddev=0.269], bias-{mean,stddev}=0.0002765,0.01647, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.005,0.006 0.009,0.02,0.02,0.03), mean=0.00276, stddev=0.0047], oderiv-count=127104
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.339683, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0314, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.42,0.44 0.46,0.47,0.50,0.52,0.55 0.56,0.57,0.58,0.61), mean=0.501, stddev=0.0396], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.25,0.27,0.29 0.30,0.31,0.32,0.34), mean=0.249, stddev=0.0306], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.20,0.22 0.25,0.28,0.44,0.65,0.72 0.76,0.80,0.82,0.86), mean=0.469, stddev=0.181], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03877, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.37,0.38 0.39,0.40,0.43,0.47,0.48 0.51,0.53,0.53,0.55), mean=0.437, stddev=0.0393], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.37,0.39 0.40,0.41,0.44,0.46,0.48 0.49,0.50,0.51,0.55), mean=0.437, stddev=0.0327], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.004,0.009,0.03 0.05,0.10,0.30,0.59,0.74 0.82,0.90,0.91,1.1), mean=0.354, stddev=0.259], bias-{mean,stddev}=0.002821,0.01174, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0005,0.001,0.002,0.003 0.005,0.007,0.009,0.02), mean=0.00182, stddev=0.00231], oderiv-count=484800
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.339683, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0287, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.37,0.39 0.40,0.42,0.45,0.49,0.50 0.53,0.55,0.57,0.60), mean=0.457, stddev=0.0456], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.19,0.20,0.23,0.25,0.26 0.27,0.28,0.29,0.30), mean=0.228, stddev=0.0267], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.18,0.19 0.21,0.26,0.40,0.58,0.67 0.72,0.74,0.77,0.78), mean=0.426, stddev=0.172], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03507, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.32,0.34 0.35,0.36,0.40,0.43,0.44 0.45,0.46,0.47,0.51), mean=0.395, stddev=0.037], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.34 0.35,0.37,0.39,0.43,0.44 0.44,0.45,0.47,0.52), mean=0.395, stddev=0.034], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.01,0.03 0.05,0.10,0.28,0.53,0.67 0.73,0.81,0.84,0.86), mean=0.323, stddev=0.231], bias-{mean,stddev}=0.001176,0.008682, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.76e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.9,-3.9,-3.3,-2.3 -1.1,0.31,2.6,5.0,6.0 6.9,8.2,8.6,10), mean=2.61, stddev=2.8], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-1.1,-0.96,-0.73 -0.36,0.02,0.49,0.91,1.1 1.3,1.7,2.1,2.3), mean=0.455, stddev=0.621]
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.339683, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02707, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.38,0.38 0.38,0.40,0.43,0.46,0.47 0.48,0.49,0.49,0.50), mean=0.432, stddev=0.032], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.18,0.19,0.21,0.24,0.25 0.25,0.26,0.27,0.28), mean=0.215, stddev=0.0255], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.19 0.20,0.24,0.38,0.56,0.61 0.66,0.72,0.73,0.74), mean=0.403, stddev=0.158], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03094, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.31 0.31,0.32,0.35,0.37,0.39 0.40,0.41,0.41,0.43), mean=0.349, stddev=0.0293], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.31 0.31,0.32,0.35,0.37,0.39 0.40,0.41,0.41,0.42), mean=0.349, stddev=0.0277], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.005,0.006,0.02 0.04,0.08,0.24,0.47,0.58 0.65,0.71,0.74,0.78), mean=0.283, stddev=0.206], bias-{mean,stddev}=-0.0009079,0.008569, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,0.33,0.47,0.61 0.85,1.3,2.0,2.7,3.1 3.1,3.5,3.7,4.6), mean=2, stddev=0.823], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,-0.06,-0.03,0.27 0.31,0.35,0.52,0.62,0.67 0.77,0.80,0.88,1.1), mean=0.503, stddev=0.174]
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.339683, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02406, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.34 0.35,0.36,0.38,0.41,0.42 0.42,0.43,0.44,0.45), mean=0.384, stddev=0.0263], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.16 0.16,0.17,0.19,0.21,0.22 0.23,0.24,0.24,0.25), mean=0.191, stddev=0.0212], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.17 0.19,0.23,0.34,0.49,0.56 0.60,0.61,0.64,0.67), mean=0.359, stddev=0.138], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0272, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.25,0.27 0.27,0.28,0.31,0.33,0.34 0.35,0.36,0.37,0.39), mean=0.307, stddev=0.0275], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.27 0.28,0.29,0.31,0.32,0.33 0.36,0.37,0.37,0.38), mean=0.307, stddev=0.0235], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.008,0.02 0.04,0.08,0.21,0.42,0.52 0.57,0.62,0.65,0.71), mean=0.25, stddev=0.18], bias-{mean,stddev}=-0.0001156,0.007783, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.4e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-37,-34,-34,-17 -13,-1.4,12,25,34 38,39,40,58), mean=11.1, stddev=17.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-12,-8.0,-5.3 -3.8,-2.4,0.28,3.3,5.0 6.3,8.1,9.3,10), mean=0.37, stddev=3.8]
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.339683, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02322, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.32,0.33 0.34,0.35,0.37,0.39,0.40 0.40,0.41,0.41,0.42), mean=0.371, stddev=0.0236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.16,0.17,0.18,0.20,0.21 0.22,0.23,0.23,0.24), mean=0.185, stddev=0.0203], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.15,0.15 0.18,0.21,0.33,0.47,0.52 0.57,0.60,0.62,0.65), mean=0.346, stddev=0.134], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02647, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.26,0.27,0.30,0.32,0.33 0.34,0.35,0.36,0.38), mean=0.298, stddev=0.0268], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.27,0.28,0.30,0.32,0.32 0.33,0.34,0.34,0.37), mean=0.299, stddev=0.0226], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.006,0.02 0.04,0.07,0.20,0.39,0.52 0.58,0.61,0.64,0.72), mean=0.241, stddev=0.178], bias-{mean,stddev}=0.0004197,0.007661, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.47e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.9,-1.9,-1.2 -0.26,0.44,1.8,3.4,4.0 4.7,5.6,5.6,6.2), mean=1.87, stddev=1.73], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.54,-0.38,-0.21,-0.09 0.08,0.26,0.46,0.70,0.86 0.97,1.2,1.2,1.3), mean=0.471, stddev=0.311]
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.339683, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02249, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.31,0.31 0.32,0.34,0.36,0.37,0.39 0.39,0.40,0.40,0.42), mean=0.359, stddev=0.0238], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.16,0.18,0.20,0.21 0.21,0.22,0.23,0.23), mean=0.179, stddev=0.0216], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.17,0.20,0.32,0.46,0.52 0.55,0.56,0.59,0.60), mean=0.336, stddev=0.13], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02577, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.22,0.25 0.26,0.27,0.29,0.31,0.32 0.33,0.35,0.35,0.37), mean=0.29, stddev=0.0267], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.26 0.26,0.27,0.29,0.31,0.32 0.33,0.34,0.34,0.35), mean=0.291, stddev=0.0225], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.006,0.02 0.04,0.07,0.20,0.39,0.49 0.56,0.60,0.62,0.65), mean=0.234, stddev=0.173], bias-{mean,stddev}=1.225e-05,0.005957, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.17e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-9.5,-8.3,-7.6 -3.7,-1.4,2.8,5.9,8.1 9.1,11,12,14), mean=2.37, stddev=4.66], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-2.3,-1.3,-1.1 -0.85,-0.32,0.45,1.2,1.4 1.8,2.1,2.3,3.4), mean=0.4, stddev=0.933], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0008,0.002,0.003 0.003,0.004,0.004,0.007), mean=0.00113, stddev=0.00131], oderiv-count=83456
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.339683, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02295, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.32,0.33 0.34,0.34,0.37,0.39,0.39 0.40,0.41,0.42,0.42), mean=0.366, stddev=0.0248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.14 0.15,0.16,0.18,0.20,0.21 0.22,0.23,0.24,0.25), mean=0.182, stddev=0.0232], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.17,0.21,0.32,0.46,0.52 0.58,0.61,0.61,0.64), mean=0.341, stddev=0.136], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02668, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.22,0.25 0.26,0.28,0.30,0.32,0.34 0.35,0.36,0.37,0.37), mean=0.3, stddev=0.0306], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.27 0.28,0.28,0.30,0.32,0.33 0.34,0.35,0.35,0.36), mean=0.301, stddev=0.0223], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.007,0.02 0.04,0.07,0.20,0.40,0.52 0.57,0.63,0.65,0.71), mean=0.242, stddev=0.18], bias-{mean,stddev}=0.00024,0.005773, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.64e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.5,-3.3,-2.7,-1.2 -0.49,0.31,2.2,4.2,5.0 5.8,6.8,7.9,9.4), mean=2.23, stddev=2.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.69,-0.60,-0.42,-0.25 -0.05,0.12,0.38,0.62,0.75 0.92,1.0,1.1,1.1), mean=0.367, stddev=0.341]
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.339683, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02376, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.33,0.34 0.35,0.35,0.38,0.40,0.41 0.41,0.42,0.43,0.43), mean=0.379, stddev=0.0248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.13,0.14 0.16,0.17,0.19,0.21,0.22 0.23,0.23,0.24,0.26), mean=0.188, stddev=0.0264], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.15 0.17,0.21,0.33,0.49,0.56 0.58,0.61,0.64,0.67), mean=0.352, stddev=0.143], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02794, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.24,0.26 0.27,0.29,0.31,0.34,0.35 0.36,0.38,0.38,0.41), mean=0.314, stddev=0.0339], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.28 0.29,0.29,0.31,0.33,0.34 0.36,0.37,0.37,0.39), mean=0.315, stddev=0.0238], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.004,0.006,0.01 0.03,0.08,0.21,0.42,0.54 0.60,0.67,0.70,0.73), mean=0.254, stddev=0.188], bias-{mean,stddev}=-0.0001553,0.006732, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.339683, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02402, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.35 0.35,0.36,0.38,0.40,0.41 0.42,0.42,0.43,0.43), mean=0.384, stddev=0.0217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.17,0.19,0.21,0.22 0.23,0.23,0.24,0.25), mean=0.191, stddev=0.0243], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.17 0.18,0.21,0.33,0.49,0.54 0.59,0.63,0.65,0.70), mean=0.356, stddev=0.144], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02947, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.28 0.30,0.30,0.33,0.36,0.37 0.38,0.39,0.40,0.41), mean=0.332, stddev=0.0323], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.30,0.31,0.33,0.35,0.36 0.37,0.37,0.38,0.39), mean=0.333, stddev=0.0233], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.01,0.02 0.04,0.09,0.23,0.44,0.56 0.63,0.69,0.73,0.77), mean=0.27, stddev=0.196], bias-{mean,stddev}=0.0003961,0.007542, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.00547, stddev=0.00728], oderiv-count=5056
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.339683, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02513, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.35,0.36 0.37,0.37,0.40,0.42,0.43 0.44,0.45,0.45,0.45), mean=0.401, stddev=0.0259], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.14,0.16 0.17,0.18,0.20,0.22,0.23 0.24,0.25,0.25,0.26), mean=0.199, stddev=0.0258], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.19,0.22,0.35,0.51,0.59 0.63,0.66,0.67,0.71), mean=0.372, stddev=0.153], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.28 0.29,0.31,0.34,0.36,0.38 0.39,0.40,0.41,0.43), mean=0.338, stddev=0.0347], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.30 0.31,0.32,0.33,0.36,0.37 0.38,0.39,0.40,0.42), mean=0.339, stddev=0.026], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.004,0.009,0.02 0.04,0.08,0.23,0.44,0.58 0.65,0.72,0.73,0.77), mean=0.273, stddev=0.201], bias-{mean,stddev}=-0.0002716,0.009973, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.339683, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02814, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.41 0.42,0.43,0.45,0.47,0.48 0.48,0.51,0.52,0.52), mean=0.449, stddev=0.0263], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.22,0.25,0.26 0.27,0.28,0.29,0.31), mean=0.223, stddev=0.0273], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.19 0.21,0.25,0.39,0.56,0.66 0.70,0.75,0.77,0.81), mean=0.417, stddev=0.17], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03529, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.32,0.33 0.34,0.36,0.40,0.44,0.44 0.46,0.48,0.48,0.52), mean=0.397, stddev=0.0413], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.36 0.36,0.37,0.40,0.42,0.43 0.44,0.46,0.46,0.47), mean=0.398, stddev=0.0274], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.008,0.02 0.05,0.09,0.26,0.53,0.68 0.76,0.85,0.87,0.90), mean=0.321, stddev=0.238], bias-{mean,stddev}=0.0004938,0.01199, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.53e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-16,-7.7,-6.9,-5.3 -4.1,-1.7,2.2,5.3,7.4 8.4,10,11,12), mean=1.89, stddev=4.46], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-3.3,-2.3,-1.9 -1.3,-0.67,0.41,1.7,2.3 2.7,3.1,3.2,3.6), mean=0.439, stddev=1.43], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00545, stddev=0.00629], oderiv-count=16320
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.339683, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.005, max-change=0.75, params-rms=0.05027, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.48,0.49 0.50,0.53,0.57,0.60,0.62 0.62,0.64,0.64,0.67), mean=0.567, stddev=0.0429], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.33 0.35,0.37,0.40,0.43,0.45 0.46,0.47,0.47,0.53), mean=0.4, stddev=0.0413], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.21 0.25,0.29,0.51,0.72,0.83 0.90,0.93,0.96,0.98), mean=0.523, stddev=0.223], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.0542, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.33,0.36 0.37,0.39,0.43,0.47,0.49 0.50,0.51,0.53,0.55), mean=0.431, stddev=0.047], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.54,0.55 0.56,0.57,0.61,0.64,0.66 0.67,0.68,0.72,0.73), mean=0.612, stddev=0.0419], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.17,0.20 0.23,0.31,0.54,0.77,0.91 0.98,1.0,1.1,1.1), mean=0.559, stddev=0.252], bias-{mean,stddev}=-0.001511,0.01646, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.62e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.8,-6.5,-6.0,-5.3 -3.9,-1.6,2.1,6.4,8.0 9.1,11,11,14), mean=2.34, stddev=4.51], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-1.3,-1.3,-0.60 -0.36,-0.07,0.42,0.86,1.1 1.2,1.4,1.4,1.9), mean=0.381, stddev=0.61]
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, params-rms=0.05811, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.57,0.58 0.60,0.62,0.66,0.69,0.70 0.72,0.73,0.74,0.75), mean=0.656, stddev=0.0436], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.37,0.38 0.39,0.42,0.47,0.50,0.52 0.53,0.56,0.59,0.62), mean=0.462, stddev=0.0492], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.18,0.21 0.25,0.34,0.58,0.84,0.96 1.0,1.1,1.1,1.2), mean=0.602, stddev=0.264], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00327924, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.0276, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.003,0.006,0.02 0.03,0.05,0.13,0.30,0.39 0.46,0.51,0.56,0.76), mean=0.17, stddev=0.141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.6,1.7,1.8,1.8,1.8 1.9,1.9,1.9,2.0), mean=1.75, stddev=0.0867], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.56,1.0 1.1,1.3,1.7,2.1,2.3 2.4,2.4,2.5,2.5), mean=1.69, stddev=0.47], bias-{mean,stddev}=-1.373e-06,0.04729, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.02983, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.19 0.20,0.22,0.24,0.26,0.27 0.28,0.29,0.30,0.31), mean=0.237, stddev=0.0269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.29 0.31,0.32,0.34,0.36,0.36 0.37,0.37,0.38,0.42), mean=0.337, stddev=0.0245], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.10,0.11 0.13,0.18,0.30,0.44,0.49 0.52,0.57,0.58,0.60), mean=0.309, stddev=0.136], bias-{mean,stddev}=0.000563,0.009965, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.53e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.0,-4.6,-3.5,-2.3 -1.9,-0.98,0.76,2.3,3.2 4.0,4.6,4.6,6.7), mean=0.726, stddev=2.11], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.57,-0.52,-0.40 -0.26,0.04,0.47,0.91,1.1 1.2,1.4,1.5,2.0), mean=0.465, stddev=0.512], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.002,0.006,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.00572, stddev=0.00368], oderiv-count=13056
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00327924, l2-regularize=0.0005, max-change=0.75, params-rms=0.01958, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.19,0.20 0.20,0.20,0.22,0.23,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0159], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.12 0.13,0.14,0.16,0.17,0.18 0.18,0.19,0.19,0.20), mean=0.155, stddev=0.0193], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.08 0.10,0.12,0.19,0.28,0.32 0.35,0.37,0.38,0.40), mean=0.204, stddev=0.0873], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0163962, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.02343, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.003,0.007,0.02 0.03,0.05,0.12,0.25,0.32 0.37,0.43,0.46,0.56), mean=0.15, stddev=0.112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.4 1.4,1.4,1.5,1.5,1.6 1.6,1.6,1.6,1.6), mean=1.49, stddev=0.0621], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.83,0.87,0.89 0.97,1.1,1.4,1.8,1.9 2.0,2.0,2.1,2.1), mean=1.45, stddev=0.349], bias-{mean,stddev}=-4.175e-09,0.01814, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040

LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.19917 tdnnf2.linear:4.65673 tdnnf2.affine:5.20834 tdnnf3.linear:4.01926 tdnnf3.affine:4.96432 tdnnf4.linear:3.67342 tdnnf4.affine:4.48986 tdnnf5.linear:3.46522 tdnnf5.affine:3.96089 tdnnf6.linear:3.07932 tdnnf6.affine:3.48318 tdnnf7.linear:2.97178 tdnnf7.affine:3.38943 tdnnf8.linear:2.87837 tdnnf8.affine:3.29882 tdnnf9.linear:2.93777 tdnnf9.affine:3.41586 tdnnf10.linear:3.04101 tdnnf10.affine:3.57724 tdnnf11.linear:3.07473 tdnnf11.affine:3.77338 tdnnf12.linear:3.21681 tdnnf12.affine:3.84428 tdnnf13.linear:3.60201 tdnnf13.affine:4.51927 prefinal-l:4.54962 prefinal-chain.affine:4.90916 prefinal-chain.linear:5.25951 output.affine:14.3522 prefinal-xent.affine:2.70227 prefinal-xent.linear:1.77262 output-xent.affine:11.9675 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.7429 tdnnf2.linear:16.0576 tdnnf2.affine:16.0873 tdnnf3.linear:14.2349 tdnnf3.affine:15.2792 tdnnf4.linear:13.5408 tdnnf4.affine:14.2165 tdnnf5.linear:12.5439 tdnnf5.affine:12.4277 tdnnf6.linear:11.8234 tdnnf6.affine:11.3246 tdnnf7.linear:11.9593 tdnnf7.affine:11.3933 tdnnf8.linear:12.38 tdnnf8.affine:11.4897 tdnnf9.linear:12.8873 tdnnf9.affine:11.8185 tdnnf10.linear:13.0494 tdnnf10.affine:11.8116 tdnnf11.linear:12.4885 tdnnf11.affine:11.5231 tdnnf12.linear:12.3022 tdnnf12.affine:11.5626 tdnnf13.linear:12.9863 tdnnf13.affine:12.2771 prefinal-l:12.8561 prefinal-chain.affine:18.5929 prefinal-chain.linear:27.2429 output.affine:121.522 prefinal-xent.affine:13.8073 prefinal-xent.linear:13.5174 output-xent.affine:96.5934 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.357355 tdnnf2.linear:0.289634 tdnnf2.affine:0.323337 tdnnf3.linear:0.282936 tdnnf3.affine:0.325332 tdnnf4.linear:0.271275 tdnnf4.affine:0.316367 tdnnf5.linear:0.27623 tdnnf5.affine:0.317879 tdnnf6.linear:0.26072 tdnnf6.affine:0.307458 tdnnf7.linear:0.249442 tdnnf7.affine:0.298085 tdnnf8.linear:0.232661 tdnnf8.affine:0.287424 tdnnf9.linear:0.22835 tdnnf9.affine:0.289403 tdnnf10.linear:0.232777 tdnnf10.affine:0.302344 tdnnf11.linear:0.24565 tdnnf11.affine:0.326886 tdnnf12.linear:0.261838 tdnnf12.affine:0.332674 tdnnf13.linear:0.276917 tdnnf13.affine:0.367582 prefinal-l:0.357647 prefinal-chain.affine:0.26384 prefinal-chain.linear:0.193198 output.affine:0.118025 prefinal-xent.affine:0.195519 prefinal-xent.linear:0.131352 output-xent.affine:0.123944 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 11:18:07 CST 2020, elapsed time 4 seconds
