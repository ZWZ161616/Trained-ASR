# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/298.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/297.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/298.mdl 
# Started at Mon Feb 24 13:25:04 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/298.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1269, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,1.1,1.3,1.4 1.4,1.5,1.8,2.1,2.4 2.6,2.8,2.8,3.0), mean=1.84, stddev=0.391], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.50,0.53,0.59 0.66,0.78,1.3,1.7,2.1 2.3,2.4,2.4,2.9), mean=1.34, stddev=0.526], bias-{mean,stddev}=-0.1034,0.1652, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.04e+06, self-repaired-proportion=0.0180305, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.01,0.02 0.03,0.05,0.09,0.17,0.21 0.24,0.26,0.26,0.28), mean=0.109, stddev=0.0694], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.05,0.09 0.12,0.19,0.32,0.49,0.63 0.72,0.74,0.76,0.79), mean=0.351, stddev=0.186], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.07,0.08,0.08,0.13), mean=0.0399, stddev=0.0165], oderiv-count=1.32112e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.01,0.02 0.02,0.05,0.09,0.17,0.22 0.24,0.26,0.26,0.28), mean=0.109, stddev=0.0703], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.06,0.08 0.10,0.13,0.19,0.24,0.26 0.28,0.29,0.29,0.30), mean=0.184, stddev=0.0621]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0571429, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1093, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.75, stddev=0.00195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.63,0.65,0.69 0.75,0.79,0.86,0.96,0.98 1.0,1.1,1.1,1.2), mean=0.869, stddev=0.1], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.11, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.92,0.92,1.0 1.1,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.24, stddev=0.135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.1,1.1 1.1,1.2,1.2,1.3,1.3 1.4,1.4,1.5,1.5), mean=1.24, stddev=0.0825], bias-{mean,stddev}=-0.1452,0.0922, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.75,0.76,0.83 0.88,0.98,1.1,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.13, stddev=0.179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.37,0.37 0.39,0.44,0.53,0.58,0.59 0.60,0.61,0.61,0.63), mean=0.509, stddev=0.0752], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.004,0.009,0.01,0.01), mean=0.00257, stddev=0.00151], oderiv-count=1.15876e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.74,0.75,0.81 0.89,0.98,1.1,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.13, stddev=0.178], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.3,1.3,1.4 1.5,1.6,1.8,2.0,2.2 2.3,2.4,2.5,2.5), mean=1.81, stddev=0.282]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0571429, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1017, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.63,0.63,0.67 0.69,0.73,0.81,0.88,0.92 0.94,0.98,1.0,1.1), mean=0.809, stddev=0.0854], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1062, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.62,0.85,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.19, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.1,1.1,1.2,1.3,1.3 1.3,1.3,1.4,1.4), mean=1.2, stddev=0.0754], bias-{mean,stddev}=-0.1602,0.0748, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.64e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.59,0.92,1.1 1.1,1.2,1.4,1.5,1.6 1.6,1.7,1.7,1.7), mean=1.35, stddev=0.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.43,0.46,0.52,0.57,0.58 0.58,0.59,0.59,0.60), mean=0.511, stddev=0.0559], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.004,0.005,0.01), mean=0.00167, stddev=0.00107], oderiv-count=1.1034e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.61,0.89,1.1 1.1,1.2,1.4,1.5,1.6 1.6,1.6,1.6,1.7), mean=1.34, stddev=0.198], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.92,1.2,1.7 1.8,1.9,2.1,2.4,2.5 2.6,2.8,2.8,3.0), mean=2.13, stddev=0.334]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0571429, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09384, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.5, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.60,0.61,0.65 0.67,0.69,0.74,0.80,0.83 0.84,0.87,0.89,0.95), mean=0.748, stddev=0.0658], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.67,0.71,0.97 1.0,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.13, stddev=0.135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.90,0.93,0.97 1.0,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.5), mean=1.13, stddev=0.0987], bias-{mean,stddev}=-0.1731,0.07829, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.85e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.66,0.74,1.1 1.2,1.2,1.4,1.5,1.6 1.7,1.8,1.8,1.9), mean=1.39, stddev=0.225], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.39 0.42,0.46,0.51,0.55,0.56 0.56,0.57,0.57,0.59), mean=0.497, stddev=0.0544], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.001,0.001 0.002,0.003,0.003,0.01), mean=0.00136, stddev=0.001], oderiv-count=9.6976e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.63,0.67,1.1 1.2,1.2,1.4,1.5,1.6 1.7,1.7,1.8,1.8), mean=1.38, stddev=0.224], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,1.1,1.2,1.8 1.9,2.0,2.2,2.5,2.6 2.7,2.8,2.9,3.3), mean=2.23, stddev=0.355]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0571429, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08677, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.39, stddev=0.00142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.56,0.59 0.61,0.64,0.69,0.75,0.77 0.80,0.82,0.85,0.98), mean=0.691, stddev=0.0682], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08263, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.64,0.81 0.84,0.86,0.93,1.0,1.0 1.1,1.1,1.1,1.3), mean=0.93, stddev=0.0994], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.74,0.76,0.80 0.84,0.87,0.93,0.99,1.0 1.1,1.1,1.1,1.1), mean=0.932, stddev=0.0777], bias-{mean,stddev}=-0.1426,0.05425, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.61e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.61,0.68,0.86 0.91,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.1, stddev=0.148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.39,0.43 0.44,0.47,0.50,0.54,0.55 0.56,0.57,0.58,0.61), mean=0.499, stddev=0.0423], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00159, stddev=0.000317], oderiv-count=8.72602e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.60,0.68,0.87 0.94,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.5), mean=1.11, stddev=0.15], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.99,1.1,1.5 1.5,1.6,1.7,1.9,2.0 2.1,2.2,2.2,2.7), mean=1.74, stddev=0.235]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0571429, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08557, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.37, stddev=0.000913], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.56,0.58 0.60,0.63,0.68,0.73,0.75 0.78,0.81,0.81,0.87), mean=0.682, stddev=0.0614], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08023, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.62,0.64,0.75 0.80,0.84,0.90,0.97,1.0 1.1,1.1,1.1,1.2), mean=0.903, stddev=0.0958], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.77,0.77,0.79 0.81,0.84,0.89,0.97,1.0 1.0,1.1,1.1,1.1), mean=0.904, stddev=0.0789], bias-{mean,stddev}=-0.1368,0.05408, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.70,0.78,0.81 0.92,0.97,1.1,1.2,1.3 1.3,1.4,1.5,1.5), mean=1.09, stddev=0.151], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.42 0.44,0.46,0.49,0.52,0.54 0.55,0.56,0.59,0.62), mean=0.492, stddev=0.0399], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00162, stddev=0.000236], oderiv-count=7.75085e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.69,0.71,0.82 0.90,0.97,1.1,1.2,1.3 1.3,1.4,1.5,1.5), mean=1.09, stddev=0.16], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.4,1.5,1.7,1.9,2.1 2.2,2.3,2.3,2.6), mean=1.73, stddev=0.259]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0571429, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08583, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.37, stddev=0.000846], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.54,0.55,0.57 0.60,0.63,0.68,0.74,0.77 0.80,0.82,0.83,0.90), mean=0.683, stddev=0.0675], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07964, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.55,0.73 0.79,0.82,0.90,0.98,1.0 1.0,1.1,1.1,1.2), mean=0.895, stddev=0.107], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.73,0.74,0.78 0.80,0.82,0.90,0.95,1.0 1.0,1.1,1.1,1.1), mean=0.898, stddev=0.0777], bias-{mean,stddev}=-0.1269,0.05105, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.38e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.56,0.57,0.79 0.93,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.08, stddev=0.16], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.34,0.41 0.43,0.46,0.48,0.51,0.53 0.55,0.57,0.58,0.60), mean=0.478, stddev=0.0453], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00163, stddev=0.000251], oderiv-count=6.94323e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.59,0.61,0.84 0.92,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.09, stddev=0.158], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.5,1.5,1.7,1.9,2.1 2.2,2.3,2.4,2.6), mean=1.73, stddev=0.259]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0571429, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08745, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.4, stddev=0.00192], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.53,0.54,0.57 0.59,0.62,0.69,0.76,0.80 0.83,0.87,0.92,0.96), mean=0.695, stddev=0.0811], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07891, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.54,0.71 0.75,0.80,0.89,0.98,1.0 1.1,1.1,1.1,1.1), mean=0.885, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.72,0.72,0.76 0.79,0.82,0.88,0.94,0.99 1.0,1.1,1.1,1.3), mean=0.888, stddev=0.0892], bias-{mean,stddev}=-0.1079,0.05116, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.82e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.47,0.60,0.82 0.89,0.97,1.1,1.2,1.4 1.5,1.5,1.5,1.6), mean=1.09, stddev=0.194], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.29,0.39 0.41,0.42,0.45,0.47,0.49 0.52,0.54,0.54,0.55), mean=0.446, stddev=0.0446], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00156, stddev=0.000263], oderiv-count=5.84192e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.52,0.60,0.83 0.89,0.98,1.1,1.2,1.4 1.4,1.5,1.6,1.6), mean=1.1, stddev=0.193], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.4,1.5 1.5,1.6,1.8,2.1,2.3 2.5,2.6,2.6,2.9), mean=1.89, stddev=0.335]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0571429, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08928, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.43, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.54,0.56 0.58,0.62,0.70,0.80,0.84 0.88,0.89,0.93,1.0), mean=0.707, stddev=0.0981], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08109, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.54,0.59,0.69 0.76,0.82,0.92,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.909, stddev=0.123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.74,0.75,0.77 0.80,0.83,0.90,1.0,1.0 1.1,1.1,1.1,1.2), mean=0.913, stddev=0.0892], bias-{mean,stddev}=-0.08133,0.03802, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.71,0.71,0.95 1.0,1.0,1.2,1.3,1.4 1.5,1.6,1.6,1.9), mean=1.19, stddev=0.188], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.32,0.39,0.40 0.41,0.42,0.45,0.47,0.49 0.50,0.51,0.51,0.52), mean=0.449, stddev=0.0352], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00161, stddev=0.000244], oderiv-count=5.02848e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.74,0.77,0.94 0.97,1.1,1.2,1.3,1.4 1.5,1.7,1.7,1.9), mean=1.2, stddev=0.197], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.7,1.8,2.0,2.2,2.4 2.6,2.7,2.7,3.1), mean=2.03, stddev=0.302]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0571429, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08999, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.44, stddev=0.00109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.49,0.55,0.56 0.58,0.61,0.69,0.80,0.89 0.93,0.96,0.98,1.0), mean=0.711, stddev=0.115], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.50,0.63,0.71 0.76,0.83,0.92,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.912, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.73,0.74,0.78 0.80,0.85,0.92,0.98,1.0 1.1,1.1,1.1,1.2), mean=0.915, stddev=0.0884], bias-{mean,stddev}=-0.07482,0.03433, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.56e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.71,0.86,0.89 0.96,1.0,1.1,1.3,1.3 1.4,1.4,1.4,1.6), mean=1.13, stddev=0.155], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.30,0.32,0.37 0.39,0.40,0.43,0.46,0.48 0.48,0.49,0.51,0.55), mean=0.43, stddev=0.041], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00194, stddev=0.000266], oderiv-count=3.79379e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.68,0.79,0.90 0.95,1.0,1.1,1.3,1.3 1.4,1.5,1.5,1.7), mean=1.14, stddev=0.169], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.6 1.7,1.8,2.0,2.2,2.4 2.5,2.6,2.6,2.7), mean=2.03, stddev=0.247]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0571429, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08458, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.35, stddev=0.00276], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.46,0.49 0.52,0.56,0.64,0.79,0.83 0.88,0.91,0.94,1.0), mean=0.665, stddev=0.123], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07877, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.50,0.60,0.66 0.70,0.73,0.87,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.878, stddev=0.154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.73,0.75,0.77 0.78,0.81,0.89,0.97,0.99 1.0,1.0,1.0,1.1), mean=0.887, stddev=0.0815], bias-{mean,stddev}=-0.07878,0.03633, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.99e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.68,0.71,0.75 0.84,0.88,0.95,1.1,1.1 1.3,1.3,1.3,1.5), mean=0.982, stddev=0.141], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.32,0.33 0.36,0.37,0.41,0.43,0.45 0.46,0.46,0.47,0.48), mean=0.405, stddev=0.0368], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.003,0.004,0.004), mean=0.00272, stddev=0.000303], oderiv-count=2.84147e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.70,0.70,0.77 0.81,0.89,0.96,1.1,1.2 1.2,1.3,1.4,1.4), mean=0.983, stddev=0.145], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.7,1.7,1.9,2.2,2.3 2.4,2.4,2.6,2.7), mean=1.95, stddev=0.25]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0571429, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.07893, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.26, stddev=0.000977], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.45,0.47 0.50,0.52,0.59,0.72,0.78 0.85,0.88,0.90,0.93), mean=0.621, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07627, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.51,0.53,0.59 0.65,0.69,0.81,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.846, stddev=0.171], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.72,0.74 0.75,0.79,0.86,0.92,0.96 0.97,0.99,1.0,1.2), mean=0.859, stddev=0.0776], bias-{mean,stddev}=-0.08174,0.04669, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.24e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.58,0.62 0.65,0.71,0.78,0.87,0.97 1.0,1.1,1.1,1.3), mean=0.8, stddev=0.125], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.23,0.28 0.29,0.31,0.36,0.41,0.43 0.45,0.46,0.47,0.52), mean=0.361, stddev=0.056], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.004,0.005,0.005 0.005,0.006,0.006,0.007), mean=0.00427, stddev=0.000612], oderiv-count=1.8311e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.59,0.63 0.66,0.71,0.80,0.88,0.96 1.0,1.1,1.2,1.2), mean=0.806, stddev=0.124], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.5 1.6,1.7,2.0,2.3,2.4 2.5,2.6,2.6,2.7), mean=1.97, stddev=0.312]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0571429, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08369, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.34, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.49,0.52 0.53,0.56,0.64,0.77,0.81 0.86,0.89,0.92,1.0), mean=0.66, stddev=0.111], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08429, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.60,0.67 0.77,0.83,0.93,1.1,1.1 1.2,1.2,1.2,1.2), mean=0.942, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.78,0.79,0.82 0.87,0.89,0.94,1.0,1.0 1.1,1.2,1.2,1.2), mean=0.95, stddev=0.0788], bias-{mean,stddev}=-0.06986,0.06189, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.34e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.65,0.71 0.74,0.79,0.92,1.1,1.1 1.3,1.3,1.3,1.4), mean=0.938, stddev=0.165], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.23,0.26 0.26,0.31,0.37,0.41,0.44 0.46,0.47,0.47,0.51), mean=0.364, stddev=0.0625], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.006,0.007,0.007,0.008,0.008 0.009,0.009,0.009,0.01), mean=0.00732, stddev=0.000887], oderiv-count=632128
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.65,0.67,0.70 0.73,0.78,0.89,1.1,1.2 1.2,1.3,1.3,1.5), mean=0.924, stddev=0.171], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.8,1.9,2.0 2.0,2.2,2.6,2.9,3.1 3.2,3.4,3.5,3.5), mean=2.56, stddev=0.404]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0571429, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.005, max-change=0.75, params-rms=0.1163, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.32, stddev=0.0124], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.73,0.73,0.76 0.80,0.86,0.93,0.99,1.0 1.1,1.1,1.1,1.1), mean=0.926, stddev=0.0894], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1756, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.1,1.2,1.2 1.3,1.3,1.4,1.5,1.5 1.6,1.6,1.6,1.6), mean=1.4, stddev=0.11], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.8,1.8 1.8,1.9,2.0,2.1,2.1 2.1,2.2,2.2,2.2), mean=1.98, stddev=0.11], bias-{mean,stddev}=-0.03137,0.1174, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.88e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.3,1.4,1.5,1.7,1.7 1.8,1.9,1.9,2.0), mean=1.52, stddev=0.175], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.36 0.37,0.38,0.40,0.43,0.44 0.45,0.46,0.46,0.48), mean=0.403, stddev=0.0278], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.009,0.01 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0115, stddev=0.00166], oderiv-count=624512
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.3,1.3 1.3,1.4,1.5,1.7,1.7 1.8,1.9,1.9,2.0), mean=1.51, stddev=0.174], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.5,2.6,2.8 2.9,3.1,3.4,3.7,3.9 4.1,4.3,4.3,4.8), mean=3.42, stddev=0.409]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, params-rms=0.2205, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.5,2.5 2.5,2.5,2.5,2.5,2.5 2.5,2.5,2.5,2.5), mean=2.5, stddev=0.00414], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.5 1.5,1.6,1.8,1.9,2.0 2.0,2.1,2.1,2.1), mean=1.75, stddev=0.183], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-3e-08,-3e-08 -2e-08,-2e-08,-2e-09,2e-08,3e-08 3e-08,3e-08,4e-08,5e-08), mean=-2.63e-10, stddev=1.94e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.6,2.7,2.8 2.8,2.9,3.1,3.2,3.3 3.4,3.4,3.4,3.6), mean=3.07, stddev=0.2]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00171094, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.1892, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.16,0.25,0.51 0.79,1.1,1.5,1.8,1.9 2.0,2.1,2.2,2.8), mean=1.44, stddev=0.458], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,11,12,13,13 13,14,14,14), mean=12, stddev=0.677], bias-{mean,stddev}=0.00131,0.2724, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1216, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.70,0.75,0.82 0.89,0.92,0.97,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.969, stddev=0.0826], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.3,1.4,1.4,1.5 1.6,1.6,1.6,1.6), mean=1.37, stddev=0.101], bias-{mean,stddev}=-0.02385,0.1879, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.19e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.53,0.55,0.62 0.66,0.73,0.88,1.1,1.2 1.3,1.4,1.5,1.6), mean=0.91, stddev=0.216], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.37 0.40,0.41,0.46,0.51,0.55 0.56,0.62,0.62,0.64), mean=0.465, stddev=0.0611], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.005,0.006,0.006,0.006,0.007 0.007,0.008,0.008,0.02), mean=0.00617, stddev=0.00108], oderiv-count=653888
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.54,0.56,0.63 0.66,0.73,0.88,1.0,1.2 1.3,1.4,1.4,1.6), mean=0.914, stddev=0.217], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.2,1.2,1.4,1.5,1.6 1.7,1.7,1.8,1.9), mean=1.39, stddev=0.175]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00171094, l2-regularize=0.0005, max-change=0.75, params-rms=0.1278, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.45, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.76,0.80,0.84 0.88,0.92,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.02, stddev=0.112], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-4e-08 -3e-08,-2e-08,1e-09,1e-08,2e-08 2e-08,2e-08,2e-08,3e-08), mean=-2.54e-09, stddev=1.8e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.3 1.3,1.4,1.5,1.5,1.5 1.6,1.6,1.6,1.7), mean=1.45, stddev=0.0996]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00855469, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1972, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.08,0.31 0.77,1.1,1.5,2.0,2.2 2.3,2.5,2.6,3.9), mean=1.48, stddev=0.559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,13,13,13 13,13,13,13), mean=12.5, stddev=0.227], bias-{mean,stddev}=1.641e-08,0.1896, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,7e-06 0.0001,0.0002,0.0006,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000808, stddev=0.00121], oderiv-count=623424
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/297.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/298.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.74939 tdnnf2.linear:2.78586 tdnnf2.affine:3.12687 tdnnf3.linear:2.39117 tdnnf3.affine:2.95583 tdnnf4.linear:2.19801 tdnnf4.affine:2.78058 tdnnf5.linear:2.05957 tdnnf5.affine:2.30493 tdnnf6.linear:1.89493 tdnnf6.affine:2.17692 tdnnf7.linear:1.81743 tdnnf7.affine:2.08167 tdnnf8.linear:1.70164 tdnnf8.affine:1.98123 tdnnf9.linear:1.67925 tdnnf9.affine:2.00551 tdnnf10.linear:1.73449 tdnnf10.affine:2.12406 tdnnf11.linear:1.80223 tdnnf11.affine:2.23678 tdnnf12.linear:1.90208 tdnnf12.affine:2.38455 tdnnf13.linear:2.1213 tdnnf13.affine:2.70621 prefinal-l:2.90686 prefinal-chain.affine:3.12874 prefinal-chain.linear:2.85099 output.affine:6.65213 prefinal-xent.affine:1.78547 prefinal-xent.linear:1.13616 output-xent.affine:6.0766 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:21.4005 tdnnf2.linear:13.9959 tdnnf2.affine:14.2093 tdnnf3.linear:13.0234 tdnnf3.affine:13.744 tdnnf4.linear:12.0109 tdnnf4.affine:13.003 tdnnf5.linear:11.1067 tdnnf5.affine:10.7162 tdnnf6.linear:10.9528 tdnnf6.affine:10.4038 tdnnf7.linear:10.986 tdnnf7.affine:10.3101 tdnnf8.linear:11.1932 tdnnf8.affine:10.1903 tdnnf9.linear:11.4281 tdnnf9.affine:10.4285 tdnnf10.linear:11.5191 tdnnf10.affine:10.4442 tdnnf11.linear:10.8258 tdnnf11.affine:10.1301 tdnnf12.linear:10.1037 tdnnf12.affine:9.82016 tdnnf13.linear:10.7126 tdnnf13.affine:10.841 prefinal-l:10.5305 prefinal-chain.affine:15.9549 prefinal-chain.linear:19.9612 output.affine:97.7284 prefinal-xent.affine:11.2108 prefinal-xent.linear:11.5671 output-xent.affine:101.003 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.26835 tdnnf2.linear:0.198807 tdnnf2.affine:0.218959 tdnnf3.linear:0.183013 tdnnf3.affine:0.213272 tdnnf4.linear:0.182213 tdnnf4.affine:0.211986 tdnnf5.linear:0.185099 tdnnf5.affine:0.214496 tdnnf6.linear:0.172752 tdnnf6.affine:0.209004 tdnnf7.linear:0.165244 tdnnf7.affine:0.201642 tdnnf8.linear:0.1518 tdnnf8.affine:0.194339 tdnnf9.linear:0.146528 tdnnf9.affine:0.191717 tdnnf10.linear:0.150434 tdnnf10.affine:0.203183 tdnnf11.linear:0.166243 tdnnf11.affine:0.220502 tdnnf12.linear:0.187758 tdnnf12.affine:0.242229 tdnnf13.linear:0.197953 tdnnf13.affine:0.249597 prefinal-l:0.272439 prefinal-chain.affine:0.195481 prefinal-chain.linear:0.142176 output.affine:0.0678458 prefinal-xent.affine:0.158818 prefinal-xent.linear:0.0980872 output-xent.affine:0.0601916 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 13:25:07 CST 2020, elapsed time 3 seconds
