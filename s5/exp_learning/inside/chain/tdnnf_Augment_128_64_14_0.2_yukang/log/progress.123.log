# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/123.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/122.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/123.mdl 
# Started at Mon Feb 24 09:08:20 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/123.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1471, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.4 1.6,1.8,2.1,2.4,2.8 3.1,3.3,3.3,3.5), mean=2.13, stddev=0.482], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.58,0.62,0.70 0.77,0.92,1.5,2.0,2.4 2.6,2.9,3.0,3.5), mean=1.55, stddev=0.614], bias-{mean,stddev}=-0.1518,0.2122, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.43e+06, self-repaired-proportion=0.0594527, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.007 0.01,0.04,0.11,0.18,0.26 0.31,0.33,0.34,0.41), mean=0.121, stddev=0.0914], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.05 0.07,0.15,0.31,0.50,0.63 0.73,0.78,0.78,0.81), mean=0.333, stddev=0.206], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.07,0.10 0.11,0.19,0.20,0.21), mean=0.0547, stddev=0.0357], oderiv-count=1.31652e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.007 0.01,0.04,0.11,0.18,0.26 0.30,0.34,0.36,0.40), mean=0.12, stddev=0.0931], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.07,0.12,0.21,0.27,0.31 0.32,0.35,0.36,0.38), mean=0.2, stddev=0.0875]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.312169, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1368, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.2,2.2,2.2 2.2,2.2,2.2,2.2,2.2 2.2,2.2,2.2,2.2), mean=2.19, stddev=0.00301], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.70,0.73,0.80 0.88,0.96,1.1,1.2,1.3 1.3,1.4,1.5,1.5), mean=1.08, stddev=0.156], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1364, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.2,1.3 1.3,1.4,1.5,1.6,1.8 1.9,1.9,1.9,2.1), mean=1.53, stddev=0.175], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.4,1.5,1.6,1.7 1.7,1.8,1.8,1.9), mean=1.54, stddev=0.116], bias-{mean,stddev}=-0.1702,0.1093, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.88e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.4 1.7,1.8,2.0,2.2,2.3 2.4,2.5,2.5,2.7), mean=2, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.38 0.41,0.45,0.54,0.58,0.59 0.60,0.60,0.60,0.61), mean=0.518, stddev=0.068], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.006,0.007,0.008), mean=0.00177, stddev=0.00111], oderiv-count=1.19266e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.4 1.6,1.8,2.0,2.2,2.3 2.4,2.6,2.6,2.6), mean=2, stddev=0.298], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,2.1,2.4 2.4,2.7,3.1,3.6,3.9 4.0,4.0,4.1,4.2), mean=3.15, stddev=0.524]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.312169, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.119, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.9, stddev=0.00309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.70,0.72,0.77 0.82,0.86,0.94,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.946, stddev=0.106], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1186, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.96,1.1 1.2,1.2,1.3,1.4,1.5 1.6,1.7,1.7,1.8), mean=1.33, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.3,1.4,1.5 1.5,1.5,1.5,1.6), mean=1.34, stddev=0.103], bias-{mean,stddev}=-0.1563,0.07214, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.29e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.5,1.7 1.7,1.9,2.1,2.3,2.4 2.4,2.5,2.5,2.6), mean=2.06, stddev=0.253], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.41,0.42 0.45,0.47,0.52,0.56,0.56 0.57,0.58,0.58,0.59), mean=0.512, stddev=0.0461], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.002 0.002,0.004,0.004,0.006), mean=0.00123, stddev=0.000751], oderiv-count=1.13443e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.4,1.7 1.8,1.9,2.1,2.3,2.4 2.4,2.5,2.5,2.6), mean=2.07, stddev=0.258], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,2.1,2.5 2.7,2.9,3.2,3.7,3.9 4.0,4.3,4.3,4.7), mean=3.3, stddev=0.518]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.312169, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0.00349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.72,0.73,0.75 0.77,0.81,0.88,0.94,0.98 1.0,1.0,1.1,1.2), mean=0.881, stddev=0.0816], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1185, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.67,0.87,1.2 1.2,1.2,1.3,1.4,1.5 1.6,1.6,1.6,1.7), mean=1.33, stddev=0.161], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.3,1.4,1.5 1.5,1.5,1.6,1.6), mean=1.34, stddev=0.105], bias-{mean,stddev}=-0.1807,0.09634, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.74e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.87,1.4,1.8 1.9,2.1,2.2,2.5,2.6 2.7,2.8,2.8,3.1), mean=2.24, stddev=0.32], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.45,0.47,0.52,0.55,0.56 0.57,0.58,0.58,0.61), mean=0.508, stddev=0.0445], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.003,0.003,0.006), mean=0.000949, stddev=0.000765], oderiv-count=9.9088e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.86,1.2,1.9 1.9,2.0,2.2,2.5,2.6 2.7,2.9,3.0,3.2), mean=2.23, stddev=0.338], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.8,2.9 3.0,3.2,3.6,4.1,4.4 4.5,5.1,5.2,5.7), mean=3.62, stddev=0.633]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.312169, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1038, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0.00431], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.66,0.68,0.70 0.73,0.76,0.82,0.89,0.92 0.97,0.99,1.0,1.0), mean=0.827, stddev=0.0765], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1088, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.69,0.83,1.1 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.22, stddev=0.141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,1.0,1.1 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.23, stddev=0.113], bias-{mean,stddev}=-0.1591,0.07179, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.96,1.3,1.8 1.9,2.0,2.3,2.5,2.6 2.8,2.8,2.8,3.0), mean=2.24, stddev=0.332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.41,0.43 0.45,0.47,0.51,0.54,0.55 0.56,0.57,0.58,0.60), mean=0.505, stddev=0.0385], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.002,0.006), mean=0.000873, stddev=0.000572], oderiv-count=9.12122e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.85,1.3,1.7 1.9,2.0,2.2,2.5,2.6 2.8,2.8,2.9,3.1), mean=2.23, stddev=0.35], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.3,2.0,2.8 2.9,3.2,3.5,3.9,4.3 4.5,4.9,4.9,5.8), mean=3.53, stddev=0.613]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.312169, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09848, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.58, stddev=0.00352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.61,0.64,0.66 0.68,0.72,0.78,0.85,0.89 0.92,0.94,0.95,1.0), mean=0.784, stddev=0.0774], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09573, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.69,0.80,0.87 0.94,0.98,1.1,1.2,1.2 1.3,1.3,1.3,1.5), mean=1.08, stddev=0.127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.85,0.88,0.91 0.93,0.99,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.08, stddev=0.103], bias-{mean,stddev}=-0.1424,0.05837, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.44e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,1.0,1.2,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.91, stddev=0.265], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.37,0.43 0.45,0.47,0.50,0.53,0.54 0.55,0.56,0.56,0.58), mean=0.496, stddev=0.0391], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0008 0.0008,0.0009,0.0009,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.00101, stddev=0.000285], oderiv-count=7.80691e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,1.0,1.1,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.3,2.3,2.5), mean=1.88, stddev=0.27], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.8,1.9,2.3 2.6,2.7,2.9,3.2,3.4 3.6,3.8,3.9,4.3), mean=2.95, stddev=0.406]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.312169, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1001, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.62,0.64,0.66 0.70,0.72,0.80,0.87,0.90 0.93,0.97,0.97,1.0), mean=0.797, stddev=0.0812], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09474, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.71,0.73,0.85 0.92,0.99,1.1,1.1,1.2 1.3,1.3,1.3,1.5), mean=1.06, stddev=0.121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.84,0.87,0.92 0.94,0.97,1.1,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.07, stddev=0.106], bias-{mean,stddev}=-0.1297,0.06178, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.44e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.4 1.6,1.7,1.9,2.1,2.2 2.2,2.4,2.5,2.7), mean=1.88, stddev=0.268], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.40 0.44,0.46,0.48,0.51,0.53 0.55,0.56,0.57,0.58), mean=0.482, stddev=0.0412], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00102, stddev=0.000191], oderiv-count=6.91878e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.4 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.5,2.6), mean=1.88, stddev=0.27], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.3,2.5 2.5,2.7,2.9,3.3,3.5 3.8,3.9,4.0,4.1), mean=2.99, stddev=0.399]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.312169, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1036, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.65,0.65,0.70 0.73,0.75,0.81,0.89,0.94 0.97,1.0,1.1,1.1), mean=0.824, stddev=0.0876], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09599, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.66,0.70,0.84 0.91,0.98,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.08, stddev=0.141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.84,0.86,0.90 0.94,0.99,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.08, stddev=0.112], bias-{mean,stddev}=-0.1064,0.07369, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.9e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.1,1.2,1.5 1.5,1.7,1.9,2.1,2.3 2.5,2.6,2.7,3.0), mean=1.91, stddev=0.324], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.36,0.41 0.42,0.44,0.46,0.49,0.51 0.51,0.53,0.53,0.55), mean=0.46, stddev=0.0397], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00102, stddev=0.000152], oderiv-count=5.82106e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,1.1,1.1,1.4 1.6,1.7,1.9,2.1,2.3 2.6,2.7,2.8,3.0), mean=1.91, stddev=0.337], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.5,2.6 2.7,2.8,3.1,3.5,3.9 4.2,4.7,4.7,4.8), mean=3.19, stddev=0.516]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.312169, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.67, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.62,0.65 0.69,0.74,0.83,0.93,0.97 1.0,1.0,1.1,1.1), mean=0.831, stddev=0.106], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09699, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.60,0.73 0.84,0.93,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.08, stddev=0.182], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.85,0.86,0.91 0.93,0.97,1.1,1.2,1.2 1.3,1.4,1.4,1.5), mean=1.09, stddev=0.125], bias-{mean,stddev}=-0.08949,0.0606, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,1.0,1.1,1.3 1.5,1.7,1.9,2.1,2.3 2.5,2.6,2.7,2.7), mean=1.92, stddev=0.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.28,0.36 0.40,0.43,0.45,0.48,0.49 0.50,0.50,0.50,0.52), mean=0.448, stddev=0.0452], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00117, stddev=0.000161], oderiv-count=5.0112e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,1.0,1.0,1.3 1.5,1.7,1.9,2.1,2.3 2.5,2.5,2.5,2.7), mean=1.9, stddev=0.332], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.5,2.7 2.9,3.0,3.2,3.7,3.9 4.1,4.2,4.4,4.6), mean=3.28, stddev=0.431]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.312169, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1091, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.75, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.63,0.64,0.67 0.70,0.76,0.85,0.97,1.0 1.1,1.2,1.2,1.2), mean=0.864, stddev=0.127], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09951, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.64,0.73 0.79,0.94,1.1,1.3,1.4 1.4,1.4,1.4,1.4), mean=1.11, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.86,0.88,0.91 0.94,0.99,1.1,1.2,1.3 1.4,1.4,1.5,1.6), mean=1.12, stddev=0.141], bias-{mean,stddev}=-0.06808,0.04884, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.59e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.2,1.2,1.4 1.5,1.7,1.9,2.2,2.4 2.5,2.6,2.7,2.8), mean=1.95, stddev=0.332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.30,0.36 0.37,0.40,0.44,0.46,0.48 0.49,0.49,0.50,0.50), mean=0.429, stddev=0.0448], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00135, stddev=0.000191], oderiv-count=3.99238e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.2,1.2,1.4 1.5,1.7,1.9,2.2,2.3 2.5,2.7,2.7,2.7), mean=1.95, stddev=0.335], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.7,2.8,3.0 3.0,3.2,3.5,4.0,4.5 4.7,4.9,5.0,5.6), mean=3.63, stddev=0.543]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.312169, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1052, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.68, stddev=0.00423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.63 0.67,0.71,0.82,0.95,1.0 1.1,1.1,1.2,1.2), mean=0.831, stddev=0.134], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09709, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.60,0.70 0.78,0.87,1.1,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.07, stddev=0.234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.85,0.91 0.96,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.09, stddev=0.112], bias-{mean,stddev}=-0.08871,0.05124, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,1.0,1.1,1.2 1.3,1.5,1.6,1.8,1.9 2.0,2.1,2.2,2.3), mean=1.63, stddev=0.254], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.30 0.34,0.36,0.40,0.43,0.44 0.46,0.48,0.48,0.49), mean=0.395, stddev=0.0498], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.0019, stddev=0.000285], oderiv-count=2.76563e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,1.1,1.1,1.2 1.3,1.5,1.7,1.8,2.0 2.1,2.2,2.2,2.2), mean=1.65, stddev=0.257], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.7,2.7,2.8 2.9,3.2,3.6,4.3,4.7 4.8,5.0,5.1,5.4), mean=3.71, stddev=0.633]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.312169, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1017, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.55,0.58,0.62 0.65,0.69,0.78,0.92,0.99 1.0,1.1,1.1,1.2), mean=0.803, stddev=0.129], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09453, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.56,0.59,0.64 0.68,0.76,1.0,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.03, stddev=0.276], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.82,0.84,0.88 0.92,0.96,1.0,1.2,1.2 1.2,1.3,1.3,1.6), mean=1.06, stddev=0.126], bias-{mean,stddev}=-0.09535,0.07347, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.27e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.85,0.87,0.96 1.0,1.1,1.4,1.6,1.7 1.8,1.9,2.1,2.4), mean=1.38, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.21 0.23,0.27,0.36,0.41,0.44 0.46,0.48,0.49,0.59), mean=0.348, stddev=0.0823], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003,0.004 0.004,0.004,0.004,0.005), mean=0.00291, stddev=0.000489], oderiv-count=1.86374e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.83,0.86,1.0 1.1,1.2,1.4,1.6,1.7 1.9,2.0,2.1,2.3), mean=1.41, stddev=0.283], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.7,2.9 3.0,3.3,3.8,4.4,4.7 4.9,5.4,5.5,5.6), mean=3.87, stddev=0.66]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.312169, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1034, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.65, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.57,0.60,0.64 0.67,0.73,0.80,0.91,0.99 1.1,1.1,1.1,1.2), mean=0.818, stddev=0.121], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09485, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.56,0.65 0.68,0.76,1.0,1.3,1.5 1.5,1.5,1.6,1.6), mean=1.04, stddev=0.283], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.88,0.93 0.95,0.99,1.1,1.1,1.2 1.3,1.3,1.3,1.3), mean=1.07, stddev=0.099], bias-{mean,stddev}=-0.1171,0.1011, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.28e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.78,0.83,0.89 0.92,1.0,1.3,1.5,1.6 1.7,1.8,1.8,1.9), mean=1.29, stddev=0.255], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.15 0.17,0.20,0.31,0.42,0.44 0.46,0.48,0.49,0.50), mean=0.313, stddev=0.103], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.006,0.007,0.007 0.008,0.009,0.009,0.01), mean=0.00593, stddev=0.00117], oderiv-count=614720
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.78,0.83,0.88 0.92,1.1,1.3,1.5,1.6 1.8,1.8,1.9,2.1), mean=1.32, stddev=0.273], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.1,3.3,3.4,3.5 3.6,3.8,4.5,5.1,5.4 5.7,6.1,6.3,7.2), mean=4.49, stddev=0.735]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.312169, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.005, max-change=0.75, params-rms=0.1279, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.45, stddev=0.00623], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.80,0.81,0.84 0.88,0.92,1.0,1.1,1.1 1.2,1.2,1.3,1.3), mean=1.02, stddev=0.109], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2171, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.6,1.6,1.7,1.8,1.9 1.9,2.0,2.0,2.0), mean=1.73, stddev=0.128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.2,2.2,2.2 2.3,2.3,2.4,2.6,2.7 2.7,2.7,2.8,2.8), mean=2.45, stddev=0.146], bias-{mean,stddev}=-0.03021,0.1289, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,1.9 2.0,2.1,2.3,2.6,2.7 2.8,3.0,3.0,3.1), mean=2.34, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.35 0.36,0.37,0.39,0.42,0.43 0.44,0.46,0.47,0.47), mean=0.393, stddev=0.0297], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0101, stddev=0.00128], oderiv-count=622336
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.0 2.0,2.1,2.4,2.6,2.8 2.9,3.0,3.1,3.2), mean=2.39, stddev=0.287], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.8,5.0,5.2,5.6 5.9,6.1,6.8,7.6,8.1 8.7,9.5,9.9,12), mean=6.95, stddev=1.06]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, params-rms=0.2871, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.2,3.2,3.2,3.2 3.2,3.2,3.2,3.3,3.3 3.3,3.3,3.3,3.3), mean=3.25, stddev=0.00478], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.8,1.9 2.0,2.1,2.3,2.5,2.6 2.6,2.7,2.7,2.8), mean=2.28, stddev=0.235], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-08,-7e-08,-4e-08,-3e-08 -2e-08,-2e-08,1e-09,2e-08,3e-08 3e-08,5e-08,5e-08,6e-08), mean=3.74e-09, stddev=2.27e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.5,3.5,3.5,3.6 3.6,3.7,4.0,4.1,4.2 4.3,4.4,4.8,4.9), mean=3.97, stddev=0.271]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00614879, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2254, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.15,0.22,0.50 0.79,1.1,1.8,2.2,2.4 2.5,2.6,2.7,3.4), mean=1.7, stddev=0.608], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,13 13,14,14,15,15 16,17,17,17), mean=14.3, stddev=0.964], bias-{mean,stddev}=0.001121,0.3018, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1586, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.85,0.87,1.1 1.2,1.2,1.3,1.3,1.4 1.4,1.4,1.4,1.7), mean=1.26, stddev=0.109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.8,1.9,1.9 2.0,2.0,2.0,2.2), mean=1.79, stddev=0.116], bias-{mean,stddev}=-0.07283,0.2264, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.05e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.76,0.78,0.80 0.88,0.94,1.2,1.4,1.6 1.7,1.8,1.9,2.1), mean=1.19, stddev=0.271], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.37,0.39 0.40,0.44,0.48,0.53,0.57 0.58,0.61,0.64,0.68), mean=0.482, stddev=0.0614], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.005,0.005,0.006 0.006,0.006,0.007,0.01), mean=0.00503, stddev=0.00078], oderiv-count=613632
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.75,0.80,0.81 0.85,0.92,1.2,1.4,1.5 1.6,1.8,1.8,2.0), mean=1.19, stddev=0.267], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.5,1.6,1.8,2.0,2.1 2.1,2.2,2.2,2.8), mean=1.8, stddev=0.243]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00614879, l2-regularize=0.0005, max-change=0.75, params-rms=0.1536, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.74, stddev=0.0012], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.96,0.97,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.22, stddev=0.118], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-4e-08 -3e-08,-3e-08,-3e-09,1e-08,2e-08 4e-08,4e-08,4e-08,6e-08), mean=-3.39e-09, stddev=2.28e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.7,1.8,1.9,2.0 2.0,2.1,2.1,2.2), mean=1.84, stddev=0.118]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0307439, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1876, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.07,0.25 0.67,0.95,1.4,1.9,2.1 2.2,2.4,2.4,3.4), mean=1.39, stddev=0.556], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 12,12,12,12,12 12,12,12,12), mean=11.9, stddev=0.217], bias-{mean,stddev}=3.854e-08,0.2333, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,5e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000775, stddev=0.0012], oderiv-count=613632
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/122.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/123.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.33237 tdnnf2.linear:5.31803 tdnnf2.affine:6.01462 tdnnf3.linear:4.53329 tdnnf3.affine:5.20738 tdnnf4.linear:4.17036 tdnnf4.affine:5.15694 tdnnf5.linear:4.05902 tdnnf5.affine:4.90348 tdnnf6.linear:3.65494 tdnnf6.affine:4.15143 tdnnf7.linear:3.47172 tdnnf7.affine:3.91699 tdnnf8.linear:3.33497 tdnnf8.affine:3.79461 tdnnf9.linear:3.34237 tdnnf9.affine:3.83557 tdnnf10.linear:3.43152 tdnnf10.affine:4.05104 tdnnf11.linear:3.54027 tdnnf11.affine:4.25212 tdnnf12.linear:3.59108 tdnnf12.affine:4.37753 tdnnf13.linear:4.06269 tdnnf13.affine:4.84646 prefinal-l:3.30157 prefinal-chain.affine:5.50388 prefinal-chain.linear:4.77318 output.affine:15.2482 prefinal-xent.affine:3.0382 prefinal-xent.linear:1.90831 output-xent.affine:13.3307 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.8585 tdnnf2.linear:17.5092 tdnnf2.affine:17.6049 tdnnf3.linear:15.229 tdnnf3.affine:15.3046 tdnnf4.linear:14.1602 tdnnf4.affine:15.3426 tdnnf5.linear:13.2885 tdnnf5.affine:14.0659 tdnnf6.linear:12.6056 tdnnf6.affine:12.376 tdnnf7.linear:12.8164 tdnnf7.affine:12.235 tdnnf8.linear:13.2562 tdnnf8.affine:12.374 tdnnf9.linear:13.3975 tdnnf9.affine:12.4743 tdnnf10.linear:13.9706 tdnnf10.affine:12.7729 tdnnf11.linear:13.4631 tdnnf11.affine:12.4814 tdnnf12.linear:13.0187 tdnnf12.affine:12.1766 tdnnf13.linear:13.2328 tdnnf13.affine:12.2666 prefinal-l:11.576 prefinal-chain.affine:19.7054 prefinal-chain.linear:25.9832 output.affine:116.227 prefinal-xent.affine:14.6058 prefinal-xent.linear:13.902 output-xent.affine:96.548 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.336725 tdnnf2.linear:0.305781 tdnnf2.affine:0.344792 tdnnf3.linear:0.298998 tdnnf3.affine:0.342211 tdnnf4.linear:0.296234 tdnnf4.affine:0.337793 tdnnf5.linear:0.306263 tdnnf5.affine:0.350234 tdnnf6.linear:0.289953 tdnnf6.affine:0.335596 tdnnf7.linear:0.270405 tdnnf7.affine:0.319312 tdnnf8.linear:0.251175 tdnnf8.affine:0.305834 tdnnf9.linear:0.249208 tdnnf9.affine:0.306795 tdnnf10.linear:0.245329 tdnnf10.affine:0.316333 tdnnf11.linear:0.262219 tdnnf11.affine:0.339483 tdnnf12.linear:0.274957 tdnnf12.affine:0.358275 tdnnf13.linear:0.308007 tdnnf13.affine:0.395248 prefinal-l:0.287791 prefinal-chain.affine:0.278958 prefinal-chain.linear:0.183771 output.affine:0.131445 prefinal-xent.affine:0.208202 prefinal-xent.linear:0.137294 output-xent.affine:0.137845 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 09:08:23 CST 2020, elapsed time 3 seconds
