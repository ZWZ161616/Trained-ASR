# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/176.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/175.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/176.mdl 
# Started at Mon Feb 24 10:26:00 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/176.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1544, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.4,1.6 1.7,1.8,2.1,2.6,3.1 3.2,3.4,3.5,3.7), mean=2.23, stddev=0.512], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.62,0.64,0.71 0.78,0.94,1.6,2.1,2.6 2.8,3.0,3.2,3.8), mean=1.62, stddev=0.665], bias-{mean,stddev}=-0.1581,0.2216, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.91e+06, self-repaired-proportion=0.0235837, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.009,0.02 0.03,0.05,0.10,0.20,0.24 0.32,0.36,0.37,0.43), mean=0.128, stddev=0.0936], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.05,0.08 0.12,0.17,0.29,0.50,0.63 0.74,0.78,0.79,0.81), mean=0.339, stddev=0.198], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.07,0.08,0.08,0.17), mean=0.0421, stddev=0.0202], oderiv-count=1.29355e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.004,0.006,0.02 0.03,0.05,0.10,0.20,0.24 0.34,0.37,0.38,0.45), mean=0.129, stddev=0.0979], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.04,0.04,0.09 0.11,0.15,0.22,0.29,0.31 0.33,0.34,0.35,0.36), mean=0.216, stddev=0.0802]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.444444, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1269, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=2.03, stddev=0.00249], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.76,0.78,0.82 0.86,0.91,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.01, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1236, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.1,1.1,1.1 1.2,1.3,1.4,1.5,1.6 1.7,1.7,1.8,1.8), mean=1.39, stddev=0.157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.3,1.3,1.4,1.5,1.5 1.6,1.6,1.6,1.7), mean=1.39, stddev=0.103], bias-{mean,stddev}=-0.1822,0.1124, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.71e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.2,1.4 1.5,1.6,1.9,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.87, stddev=0.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.36,0.39 0.40,0.46,0.54,0.58,0.59 0.60,0.60,0.60,0.62), mean=0.518, stddev=0.0671], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.004,0.004,0.005,0.007), mean=0.00173, stddev=0.000962], oderiv-count=1.20113e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.99,1.1,1.4 1.5,1.6,1.9,2.0,2.2 2.2,2.3,2.4,2.6), mean=1.84, stddev=0.283], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.9,2.0,2.1 2.2,2.5,2.9,3.3,3.6 3.8,4.0,4.1,4.2), mean=2.91, stddev=0.517]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.444444, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1098, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.76, stddev=0.00463], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.67,0.71,0.73 0.75,0.79,0.87,0.95,0.99 1.0,1.1,1.1,1.2), mean=0.874, stddev=0.0939], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1099, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.82,0.89,0.96 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.24, stddev=0.139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.24, stddev=0.0987], bias-{mean,stddev}=-0.1768,0.09272, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.83e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.4,1.5 1.7,1.8,2.1,2.2,2.4 2.4,2.5,2.5,2.7), mean=2.03, stddev=0.266], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.42 0.45,0.47,0.52,0.56,0.57 0.58,0.58,0.59,0.59), mean=0.514, stddev=0.0504], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0008,0.0009,0.001,0.002 0.003,0.004,0.004,0.005), mean=0.0012, stddev=0.000763], oderiv-count=1.08013e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.4,1.5 1.7,1.8,2.0,2.2,2.4 2.4,2.5,2.5,2.7), mean=2.01, stddev=0.271], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.8,2.1,2.4 2.6,2.7,3.2,3.6,3.9 4.0,4.3,4.4,4.6), mean=3.2, stddev=0.527]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.444444, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1067, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.69,0.72 0.74,0.77,0.85,0.91,0.95 0.99,1.0,1.1,1.2), mean=0.849, stddev=0.0847], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.71,0.87,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.22, stddev=0.139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,1.0,1.0 1.1,1.1,1.2,1.3,1.4 1.5,1.5,1.5,1.9), mean=1.22, stddev=0.145], bias-{mean,stddev}=-0.1782,0.1067, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.51e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.94,1.1,1.8 1.9,2.1,2.3,2.6,2.8 2.8,3.0,3.0,3.2), mean=2.31, stddev=0.377], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.41 0.43,0.46,0.50,0.55,0.56 0.57,0.57,0.59,0.60), mean=0.502, stddev=0.049], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0005 0.0006,0.0006,0.0007,0.0008,0.001 0.002,0.002,0.003,0.006), mean=0.000877, stddev=0.000673], oderiv-count=1.01904e+07
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,1.0,1.2,1.8 1.9,2.0,2.3,2.6,2.7 2.9,3.0,3.0,3.1), mean=2.3, stddev=0.37], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.7,2.8 3.0,3.2,3.6,4.1,4.4 5.1,5.4,5.4,5.8), mean=3.67, stddev=0.717]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.444444, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09856, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.58, stddev=0.00176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.62,0.64,0.65 0.68,0.73,0.78,0.85,0.89 0.92,0.95,0.97,1.0), mean=0.785, stddev=0.0785], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09918, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.62,0.69,0.92 0.98,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.5), mean=1.11, stddev=0.129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.93,0.96 0.97,1.0,1.1,1.2,1.3 1.3,1.3,1.4,1.4), mean=1.12, stddev=0.108], bias-{mean,stddev}=-0.1478,0.07498, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.99,1.0,1.8 1.9,2.0,2.2,2.4,2.6 2.7,2.8,2.9,2.9), mean=2.19, stddev=0.325], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.46,0.48,0.52,0.55,0.56 0.57,0.58,0.58,0.59), mean=0.513, stddev=0.0412], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0006,0.0007,0.0007,0.0009,0.001 0.001,0.001,0.003,0.004), mean=0.000833, stddev=0.000457], oderiv-count=8.94733e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,1.0,1.1,1.7 1.9,2.0,2.1,2.4,2.6 2.6,2.8,2.8,3.1), mean=2.17, stddev=0.333], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.5,1.9,2.7 2.9,3.0,3.3,3.7,4.0 4.2,4.4,4.7,5.6), mean=3.37, stddev=0.544]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.444444, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.49, stddev=0.00229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.55,0.59,0.62 0.64,0.68,0.74,0.80,0.84 0.88,0.90,0.92,0.96), mean=0.741, stddev=0.078], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08921, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.68,0.71,0.83 0.88,0.93,1.0,1.1,1.1 1.2,1.2,1.2,1.4), mean=1, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.80,0.82,0.86 0.89,0.92,0.99,1.1,1.1 1.2,1.2,1.2,1.3), mean=1, stddev=0.0998], bias-{mean,stddev}=-0.1438,0.06249, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,1.2,1.3,1.4 1.6,1.7,1.9,2.1,2.2 2.3,2.3,2.3,2.4), mean=1.87, stddev=0.253], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.41,0.43 0.45,0.47,0.50,0.53,0.54 0.56,0.57,0.58,0.62), mean=0.499, stddev=0.0414], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.002,0.003), mean=0.000942, stddev=0.000235], oderiv-count=7.89101e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.2,1.3,1.4 1.6,1.6,1.9,2.1,2.2 2.2,2.4,2.4,2.5), mean=1.86, stddev=0.26], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,2.1,2.2,2.3 2.4,2.6,2.8,3.2,3.4 3.5,3.7,3.7,4.0), mean=2.88, stddev=0.396]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.444444, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09371, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.5, stddev=0.00176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.60,0.62 0.66,0.68,0.74,0.82,0.85 0.87,0.90,0.91,0.92), mean=0.746, stddev=0.0763], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08917, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.67,0.81 0.86,0.91,1.0,1.1,1.1 1.2,1.2,1.2,1.4), mean=1, stddev=0.118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.84,0.86 0.88,0.92,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1, stddev=0.0961], bias-{mean,stddev}=-0.1298,0.06478, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.79e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,1.2,1.4 1.6,1.7,1.9,2.0,2.2 2.3,2.4,2.4,2.6), mean=1.87, stddev=0.276], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.36,0.42 0.43,0.45,0.48,0.51,0.52 0.54,0.55,0.55,0.57), mean=0.48, stddev=0.0414], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.000949, stddev=0.000189], oderiv-count=6.74765e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,1.1,1.4 1.6,1.7,1.8,2.0,2.2 2.3,2.4,2.5,2.6), mean=1.85, stddev=0.275], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.0,2.3,2.4 2.5,2.6,2.9,3.2,3.5 3.7,3.9,4.0,4.3), mean=2.95, stddev=0.412]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.444444, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09715, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.59,0.64 0.66,0.71,0.77,0.84,0.87 0.91,0.94,0.97,1.0), mean=0.773, stddev=0.0842], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0905, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.64,0.74 0.83,0.91,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.01, stddev=0.146], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.81,0.81,0.85 0.89,0.93,1.0,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.02, stddev=0.107], bias-{mean,stddev}=-0.09962,0.08162, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.85e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.95,0.99,1.3 1.6,1.7,1.9,2.1,2.3 2.5,2.7,2.7,2.8), mean=1.91, stddev=0.345], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.40 0.41,0.44,0.47,0.49,0.51 0.52,0.52,0.53,0.65), mean=0.462, stddev=0.0462], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0008 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.000972, stddev=0.000164], oderiv-count=5.95667e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.99,1.0,1.4 1.5,1.7,1.9,2.1,2.4 2.6,2.7,2.7,2.9), mean=1.91, stddev=0.349], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.4,2.4,2.6 2.6,2.8,3.1,3.5,3.8 4.1,4.3,4.3,4.8), mean=3.18, stddev=0.467]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.444444, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.61,0.61,0.64 0.68,0.72,0.79,0.89,0.93 0.96,1.0,1.0,1.1), mean=0.803, stddev=0.0957], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09275, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.61,0.63,0.70 0.81,0.92,1.0,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.04, stddev=0.16], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.80,0.82,0.85 0.89,0.95,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.04, stddev=0.114], bias-{mean,stddev}=-0.08242,0.06404, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.3e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.4 1.5,1.7,1.9,2.1,2.4 2.4,2.5,2.6,2.8), mean=1.91, stddev=0.329], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.31,0.38 0.41,0.43,0.46,0.48,0.49 0.49,0.50,0.51,0.52), mean=0.45, stddev=0.0392], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.001,0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.0011, stddev=0.000151], oderiv-count=4.85568e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.4 1.5,1.7,1.9,2.2,2.3 2.5,2.6,2.6,2.8), mean=1.93, stddev=0.333], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.6,2.8 2.9,3.0,3.3,3.6,3.9 4.1,4.7,4.9,5.1), mean=3.37, stddev=0.471]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.444444, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1028, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.7 1.7,1.7,1.7,1.7), mean=1.64, stddev=0.00493], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.61,0.62,0.66 0.68,0.72,0.81,0.91,0.96 1.0,1.1,1.1,1.1), mean=0.815, stddev=0.106], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09349, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.70,0.75 0.86,0.92,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.05, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.77,0.83,0.87 0.91,0.96,1.0,1.1,1.2 1.2,1.3,1.4,1.4), mean=1.05, stddev=0.119], bias-{mean,stddev}=-0.07813,0.0526, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.69e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,1.2,1.4 1.5,1.7,1.8,2.0,2.1 2.2,2.3,2.3,2.4), mean=1.82, stddev=0.243], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.34,0.36 0.38,0.41,0.44,0.46,0.48 0.49,0.49,0.49,0.51), mean=0.433, stddev=0.0417], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00134, stddev=0.000169], oderiv-count=3.79379e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.94,1.3,1.4 1.5,1.7,1.8,2.0,2.1 2.2,2.2,2.3,2.4), mean=1.82, stddev=0.24], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.7,2.7,2.9 3.0,3.1,3.5,3.9,4.1 4.7,5.1,5.2,5.5), mean=3.54, stddev=0.565]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.444444, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1008, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.61, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.62,0.64 0.66,0.70,0.79,0.89,0.96 0.99,1.0,1.1,1.1), mean=0.799, stddev=0.11], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09228, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.49,0.60,0.70 0.78,0.85,1.0,1.2,1.3 1.3,1.3,1.4,1.4), mean=1.02, stddev=0.199], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.81,0.83,0.88 0.89,0.95,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.102], bias-{mean,stddev}=-0.08778,0.06106, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.96e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.99,1.1,1.2 1.3,1.4,1.6,1.7,1.8 1.9,1.9,2.0,2.3), mean=1.58, stddev=0.214], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.26,0.30 0.33,0.37,0.41,0.45,0.47 0.48,0.49,0.49,0.50), mean=0.404, stddev=0.0543], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00182, stddev=0.000219], oderiv-count=2.81619e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.98,1.0,1.2 1.3,1.4,1.6,1.8,1.8 1.9,1.9,1.9,2.4), mean=1.58, stddev=0.214], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.5,2.6,2.8 3.0,3.1,3.6,4.2,4.6 4.8,5.1,5.2,6.0), mean=3.68, stddev=0.652]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.444444, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09992, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.56,0.59,0.63 0.65,0.69,0.79,0.88,0.94 0.99,1.0,1.0,1.1), mean=0.792, stddev=0.109], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09267, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.60,0.60,0.71 0.76,0.82,1.0,1.2,1.3 1.4,1.4,1.4,1.4), mean=1.03, stddev=0.213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.83,0.83,0.86 0.90,0.96,1.0,1.1,1.2 1.2,1.3,1.4,1.5), mean=1.04, stddev=0.119], bias-{mean,stddev}=-0.099,0.07666, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.17e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.92,0.96,1.1 1.1,1.2,1.4,1.6,1.7 1.8,1.9,2.0,2.5), mean=1.43, stddev=0.245], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.24 0.28,0.30,0.38,0.44,0.47 0.48,0.51,0.52,0.57), mean=0.374, stddev=0.0781], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.003,0.004,0.004), mean=0.00265, stddev=0.000348], oderiv-count=1.8311e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.86,0.90,1.0 1.2,1.2,1.4,1.6,1.7 1.8,2.0,2.0,2.6), mean=1.43, stddev=0.251], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.7,2.9 3.0,3.3,4.1,4.8,5.2 5.4,5.7,6.0,6.2), mean=4.1, stddev=0.841]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.444444, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.00612], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.62,0.66 0.69,0.74,0.83,0.94,0.98 1.0,1.0,1.0,1.1), mean=0.836, stddev=0.109], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09699, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.62,0.62,0.68 0.79,0.89,1.1,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.08, stddev=0.216], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.92,0.92,0.94 0.97,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.09, stddev=0.0983], bias-{mean,stddev}=-0.1036,0.1025, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.16e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.86,0.96 1.1,1.3,1.4,1.6,1.7 1.8,1.9,2.0,2.1), mean=1.42, stddev=0.232], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.16,0.18 0.23,0.30,0.36,0.44,0.48 0.48,0.50,0.51,0.56), mean=0.36, stddev=0.0912], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.005,0.006,0.006 0.007,0.007,0.008,0.009), mean=0.0053, stddev=0.000747], oderiv-count=615808
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,1.0 1.1,1.3,1.5,1.6,1.7 1.8,1.9,2.0,2.2), mean=1.45, stddev=0.233], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,3.2,3.2,3.4 3.8,4.1,4.7,5.6,6.1 6.3,6.6,6.6,6.8), mean=4.81, stddev=0.86]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.444444, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.005, max-change=0.75, params-rms=0.1348, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.53, stddev=0.0106], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.84,0.84,0.91 0.94,0.99,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.07, stddev=0.103], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.4 1.4,1.5,1.6,1.8,1.8 1.9,1.9,1.9,2.0), mean=1.63, stddev=0.148], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.1,2.1 2.1,2.2,2.3,2.4,2.5 2.6,2.6,2.6,2.7), mean=2.31, stddev=0.146], bias-{mean,stddev}=-0.07213,0.1217, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.0,2.0,2.1 2.2,2.2,2.5,2.8,3.0 3.1,3.2,3.2,3.6), mean=2.53, stddev=0.32], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.34 0.35,0.36,0.39,0.41,0.43 0.44,0.46,0.46,0.47), mean=0.39, stddev=0.0318], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0094, stddev=0.00121], oderiv-count=599488
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.0,2.1 2.2,2.3,2.5,2.8,3.1 3.2,3.3,3.3,3.9), mean=2.57, stddev=0.348], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.7,6.0,6.1,6.2 6.5,6.8,7.7,8.6,9.1 9.6,11,11,14), mean=7.79, stddev=1.19]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, params-rms=0.3058, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,3.4,3.4,3.4 3.4,3.4,3.5,3.5,3.5 3.5,3.5,3.5,3.5), mean=3.46, stddev=0.0136], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.7,1.8,2.0 2.1,2.2,2.4,2.7,2.8 2.9,2.9,3.0,3.0), mean=2.43, stddev=0.288], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-4e-08 -3e-08,-3e-08,-2e-09,2e-08,4e-08 5e-08,5e-08,5e-08,5e-08), mean=-4.53e-10, stddev=2.77e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.7,3.7,3.7,3.8 3.8,4.0,4.2,4.4,4.6 4.7,4.8,5.1,5.2), mean=4.22, stddev=0.311]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00417384, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2364, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.15,0.25,0.55 0.89,1.3,2.0,2.3,2.4 2.5,2.7,2.8,3.6), mean=1.79, stddev=0.604], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(13,13,13,14 14,14,15,16,16 17,17,18,18), mean=15, stddev=1.06], bias-{mean,stddev}=0.001342,0.3436, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.151, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.74,0.74,1.0 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.4,1.6), mean=1.2, stddev=0.11], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.6,1.6,1.7,1.8,1.9 1.9,2.0,2.0,2.0), mean=1.7, stddev=0.127], bias-{mean,stddev}=-0.1064,0.1895, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.94,0.94,0.97 1.0,1.1,1.3,1.5,1.7 1.8,2.0,2.0,2.2), mean=1.32, stddev=0.259], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.37,0.40 0.43,0.44,0.48,0.53,0.56 0.59,0.62,0.65,0.68), mean=0.486, stddev=0.0597], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.004,0.004,0.005,0.005 0.005,0.006,0.006,0.008), mean=0.00462, stddev=0.000603], oderiv-count=612544
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.90,0.90,0.94 0.98,1.1,1.3,1.5,1.7 1.8,2.0,2.0,2.1), mean=1.32, stddev=0.273], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.8,2.0,2.2,2.3 2.4,2.6,2.7,4.2), mean=1.99, stddev=0.324]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00417384, l2-regularize=0.0005, max-change=0.75, params-rms=0.1505, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.7, stddev=0.000846], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.80,0.95,0.99 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.2, stddev=0.129], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-4e-08,-3e-08 -3e-08,-2e-08,-2e-09,1e-08,2e-08 3e-08,4e-08,4e-08,8e-08), mean=-2.23e-09, stddev=2.2e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.6,1.7,1.8,1.9,1.9 2.0,2.1,2.1,2.1), mean=1.79, stddev=0.12]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0208692, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.182, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.25 0.61,0.91,1.4,1.8,2.0 2.2,2.3,2.3,3.2), mean=1.35, stddev=0.545], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,11,12,12,12 12,12,12,12), mean=11.6, stddev=0.236], bias-{mean,stddev}=1.18e-09,0.263, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,5e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000768, stddev=0.0012], oderiv-count=615808
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/175.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/176.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.69773 tdnnf2.linear:5.03366 tdnnf2.affine:5.56385 tdnnf3.linear:4.30953 tdnnf3.affine:4.94852 tdnnf4.linear:4.15938 tdnnf4.affine:4.82906 tdnnf5.linear:3.79215 tdnnf5.affine:4.42784 tdnnf6.linear:3.47 tdnnf6.affine:3.88137 tdnnf7.linear:3.28515 tdnnf7.affine:3.72424 tdnnf8.linear:3.19981 tdnnf8.affine:3.67598 tdnnf9.linear:3.32628 tdnnf9.affine:3.83045 tdnnf10.linear:3.33 tdnnf10.affine:4.01629 tdnnf11.linear:3.43862 tdnnf11.affine:4.16171 tdnnf12.linear:3.67484 tdnnf12.affine:4.41569 tdnnf13.linear:4.06264 tdnnf13.affine:4.96766 prefinal-l:4.2116 prefinal-chain.affine:5.16304 prefinal-chain.linear:5.68554 output.affine:15.5283 prefinal-xent.affine:2.80003 prefinal-xent.linear:1.84923 output-xent.affine:12.8903 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.0934 tdnnf2.linear:16.247 tdnnf2.affine:16.0049 tdnnf3.linear:14.0568 tdnnf3.affine:14.2486 tdnnf4.linear:13.6554 tdnnf4.affine:14.0878 tdnnf5.linear:12.6157 tdnnf5.affine:12.8323 tdnnf6.linear:11.9256 tdnnf6.affine:11.556 tdnnf7.linear:11.9954 tdnnf7.affine:11.531 tdnnf8.linear:12.435 tdnnf8.affine:11.6748 tdnnf9.linear:12.9313 tdnnf9.affine:11.9304 tdnnf10.linear:13.1526 tdnnf10.affine:12.0146 tdnnf11.linear:12.9048 tdnnf11.affine:11.8739 tdnnf12.linear:12.7897 tdnnf12.affine:11.9462 tdnnf13.linear:13.49 tdnnf13.affine:12.5239 prefinal-l:12.2018 prefinal-chain.affine:18.5945 prefinal-chain.linear:27.6757 output.affine:122.191 prefinal-xent.affine:13.8849 prefinal-xent.linear:13.6239 output-xent.affine:94.0279 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.36999 tdnnf2.linear:0.308454 tdnnf2.affine:0.346756 tdnnf3.linear:0.305453 tdnnf3.affine:0.345939 tdnnf4.linear:0.303182 tdnnf4.affine:0.342187 tdnnf5.linear:0.298834 tdnnf5.affine:0.342291 tdnnf6.linear:0.290874 tdnnf6.affine:0.335488 tdnnf7.linear:0.272607 tdnnf7.affine:0.321683 tdnnf8.linear:0.256216 tdnnf8.affine:0.314265 tdnnf9.linear:0.256893 tdnnf9.affine:0.320623 tdnnf10.linear:0.252319 tdnnf10.affine:0.334096 tdnnf11.linear:0.266622 tdnnf11.affine:0.350912 tdnnf12.linear:0.286402 tdnnf12.affine:0.369042 tdnnf13.linear:0.300603 tdnnf13.affine:0.39694 prefinal-l:0.34458 prefinal-chain.affine:0.277958 prefinal-chain.linear:0.205957 output.affine:0.127123 prefinal-xent.affine:0.201587 prefinal-xent.linear:0.135331 output-xent.affine:0.136947 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 10:26:03 CST 2020, elapsed time 3 seconds
