# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/102.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/101.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/102.mdl 
# Started at Mon Feb 24 08:37:05 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/102.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1427, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.3 1.4,1.7,2.0,2.4,2.7 3.0,3.3,3.3,3.4), mean=2.06, stddev=0.49], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.52,0.57,0.64 0.72,0.86,1.5,1.9,2.4 2.6,2.7,2.8,3.5), mean=1.5, stddev=0.604], bias-{mean,stddev}=-0.1371,0.2028, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.8e+06, self-repaired-proportion=0.0932965, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.004 0.007,0.04,0.10,0.19,0.24 0.29,0.33,0.37,0.41), mean=0.122, stddev=0.0917], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.02,0.03 0.05,0.14,0.31,0.50,0.66 0.71,0.81,0.82,0.82), mean=0.337, stddev=0.211], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.09 0.11,0.14,0.14,0.20), mean=0.0505, stddev=0.0314], oderiv-count=1.30044e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.003,0.003 0.007,0.04,0.11,0.19,0.25 0.29,0.31,0.37,0.40), mean=0.121, stddev=0.0919], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.03 0.04,0.12,0.21,0.28,0.30 0.33,0.34,0.35,0.35), mean=0.199, stddev=0.0909]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.201058, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1394, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.2,2.2,2.2 2.2,2.2,2.2,2.2,2.2 2.2,2.2,2.2,2.2), mean=2.23, stddev=0.00345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.62,0.75 0.83,0.96,1.1,1.2,1.3 1.3,1.4,1.5,1.7), mean=1.1, stddev=0.186], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1375, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.1,1.2,1.3 1.4,1.4,1.5,1.7,1.8 1.8,2.0,2.0,2.2), mean=1.54, stddev=0.182], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.4 1.4,1.4,1.5,1.6,1.7 1.8,1.8,1.8,1.8), mean=1.55, stddev=0.121], bias-{mean,stddev}=-0.156,0.09797, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.77e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.1,1.2,1.4 1.6,1.7,1.9,2.1,2.3 2.4,2.4,2.4,3.0), mean=1.93, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.39 0.41,0.44,0.54,0.58,0.59 0.60,0.60,0.60,0.61), mean=0.516, stddev=0.0698], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.005,0.005,0.006), mean=0.00166, stddev=0.000853], oderiv-count=1.20961e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.4 1.6,1.7,1.9,2.1,2.3 2.3,2.4,2.5,3.0), mean=1.91, stddev=0.293], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.6,1.9,2.2 2.4,2.7,3.0,3.5,3.6 3.7,3.9,3.9,4.2), mean=3.03, stddev=0.496]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.201058, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.121, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,2.0), mean=1.94, stddev=0.00606], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.70,0.76,0.79 0.84,0.87,0.96,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.962, stddev=0.105], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1195, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.0,1.0,1.1 1.2,1.2,1.3,1.4,1.5 1.6,1.7,1.8,1.8), mean=1.34, stddev=0.153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.3,1.3,1.4,1.5 1.5,1.5,1.5,1.6), mean=1.35, stddev=0.0986], bias-{mean,stddev}=-0.1319,0.05626, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.47e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.6 1.7,1.8,2.0,2.2,2.3 2.4,2.4,2.4,2.6), mean=2.01, stddev=0.226], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.41,0.44 0.45,0.47,0.52,0.56,0.57 0.57,0.59,0.59,0.60), mean=0.514, stddev=0.0443], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.0009,0.001,0.001,0.001 0.002,0.003,0.004,0.005), mean=0.00119, stddev=0.000593], oderiv-count=1.1131e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.6 1.7,1.8,2.0,2.2,2.3 2.4,2.4,2.5,2.6), mean=1.99, stddev=0.231], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.3,2.5 2.6,2.8,3.2,3.5,3.7 3.9,4.2,4.2,4.6), mean=3.18, stddev=0.455]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.201058, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1097, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.76, stddev=0.00448], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.70,0.73,0.75 0.77,0.81,0.88,0.93,0.96 1.0,1.0,1.0,1.3), mean=0.874, stddev=0.0799], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1149, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.77,0.92,1.1 1.1,1.2,1.3,1.4,1.5 1.6,1.6,1.6,1.6), mean=1.29, stddev=0.157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.5), mean=1.3, stddev=0.102], bias-{mean,stddev}=-0.1578,0.07924, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.32e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.90,1.6,1.7 1.8,1.9,2.0,2.3,2.4 2.5,2.6,2.7,2.8), mean=2.07, stddev=0.289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.42,0.43 0.44,0.46,0.51,0.55,0.56 0.56,0.58,0.58,0.59), mean=0.506, stddev=0.0441], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0007,0.0007 0.0007,0.0008,0.0009,0.001,0.001 0.001,0.003,0.003,0.006), mean=0.001, stddev=0.000636], oderiv-count=1.02784e+07
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.94,1.5,1.6 1.7,1.8,2.1,2.3,2.4 2.5,2.7,2.7,2.8), mean=2.06, stddev=0.3], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.4,2.2,2.6 2.8,3.0,3.3,3.7,4.1 4.2,4.7,4.8,5.2), mean=3.35, stddev=0.577]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.201058, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.67, stddev=0.00301], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.67,0.70,0.71 0.74,0.77,0.83,0.89,0.93 0.97,0.98,1.0,1.1), mean=0.834, stddev=0.0738], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1086, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.69,0.90,1.1 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.22, stddev=0.138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.0,1.1 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.22, stddev=0.115], bias-{mean,stddev}=-0.1433,0.07412, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.72e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.94,1.3,1.7 1.8,1.9,2.1,2.3,2.5 2.5,2.6,2.7,3.0), mean=2.12, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.40,0.43 0.45,0.47,0.50,0.54,0.55 0.56,0.56,0.57,0.60), mean=0.5, stddev=0.041], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0007 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.002,0.006), mean=0.000908, stddev=0.000522], oderiv-count=8.97894e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.78,1.2,1.7 1.8,1.9,2.1,2.3,2.4 2.5,2.5,2.6,2.7), mean=2.08, stddev=0.301], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.9,2.7 2.8,2.9,3.3,3.7,3.9 4.3,4.6,4.6,5.2), mean=3.33, stddev=0.562]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.201058, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1003, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00301], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.61,0.64,0.67 0.70,0.73,0.79,0.87,0.90 0.92,0.94,0.96,0.99), mean=0.798, stddev=0.0768], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09691, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.79,0.88,0.93 0.95,0.98,1.1,1.2,1.2 1.3,1.4,1.4,1.5), mean=1.09, stddev=0.124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.91,0.91,0.93 0.98,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.09, stddev=0.0907], bias-{mean,stddev}=-0.133,0.05566, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.24e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,1.1,1.3,1.4 1.6,1.7,1.8,2.0,2.1 2.2,2.3,2.3,2.5), mean=1.83, stddev=0.247], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.39,0.43 0.44,0.46,0.50,0.53,0.54 0.55,0.56,0.57,0.58), mean=0.495, stddev=0.0404], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.00105, stddev=0.00023], oderiv-count=7.72282e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,1.0,1.3,1.4 1.6,1.6,1.8,2.0,2.1 2.2,2.4,2.4,2.4), mean=1.8, stddev=0.255], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.7,2.0,2.3 2.5,2.6,2.8,3.1,3.4 3.6,3.9,4.0,4.3), mean=2.87, stddev=0.419]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.201058, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1023, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.64, stddev=0.00189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.63,0.65,0.68 0.70,0.75,0.81,0.88,0.92 0.95,0.98,1.0,1.0), mean=0.814, stddev=0.0822], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09609, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.77,0.79,0.85 0.91,0.96,1.1,1.2,1.3 1.3,1.3,1.4,1.5), mean=1.08, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.88,0.91,0.93 0.95,0.98,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.08, stddev=0.108], bias-{mean,stddev}=-0.1207,0.05191, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.51e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.4 1.6,1.7,1.8,2.0,2.1 2.2,2.3,2.5,2.5), mean=1.82, stddev=0.251], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.39,0.41 0.43,0.46,0.48,0.51,0.52 0.54,0.55,0.56,0.57), mean=0.481, stddev=0.0381], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0009 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.00105, stddev=0.000166], oderiv-count=6.94323e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.2,1.4 1.5,1.6,1.8,2.0,2.2 2.2,2.4,2.4,2.7), mean=1.82, stddev=0.265], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.1,2.1,2.4 2.5,2.6,2.9,3.2,3.5 3.8,3.9,4.0,4.5), mean=2.93, stddev=0.437]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.201058, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1058, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.00362], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.63,0.68,0.71 0.73,0.77,0.84,0.90,0.95 1.0,1.0,1.1,1.1), mean=0.842, stddev=0.0867], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09763, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.70,0.71,0.83 0.92,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.09, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.83,0.85,0.90 0.96,1.0,1.1,1.2,1.2 1.3,1.3,1.4,1.4), mean=1.1, stddev=0.119], bias-{mean,stddev}=-0.09977,0.0552, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.94e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.5,1.7,1.8,2.1,2.3 2.5,2.7,2.7,2.9), mean=1.88, stddev=0.32], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.37,0.40 0.40,0.43,0.45,0.48,0.51 0.52,0.53,0.53,0.55), mean=0.457, stddev=0.0403], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00103, stddev=0.000138], oderiv-count=6.04013e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.3,1.4 1.5,1.7,1.9,2.1,2.4 2.5,2.8,2.8,3.1), mean=1.89, stddev=0.343], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.4,2.5,2.5 2.6,2.7,3.1,3.6,4.1 4.4,4.9,4.9,5.3), mean=3.22, stddev=0.599]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.201058, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1063, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.7, stddev=0.00478], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.63,0.64,0.66 0.70,0.75,0.84,0.93,0.98 1.0,1.1,1.1,1.1), mean=0.844, stddev=0.106], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09855, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.63,0.76 0.82,0.95,1.1,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.1, stddev=0.192], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.82,0.88,0.92 0.95,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.11, stddev=0.124], bias-{mean,stddev}=-0.08589,0.04938, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.27e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,1.0,1.1,1.3 1.5,1.7,1.9,2.1,2.4 2.4,2.6,2.6,2.6), mean=1.9, stddev=0.325], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.29,0.37 0.39,0.42,0.46,0.48,0.50 0.50,0.51,0.51,0.53), mean=0.447, stddev=0.0456], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00117, stddev=0.000166], oderiv-count=4.69152e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,1.0,1.1,1.3 1.5,1.7,1.9,2.1,2.3 2.5,2.6,2.7,2.8), mean=1.91, stddev=0.341], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.5,2.6 2.7,2.8,3.2,3.6,3.9 4.1,4.5,4.5,4.9), mean=3.27, stddev=0.497]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.201058, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0.00567], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.61,0.65,0.68 0.71,0.75,0.86,0.99,1.1 1.1,1.2,1.2,1.3), mean=0.874, stddev=0.137], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1015, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.60,0.61,0.73 0.80,0.92,1.1,1.4,1.4 1.4,1.5,1.5,1.5), mean=1.13, stddev=0.226], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.83,0.88,0.94 0.97,1.0,1.1,1.2,1.3 1.4,1.4,1.5,1.6), mean=1.14, stddev=0.14], bias-{mean,stddev}=-0.06375,0.04495, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.7e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,1.2,1.2,1.4 1.6,1.7,2.0,2.3,2.5 2.6,2.8,2.8,3.0), mean=2, stddev=0.362], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.27,0.35 0.38,0.40,0.44,0.46,0.48 0.48,0.49,0.49,0.51), mean=0.43, stddev=0.0473], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00133, stddev=0.000195], oderiv-count=3.99923e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,1.2,1.2,1.4 1.5,1.7,2.0,2.3,2.5 2.6,2.8,2.8,3.3), mean=1.99, stddev=0.378], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.9,2.9 3.1,3.2,3.5,4.0,4.2 4.6,4.9,5.0,5.7), mean=3.62, stddev=0.522]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.201058, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1068, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.61,0.63,0.66 0.69,0.73,0.81,0.96,1.0 1.1,1.2,1.2,1.3), mean=0.843, stddev=0.138], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09833, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.59,0.60,0.66 0.74,0.81,1.0,1.3,1.5 1.5,1.6,1.6,1.7), mean=1.08, stddev=0.266], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.83,0.87,0.91 0.95,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.11, stddev=0.11], bias-{mean,stddev}=-0.07955,0.0458, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.95e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.2,1.3 1.3,1.4,1.7,1.8,2.0 2.1,2.2,2.3,2.5), mean=1.66, stddev=0.266], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.24,0.29 0.32,0.35,0.40,0.43,0.45 0.45,0.46,0.47,0.49), mean=0.39, stddev=0.0515], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00192, stddev=0.000283], oderiv-count=2.85158e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.1,1.2 1.3,1.4,1.7,1.9,2.0 2.1,2.2,2.3,2.3), mean=1.65, stddev=0.27], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.8,2.8,2.8 2.9,3.1,3.5,4.0,4.2 4.6,4.7,4.8,5.2), mean=3.57, stddev=0.521]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.201058, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1029, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.65, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.59,0.63 0.66,0.70,0.79,0.92,1.0 1.1,1.1,1.2,1.3), mean=0.812, stddev=0.137], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09577, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.55,0.64 0.66,0.76,0.99,1.3,1.5 1.5,1.6,1.6,1.7), mean=1.04, stddev=0.298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.84,0.84,0.90 0.93,0.97,1.1,1.2,1.2 1.3,1.3,1.3,1.6), mean=1.08, stddev=0.125], bias-{mean,stddev}=-0.08621,0.06271, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.25e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.90,0.91,0.98 1.1,1.2,1.4,1.6,1.7 1.9,1.9,2.1,2.4), mean=1.41, stddev=0.281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.20 0.24,0.27,0.35,0.41,0.43 0.45,0.47,0.48,0.56), mean=0.341, stddev=0.081], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003,0.003 0.004,0.004,0.004,0.005), mean=0.00296, stddev=0.000515], oderiv-count=1.83437e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.88,0.94 1.0,1.1,1.4,1.6,1.7 1.9,1.9,2.1,2.4), mean=1.39, stddev=0.287], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.6,2.7,2.8 2.9,3.2,3.6,4.1,4.7 5.0,5.2,5.5,5.9), mean=3.71, stddev=0.672]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.201058, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.61, stddev=0.00176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.63 0.66,0.69,0.76,0.89,0.96 1.1,1.1,1.2,1.2), mean=0.793, stddev=0.127], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.53,0.54,0.58 0.66,0.72,0.94,1.3,1.5 1.5,1.5,1.6,1.6), mean=1.01, stddev=0.304], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.83,0.84,0.87 0.91,0.96,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.05, stddev=0.097], bias-{mean,stddev}=-0.1073,0.0898, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.19e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.78,0.80,0.84 0.88,0.96,1.2,1.5,1.6 1.7,1.8,1.8,2.0), mean=1.25, stddev=0.286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.16,0.19,0.30,0.40,0.43 0.45,0.47,0.47,0.51), mean=0.294, stddev=0.102], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.005,0.005,0.006,0.007,0.008 0.009,0.009,0.01,0.01), mean=0.00635, stddev=0.00132], oderiv-count=626688
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.76,0.77,0.82 0.88,0.95,1.2,1.5,1.6 1.7,1.7,1.8,1.9), mean=1.24, stddev=0.283], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,3.0,3.1,3.2 3.3,3.4,4.0,4.6,5.0 5.2,5.6,5.8,5.9), mean=4.11, stddev=0.683]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.201058, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.005, max-change=0.75, params-rms=0.1264, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.43, stddev=0.00846], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.72,0.72,0.81 0.85,0.91,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1, stddev=0.116], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2181, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.6,1.6,1.7,1.8,1.9 1.9,2.0,2.0,2.0), mean=1.74, stddev=0.123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.2 2.3,2.3,2.5,2.6,2.6 2.7,2.8,2.8,3.0), mean=2.46, stddev=0.164], bias-{mean,stddev}=-0.005356,0.1281, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.06e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.8,1.8 2.0,2.0,2.3,2.5,2.7 2.7,2.8,2.8,3.0), mean=2.27, stddev=0.262], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.35 0.36,0.37,0.39,0.42,0.43 0.44,0.45,0.46,0.47), mean=0.393, stddev=0.0282], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0103, stddev=0.00129], oderiv-count=629952
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.9 1.9,2.0,2.2,2.4,2.6 2.7,2.8,2.9,3.2), mean=2.24, stddev=0.266], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.3,4.4,4.8,4.9 5.2,5.4,6.0,6.9,7.7 8.0,8.5,8.7,9.3), mean=6.19, stddev=0.984]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, params-rms=0.2775, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.1,3.1,3.1,3.1 3.1,3.1,3.1,3.1,3.1 3.1,3.2,3.2,3.2), mean=3.14, stddev=0.00625], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.7,1.7,1.9 2.0,2.1,2.2,2.4,2.5 2.5,2.6,2.6,2.6), mean=2.21, stddev=0.204], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-3e-08 -3e-08,-2e-08,3e-10,2e-08,3e-08 3e-08,4e-08,6e-08,8e-08), mean=1.49e-09, stddev=2.35e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,3.4,3.4,3.5 3.6,3.6,3.9,4.0,4.1 4.3,4.3,4.5,4.7), mean=3.87, stddev=0.242]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00716896, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.15,0.22,0.48 0.75,1.1,1.7,2.1,2.3 2.4,2.5,2.6,3.2), mean=1.63, stddev=0.597], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,13 13,13,14,14,15 15,16,16,16), mean=13.7, stddev=0.93], bias-{mean,stddev}=0.0009991,0.2858, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1625, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.78,0.99,1.1 1.2,1.2,1.3,1.4,1.4 1.4,1.5,1.5,1.7), mean=1.3, stddev=0.112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.8,1.8,1.9,2.0 2.0,2.0,2.1,2.1), mean=1.84, stddev=0.111], bias-{mean,stddev}=-0.05326,0.2196, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.03e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.75,0.77,0.80 0.82,0.91,1.1,1.3,1.5 1.6,1.7,1.7,1.9), mean=1.15, stddev=0.257], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.37,0.39 0.40,0.43,0.47,0.52,0.55 0.57,0.59,0.60,0.67), mean=0.475, stddev=0.0588], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.005,0.005,0.006 0.006,0.007,0.007,0.01), mean=0.00505, stddev=0.000856], oderiv-count=613632
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.72,0.73,0.76 0.79,0.92,1.1,1.3,1.5 1.6,1.7,1.8,1.9), mean=1.15, stddev=0.257], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.6,1.8,1.9,2.0 2.1,2.1,2.2,2.3), mean=1.74, stddev=0.211]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00716896, l2-regularize=0.0005, max-change=0.75, params-rms=0.1546, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.75, stddev=0.00263], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.98,0.99,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.23, stddev=0.12], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-4e-08 -3e-08,-2e-08,-1e-09,2e-08,2e-08 3e-08,3e-08,3e-08,3e-08), mean=-1.4e-09, stddev=1.93e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.7,1.8,1.9,2.0,2.0 2.1,2.1,2.1,2.1), mean=1.86, stddev=0.119]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0358448, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1902, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.25 0.68,0.98,1.5,1.9,2.1 2.3,2.4,2.5,3.6), mean=1.41, stddev=0.561], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,12,12,12 12,12,12,12), mean=12.1, stddev=0.205], bias-{mean,stddev}=4.107e-08,0.218, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000778, stddev=0.00121], oderiv-count=604928
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/101.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/102.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.70425 tdnnf2.linear:5.16872 tdnnf2.affine:5.81068 tdnnf3.linear:4.42638 tdnnf3.affine:5.06111 tdnnf4.linear:3.96683 tdnnf4.affine:4.87192 tdnnf5.linear:3.80163 tdnnf5.affine:4.61222 tdnnf6.linear:3.54191 tdnnf6.affine:4.05015 tdnnf7.linear:3.38653 tdnnf7.affine:3.94876 tdnnf8.linear:3.20448 tdnnf8.affine:3.71559 tdnnf9.linear:3.24138 tdnnf9.affine:3.82679 tdnnf10.linear:3.33324 tdnnf10.affine:3.97228 tdnnf11.linear:3.45934 tdnnf11.affine:4.25214 tdnnf12.linear:3.66443 tdnnf12.affine:4.41679 tdnnf13.linear:3.93593 tdnnf13.affine:4.87039 prefinal-l:2.98521 prefinal-chain.affine:5.33485 prefinal-chain.linear:4.34659 output.affine:14.5101 prefinal-xent.affine:3.13188 prefinal-xent.linear:1.99376 output-xent.affine:13.7215 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.1138 tdnnf2.linear:17.8442 tdnnf2.affine:17.7214 tdnnf3.linear:15.4889 tdnnf3.affine:15.3865 tdnnf4.linear:14.0478 tdnnf4.affine:14.84 tdnnf5.linear:13.3919 tdnnf5.affine:14.0211 tdnnf6.linear:12.8332 tdnnf6.affine:12.5116 tdnnf7.linear:13.0942 tdnnf7.affine:12.3885 tdnnf8.linear:13.5451 tdnnf8.affine:12.5626 tdnnf9.linear:13.6105 tdnnf9.affine:12.6644 tdnnf10.linear:14.1617 tdnnf10.affine:13.0241 tdnnf11.linear:13.6692 tdnnf11.affine:12.6284 tdnnf12.linear:13.1712 tdnnf12.affine:12.3176 tdnnf13.linear:12.8518 tdnnf13.affine:12.0009 prefinal-l:11.4391 prefinal-chain.affine:19.7932 prefinal-chain.linear:25.113 output.affine:111.712 prefinal-xent.affine:14.9281 prefinal-xent.linear:13.9934 output-xent.affine:97.7147 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.318743 tdnnf2.linear:0.289033 tdnnf2.affine:0.326422 tdnnf3.linear:0.284544 tdnnf3.affine:0.326397 tdnnf4.linear:0.279499 tdnnf4.affine:0.323495 tdnnf5.linear:0.281023 tdnnf5.affine:0.324331 tdnnf6.linear:0.275264 tdnnf6.affine:0.322109 tdnnf7.linear:0.257895 tdnnf7.affine:0.318161 tdnnf8.linear:0.236282 tdnnf8.affine:0.295799 tdnnf9.linear:0.238152 tdnnf9.affine:0.302524 tdnnf10.linear:0.235513 tdnnf10.affine:0.30469 tdnnf11.linear:0.253044 tdnnf11.affine:0.336721 tdnnf12.linear:0.278782 tdnnf12.affine:0.358852 tdnnf13.linear:0.30742 tdnnf13.affine:0.40789 prefinal-l:0.260947 prefinal-chain.affine:0.269381 prefinal-chain.linear:0.173191 output.affine:0.130224 prefinal-xent.affine:0.209188 prefinal-xent.linear:0.14195 output-xent.affine:0.140227 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 08:37:08 CST 2020, elapsed time 3 seconds
