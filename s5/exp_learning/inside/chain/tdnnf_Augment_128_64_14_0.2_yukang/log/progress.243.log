# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/243.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/242.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/243.mdl 
# Started at Mon Feb 24 12:06:42 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/243.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1425, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.4,1.4,1.5 1.6,1.7,1.9,2.4,2.7 3.0,3.1,3.2,3.4), mean=2.06, stddev=0.453], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.63,0.68 0.75,0.86,1.5,1.9,2.3 2.6,2.7,2.9,3.3), mean=1.5, stddev=0.595], bias-{mean,stddev}=-0.1287,0.1976, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.57e+06, self-repaired-proportion=0.0185022, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.008,0.02 0.03,0.05,0.10,0.20,0.23 0.26,0.30,0.30,0.32), mean=0.119, stddev=0.0792], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.05,0.09 0.10,0.17,0.33,0.54,0.66 0.70,0.76,0.76,0.80), mean=0.351, stddev=0.194], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.07 0.08,0.10,0.10,0.16), mean=0.0445, stddev=0.0218], oderiv-count=1.32342e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.008,0.008,0.02 0.03,0.05,0.10,0.20,0.23 0.27,0.28,0.30,0.32), mean=0.12, stddev=0.0794], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.06,0.08 0.11,0.14,0.21,0.27,0.29 0.30,0.32,0.33,0.33), mean=0.201, stddev=0.0703]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.231746, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1189, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.9, stddev=0.00213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.72,0.74,0.77 0.80,0.85,0.94,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.945, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.119, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.97,1.0,1.1 1.2,1.2,1.3,1.5,1.5 1.6,1.7,1.7,1.8), mean=1.34, stddev=0.157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.3,1.4,1.5 1.5,1.6,1.6,1.6), mean=1.34, stddev=0.0979], bias-{mean,stddev}=-0.173,0.09818, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.87,0.90,1.1 1.2,1.3,1.5,1.6,1.7 1.8,2.0,2.0,2.0), mean=1.46, stddev=0.228], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.38 0.39,0.44,0.53,0.58,0.59 0.60,0.61,0.61,0.64), mean=0.513, stddev=0.0732], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002,0.003 0.004,0.008,0.009,0.01), mean=0.00219, stddev=0.0015], oderiv-count=1.18842e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.87,0.89,1.1 1.2,1.3,1.5,1.7,1.8 1.8,1.9,2.0,2.0), mean=1.48, stddev=0.232], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.6,1.8 1.9,2.0,2.3,2.7,2.8 3.0,3.1,3.1,3.4), mean=2.34, stddev=0.371]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.231746, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1079, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.73, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.66,0.68,0.71 0.75,0.78,0.86,0.94,0.96 1.0,1.1,1.1,1.1), mean=0.858, stddev=0.0917], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1138, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.92,1.1 1.1,1.2,1.3,1.4,1.5 1.5,1.6,1.6,1.7), mean=1.28, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.3,1.4,1.4 1.4,1.5,1.5,1.5), mean=1.28, stddev=0.0952], bias-{mean,stddev}=-0.1794,0.08097, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.98e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.72,1.2,1.4 1.5,1.6,1.8,1.9,2.0 2.0,2.1,2.2,2.3), mean=1.73, stddev=0.233], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.42 0.44,0.47,0.52,0.56,0.57 0.58,0.59,0.59,0.59), mean=0.514, stddev=0.0496], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.001,0.001,0.001,0.002 0.003,0.005,0.005,0.01), mean=0.00142, stddev=0.00118], oderiv-count=1.1131e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.75,1.3,1.4 1.5,1.6,1.8,1.9,2.0 2.0,2.1,2.2,2.4), mean=1.73, stddev=0.239], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.97,1.8,2.2 2.3,2.5,2.7,3.1,3.2 3.4,3.5,3.6,3.9), mean=2.74, stddev=0.426]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.231746, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1009, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.61, stddev=0.00293], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.65,0.66,0.69 0.72,0.74,0.80,0.86,0.91 0.93,0.95,0.96,0.99), mean=0.804, stddev=0.0738], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.62,0.63,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.18, stddev=0.142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,1.0 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.8), mean=1.18, stddev=0.124], bias-{mean,stddev}=-0.1774,0.08885, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.64e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.75,1.5 1.6,1.6,1.8,2.0,2.1 2.2,2.4,2.4,2.6), mean=1.8, stddev=0.293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.39,0.41 0.42,0.45,0.50,0.54,0.56 0.57,0.58,0.59,0.59), mean=0.499, stddev=0.0511], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0007,0.0007 0.0007,0.0008,0.0009,0.001,0.001 0.002,0.003,0.006,0.007), mean=0.00108, stddev=0.000874], oderiv-count=1.0472e+07
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.69,0.72,1.5 1.5,1.6,1.8,2.0,2.1 2.2,2.4,2.4,2.7), mean=1.81, stddev=0.305], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.1,1.2,2.2 2.5,2.6,2.9,3.3,3.5 3.7,3.9,4.0,5.0), mean=2.92, stddev=0.532]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.231746, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09297, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.49, stddev=0.00324], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.59,0.62 0.64,0.67,0.73,0.81,0.85 0.87,0.90,0.93,0.96), mean=0.74, stddev=0.0795], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.57,0.63,0.86 0.92,0.95,1.0,1.1,1.2 1.2,1.2,1.3,1.4), mean=1.03, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.85,0.89 0.91,0.96,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.03, stddev=0.0971], bias-{mean,stddev}=-0.1499,0.05773, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.68,0.77,1.3 1.3,1.4,1.5,1.7,1.8 1.9,1.9,1.9,2.0), mean=1.56, stddev=0.225], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.42 0.45,0.47,0.51,0.54,0.56 0.56,0.58,0.59,0.61), mean=0.508, stddev=0.0431], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0009 0.0009,0.0009,0.001,0.001,0.001 0.001,0.002,0.004,0.005), mean=0.00113, stddev=0.000507], oderiv-count=8.97894e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.71,0.74,1.3 1.3,1.4,1.6,1.8,1.8 1.9,2.0,2.0,2.1), mean=1.57, stddev=0.235], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,2.0 2.1,2.2,2.4,2.7,2.9 3.0,3.2,3.2,3.8), mean=2.44, stddev=0.373]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.231746, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.44, stddev=0.00162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.53,0.56,0.61 0.63,0.66,0.72,0.77,0.80 0.82,0.85,0.88,0.92), mean=0.717, stddev=0.069], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08445, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.60,0.66,0.79 0.83,0.88,0.95,1.0,1.1 1.1,1.1,1.2,1.3), mean=0.949, stddev=0.108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.78,0.78,0.80 0.83,0.88,0.94,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.951, stddev=0.093], bias-{mean,stddev}=-0.143,0.05342, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.58e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.92,0.99,1.0 1.2,1.3,1.4,1.6,1.7 1.8,1.8,1.9,2.0), mean=1.43, stddev=0.203], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.39,0.42 0.44,0.46,0.50,0.53,0.55 0.56,0.58,0.59,0.59), mean=0.496, stddev=0.0455], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.001,0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002), mean=0.00118, stddev=0.000238], oderiv-count=8.01715e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.92,0.95,1.1 1.2,1.3,1.4,1.6,1.7 1.8,1.8,1.9,2.0), mean=1.43, stddev=0.212], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.6,1.7,1.7 1.9,2.0,2.2,2.5,2.7 2.8,2.9,3.0,3.4), mean=2.22, stddev=0.332]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.231746, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08964, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.43, stddev=0.00207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.54,0.58,0.60 0.62,0.65,0.71,0.79,0.80 0.83,0.85,0.89,0.90), mean=0.713, stddev=0.0718], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08414, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.60,0.78 0.82,0.86,0.95,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.944, stddev=0.12], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.77,0.78,0.79 0.82,0.86,0.94,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.947, stddev=0.0953], bias-{mean,stddev}=-0.1301,0.05948, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.62e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.73,0.84,1.0 1.2,1.3,1.4,1.5,1.7 1.8,1.8,1.9,2.0), mean=1.42, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.32,0.40 0.42,0.45,0.47,0.51,0.53 0.54,0.57,0.57,0.59), mean=0.473, stddev=0.0476], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00117, stddev=0.000225], oderiv-count=7.0777e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.72,0.86,1.0 1.2,1.3,1.4,1.6,1.7 1.8,1.9,1.9,2.1), mean=1.43, stddev=0.225], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.7,1.8 1.9,2.0,2.2,2.5,2.7 2.9,3.1,3.1,3.6), mean=2.28, stddev=0.351]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.231746, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09306, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.49, stddev=0.00276], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.57,0.59 0.63,0.67,0.74,0.81,0.84 0.88,0.92,0.95,0.96), mean=0.74, stddev=0.0858], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08466, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.59,0.76 0.79,0.85,0.94,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.949, stddev=0.129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.79,0.80,0.81 0.82,0.87,0.94,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.953, stddev=0.0958], bias-{mean,stddev}=-0.1007,0.05713, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.86e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.67,0.84,1.1 1.2,1.3,1.4,1.6,1.8 1.9,2.0,2.0,2.1), mean=1.45, stddev=0.255], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.40 0.41,0.43,0.45,0.48,0.50 0.51,0.52,0.55,0.59), mean=0.453, stddev=0.0437], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0009,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00116, stddev=0.0002], oderiv-count=5.81062e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.67,0.82,1.0 1.2,1.3,1.4,1.6,1.8 1.9,2.0,2.0,2.1), mean=1.43, stddev=0.256], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.8,1.9 2.0,2.1,2.3,2.7,3.0 3.2,3.4,3.5,3.5), mean=2.43, stddev=0.4]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.231746, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09644, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.54, stddev=0.00289], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.56,0.58,0.62 0.65,0.68,0.75,0.86,0.89 0.93,0.96,0.98,1.1), mean=0.765, stddev=0.1], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08766, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.56,0.73 0.77,0.86,1.0,1.1,1.2 1.2,1.2,1.2,1.2), mean=0.98, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.76,0.80,0.81 0.84,0.91,0.98,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.986, stddev=0.103], bias-{mean,stddev}=-0.07868,0.04844, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.17e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.75,0.96,1.1 1.2,1.3,1.5,1.7,1.9 2.0,2.2,2.3,2.4), mean=1.55, stddev=0.274], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.32,0.39 0.40,0.43,0.45,0.47,0.48 0.49,0.50,0.50,0.52), mean=0.447, stddev=0.0379], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002), mean=0.00122, stddev=0.000185], oderiv-count=4.97664e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.82,0.94,1.2 1.2,1.3,1.5,1.7,1.9 2.0,2.2,2.3,2.4), mean=1.55, stddev=0.277], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.1,2.1,2.1 2.2,2.3,2.6,2.9,3.1 3.3,3.6,3.7,3.9), mean=2.66, stddev=0.384]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.231746, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09702, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.56,0.59 0.62,0.66,0.75,0.86,0.94 0.99,1.0,1.1,1.1), mean=0.767, stddev=0.121], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.63,0.72 0.77,0.87,0.99,1.1,1.2 1.2,1.2,1.2,1.3), mean=0.976, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.75,0.78,0.81 0.84,0.89,0.98,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.982, stddev=0.107], bias-{mean,stddev}=-0.07528,0.03909, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.54e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.82,1.1,1.2 1.2,1.3,1.5,1.6,1.7 1.7,1.8,1.8,1.9), mean=1.46, stddev=0.198], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.34,0.35 0.38,0.40,0.43,0.46,0.47 0.48,0.49,0.49,0.55), mean=0.426, stddev=0.0432], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00151, stddev=0.00019], oderiv-count=4.02662e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.82,1.1,1.2 1.2,1.3,1.5,1.6,1.7 1.8,1.8,1.8,1.9), mean=1.46, stddev=0.2], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.2,2.2,2.2 2.3,2.4,2.6,3.0,3.4 3.5,3.6,3.7,3.9), mean=2.73, stddev=0.403]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.231746, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09149, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.46, stddev=0.00338], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.51,0.54,0.56 0.59,0.62,0.70,0.83,0.89 0.93,0.97,0.98,1.1), mean=0.723, stddev=0.116], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08468, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.49,0.57,0.72 0.74,0.78,0.93,1.1,1.2 1.2,1.2,1.2,1.3), mean=0.941, stddev=0.177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.77,0.78,0.80 0.84,0.87,0.94,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.954, stddev=0.0904], bias-{mean,stddev}=-0.0817,0.04415, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.96e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.74,0.77,0.97 1.0,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.2, stddev=0.163], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.28,0.32 0.34,0.36,0.40,0.43,0.44 0.46,0.47,0.48,0.49), mean=0.395, stddev=0.0447], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.003), mean=0.00217, stddev=0.000235], oderiv-count=2.76058e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.74,0.79,0.95 1.0,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.19, stddev=0.165], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.9,2.0,2.1 2.2,2.3,2.6,3.1,3.3 3.5,3.6,3.6,3.7), mean=2.69, stddev=0.454]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.231746, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08908, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.43, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.51,0.54 0.57,0.59,0.68,0.81,0.87 0.91,0.94,0.97,0.98), mean=0.703, stddev=0.116], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08491, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.49,0.54,0.59 0.68,0.74,0.92,1.1,1.2 1.3,1.3,1.3,1.3), mean=0.938, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.73,0.76,0.79 0.83,0.88,0.95,1.0,1.1 1.1,1.1,1.1,1.3), mean=0.956, stddev=0.0956], bias-{mean,stddev}=-0.091,0.05712, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.24e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.70,0.71,0.78 0.85,0.92,1.0,1.2,1.3 1.3,1.4,1.5,1.9), mean=1.05, stddev=0.182], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.20,0.23 0.26,0.29,0.35,0.41,0.44 0.47,0.48,0.49,0.56), mean=0.353, stddev=0.0733], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.003,0.004 0.004,0.004,0.004,0.005), mean=0.00323, stddev=0.000476], oderiv-count=1.82131e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.69,0.69,0.77 0.85,0.91,1.0,1.2,1.3 1.3,1.4,1.5,1.9), mean=1.06, stddev=0.187], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.0,2.1 2.2,2.4,2.9,3.4,3.6 3.8,4.0,4.0,4.1), mean=2.89, stddev=0.531]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.231746, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09388, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.5, stddev=0.00176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.53,0.56,0.59 0.61,0.64,0.73,0.85,0.89 0.93,0.98,0.99,1.1), mean=0.743, stddev=0.112], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.58,0.59,0.66 0.74,0.85,1.0,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.01, stddev=0.198], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.88,0.89,0.91 0.92,0.96,1.0,1.1,1.1 1.2,1.3,1.3,1.3), mean=1.03, stddev=0.0846], bias-{mean,stddev}=-0.08875,0.07877, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.21e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.70,0.71,0.83 0.90,0.97,1.1,1.3,1.4 1.5,1.6,1.7,1.8), mean=1.13, stddev=0.198], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.18 0.22,0.28,0.35,0.41,0.45 0.47,0.49,0.49,0.52), mean=0.346, stddev=0.0832], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.005,0.005,0.006,0.007,0.007 0.007,0.008,0.008,0.009), mean=0.00594, stddev=0.00081], oderiv-count=614720
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.70,0.72,0.84 0.90,0.98,1.1,1.2,1.4 1.5,1.6,1.6,1.8), mean=1.13, stddev=0.205], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.4,2.5,2.7 2.9,3.1,3.6,4.3,4.6 4.7,4.8,5.1,5.3), mean=3.71, stddev=0.642]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.231746, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.005, max-change=0.75, params-rms=0.133, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.5, stddev=0.0204], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.81,0.84,0.89 0.91,0.97,1.1,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.06, stddev=0.104], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1958, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.4,1.5,1.6,1.7,1.7 1.8,1.8,1.8,1.8), mean=1.56, stddev=0.133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.0 2.1,2.1,2.2,2.3,2.4 2.4,2.5,2.5,2.5), mean=2.21, stddev=0.133], bias-{mean,stddev}=-0.04834,0.1229, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.24e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.7,1.7 1.9,1.9,2.1,2.3,2.5 2.6,2.7,2.7,2.9), mean=2.13, stddev=0.262], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.34 0.35,0.36,0.39,0.41,0.42 0.43,0.44,0.44,0.47), mean=0.389, stddev=0.0274], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.008,0.008 0.008,0.009,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00968, stddev=0.00136], oderiv-count=610368
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.6,1.7 1.8,1.9,2.1,2.4,2.5 2.6,2.8,2.8,2.9), mean=2.13, stddev=0.283], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,4.4,4.5,4.8 5.0,5.4,5.8,6.6,7.2 7.3,8.0,8.1,10), mean=6, stddev=0.895]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, params-rms=0.2749, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.1,3.1,3.1,3.1 3.1,3.1,3.1,3.1,3.1 3.1,3.1,3.1,3.1), mean=3.11, stddev=0.0075], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.6,1.8 1.8,2.0,2.2,2.4,2.5 2.6,2.6,2.6,2.6), mean=2.18, stddev=0.248], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-4e-08 -3e-08,-3e-08,3e-09,2e-08,3e-08 4e-08,4e-08,5e-08,6e-08), mean=4.86e-10, stddev=2.5e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.2,3.2,3.4,3.4 3.5,3.6,3.8,4.0,4.1 4.4,4.5,4.5,4.6), mean=3.83, stddev=0.284]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00255763, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2227, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.16,0.25,0.56 0.88,1.2,1.8,2.1,2.3 2.4,2.5,2.6,3.3), mean=1.69, stddev=0.556], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,13,13 13,13,14,15,15 16,16,16,17), mean=14.1, stddev=0.874], bias-{mean,stddev}=0.001416,0.3172, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1399, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.73,0.80,0.98 1.0,1.1,1.1,1.2,1.2 1.2,1.3,1.3,1.5), mean=1.11, stddev=0.0971], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.4,1.5,1.6,1.7,1.7 1.8,1.8,1.8,1.9), mean=1.58, stddev=0.12], bias-{mean,stddev}=-0.05884,0.1831, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.88e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.73,0.73,0.84 0.90,0.94,1.1,1.3,1.5 1.6,1.7,1.8,1.9), mean=1.14, stddev=0.236], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.36,0.40 0.41,0.43,0.47,0.51,0.56 0.58,0.62,0.62,0.65), mean=0.478, stddev=0.0598], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.005,0.005,0.005,0.005,0.006 0.006,0.006,0.007,0.01), mean=0.00512, stddev=0.00079], oderiv-count=606016
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.75,0.76,0.82 0.89,0.95,1.1,1.4,1.5 1.7,1.7,1.8,1.9), mean=1.15, stddev=0.249], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.4 1.4,1.5,1.8,2.0,2.0 2.1,2.3,2.3,2.9), mean=1.76, stddev=0.252]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00255763, l2-regularize=0.0005, max-change=0.75, params-rms=0.1414, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00146], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.83,0.88,0.90 0.98,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.12, stddev=0.129], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-3e-08 -3e-08,-2e-08,2e-10,2e-08,3e-08 3e-08,4e-08,4e-08,5e-08), mean=9.6e-10, stddev=2.09e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.6,1.7,1.7,1.8 1.8,1.9,1.9,2.0), mean=1.65, stddev=0.118]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0127881, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1923, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.08,0.27 0.71,1.0,1.5,1.9,2.1 2.3,2.4,2.5,3.5), mean=1.43, stddev=0.557], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,12,12 12,12,12,12,12 13,13,13,13), mean=12.2, stddev=0.231], bias-{mean,stddev}=5.783e-09,0.2246, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000789, stddev=0.0012], oderiv-count=609280
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/242.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/243.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.98106 tdnnf2.linear:3.87331 tdnnf2.affine:4.43084 tdnnf3.linear:3.36483 tdnnf3.affine:4.20367 tdnnf4.linear:3.1836 tdnnf4.affine:3.98661 tdnnf5.linear:2.86873 tdnnf5.affine:3.40259 tdnnf6.linear:2.59443 tdnnf6.affine:2.95729 tdnnf7.linear:2.44485 tdnnf7.affine:2.79158 tdnnf8.linear:2.32775 tdnnf8.affine:2.6928 tdnnf9.linear:2.35272 tdnnf9.affine:2.76635 tdnnf10.linear:2.43877 tdnnf10.affine:2.93344 tdnnf11.linear:2.53706 tdnnf11.affine:3.07611 tdnnf12.linear:2.64195 tdnnf12.affine:3.32459 tdnnf13.linear:2.9413 tdnnf13.affine:3.75819 prefinal-l:4.03582 prefinal-chain.affine:4.28929 prefinal-chain.linear:4.37195 output.affine:11.3131 prefinal-xent.affine:2.41 prefinal-xent.linear:1.50755 output-xent.affine:9.50113 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.0579 tdnnf2.linear:15.225 tdnnf2.affine:15.4035 tdnnf3.linear:13.8107 tdnnf3.affine:14.7323 tdnnf4.linear:12.9184 tdnnf4.affine:13.6264 tdnnf5.linear:11.9007 tdnnf5.affine:11.8743 tdnnf6.linear:11.5223 tdnnf6.affine:10.9469 tdnnf7.linear:11.4733 tdnnf7.affine:10.8902 tdnnf8.linear:11.9123 tdnnf8.affine:10.9149 tdnnf9.linear:12.3445 tdnnf9.affine:11.2691 tdnnf10.linear:12.4181 tdnnf10.affine:11.215 tdnnf11.linear:11.7108 tdnnf11.affine:10.8893 tdnnf12.linear:11.4018 tdnnf12.affine:10.9367 tdnnf13.linear:12.0163 tdnnf13.affine:11.7328 prefinal-l:12.0383 prefinal-chain.affine:17.7844 prefinal-chain.linear:24.8788 output.affine:115.026 prefinal-xent.affine:12.8472 prefinal-xent.linear:12.799 output-xent.affine:98.8398 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.33397 tdnnf2.linear:0.256274 tdnnf2.affine:0.290703 tdnnf3.linear:0.245914 tdnnf3.affine:0.289436 tdnnf4.linear:0.250868 tdnnf4.affine:0.298514 tdnnf5.linear:0.244149 tdnnf5.affine:0.29148 tdnnf6.linear:0.22636 tdnnf6.affine:0.271246 tdnnf7.linear:0.213938 tdnnf7.affine:0.257628 tdnnf8.linear:0.196067 tdnnf8.affine:0.247456 tdnnf9.linear:0.191043 tdnnf9.affine:0.245826 tdnnf10.linear:0.196394 tdnnf10.affine:0.261287 tdnnf11.linear:0.216868 tdnnf11.affine:0.282848 tdnnf12.linear:0.231701 tdnnf12.affine:0.304012 tdnnf13.linear:0.244916 tdnnf13.affine:0.320886 prefinal-l:0.336691 prefinal-chain.affine:0.241174 prefinal-chain.linear:0.17576 output.affine:0.0981151 prefinal-xent.affine:0.18703 prefinal-xent.linear:0.117349 output-xent.affine:0.096199 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 12:06:45 CST 2020, elapsed time 3 seconds
