# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/140.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/139.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/140.mdl 
# Started at Mon Feb 24 09:31:33 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/140.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1503, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.4,1.5,1.5 1.7,1.8,2.1,2.5,3.0 3.2,3.3,3.4,3.7), mean=2.18, stddev=0.487], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.63,0.72 0.79,0.96,1.5,2.0,2.5 2.7,2.9,3.0,3.6), mean=1.58, stddev=0.628], bias-{mean,stddev}=-0.1592,0.2145, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.78e+06, self-repaired-proportion=0.0490451, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.004,0.01 0.02,0.04,0.10,0.19,0.25 0.30,0.32,0.35,0.42), mean=0.123, stddev=0.0912], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.05 0.08,0.16,0.32,0.51,0.66 0.72,0.76,0.79,0.85), mean=0.336, stddev=0.203], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.08 0.09,0.12,0.14,0.21), mean=0.0501, stddev=0.0266], oderiv-count=1.30044e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.004,0.01 0.02,0.04,0.09,0.19,0.24 0.31,0.34,0.35,0.42), mean=0.12, stddev=0.0906], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.06 0.09,0.14,0.20,0.28,0.30 0.32,0.33,0.34,0.36), mean=0.204, stddev=0.0802]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.402116, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1334, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.1 2.1,2.1,2.1,2.1,2.1 2.1,2.1,2.1,2.1), mean=2.14, stddev=0.00574], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.62,0.70,0.85 0.91,0.96,1.1,1.2,1.2 1.3,1.3,1.4,1.5), mean=1.06, stddev=0.138], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1329, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.3,1.4,1.5,1.6,1.7 1.8,1.9,1.9,2.0), mean=1.49, stddev=0.174], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.4,1.4,1.5,1.6,1.6 1.7,1.7,1.7,1.9), mean=1.5, stddev=0.111], bias-{mean,stddev}=-0.1846,0.1233, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.67e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.4 1.7,1.8,2.0,2.2,2.3 2.4,2.5,2.5,2.6), mean=2.01, stddev=0.296], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.37 0.39,0.44,0.54,0.58,0.59 0.60,0.60,0.61,0.62), mean=0.518, stddev=0.0721], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.007,0.007,0.007), mean=0.00175, stddev=0.00112], oderiv-count=1.23291e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.2,1.4 1.7,1.9,2.0,2.3,2.4 2.5,2.5,2.6,2.6), mean=2.02, stddev=0.301], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.6,2.0,2.3 2.5,2.7,3.2,3.7,3.9 4.1,4.4,4.4,4.5), mean=3.21, stddev=0.586]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.402116, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1156, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.85, stddev=0.00345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.71,0.71,0.75 0.78,0.83,0.92,0.99,1.0 1.1,1.1,1.2,1.3), mean=0.919, stddev=0.1], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1153, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,1.1 1.1,1.2,1.3,1.4,1.5 1.5,1.6,1.6,1.7), mean=1.3, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.3, stddev=0.0901], bias-{mean,stddev}=-0.1707,0.07847, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.5e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.5,1.5,1.6 1.7,1.9,2.1,2.3,2.4 2.5,2.5,2.6,2.7), mean=2.09, stddev=0.265], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.43 0.44,0.47,0.52,0.56,0.57 0.58,0.58,0.59,0.59), mean=0.515, stddev=0.0476], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.002 0.002,0.004,0.005,0.006), mean=0.0012, stddev=0.000756], oderiv-count=1.13055e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.5,1.6 1.8,1.9,2.1,2.3,2.5 2.5,2.6,2.7,2.8), mean=2.11, stddev=0.278], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.9,2.0,2.7 2.7,2.9,3.3,3.7,4.0 4.1,4.5,4.5,5.1), mean=3.34, stddev=0.537]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.402116, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1077, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.72, stddev=0.00406], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.70,0.74 0.76,0.79,0.86,0.92,0.95 0.99,1.0,1.0,1.2), mean=0.858, stddev=0.0797], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.73,0.87,1.1 1.1,1.2,1.3,1.4,1.5 1.5,1.6,1.6,1.6), mean=1.28, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.6,1.6), mean=1.28, stddev=0.108], bias-{mean,stddev}=-0.1837,0.1042, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.13e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.99,1.5,1.8 1.9,2.0,2.2,2.5,2.6 2.7,2.9,2.9,3.3), mean=2.25, stddev=0.332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.43 0.45,0.46,0.51,0.55,0.56 0.56,0.57,0.58,0.59), mean=0.506, stddev=0.043], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.002,0.003,0.003,0.006), mean=0.00094, stddev=0.000688], oderiv-count=1.01376e+07
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.86,1.4,1.8 1.9,2.1,2.2,2.5,2.6 2.7,2.9,2.9,3.2), mean=2.26, stddev=0.344], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,2.0,2.8 3.0,3.2,3.6,4.1,4.5 4.7,5.0,5.2,5.4), mean=3.63, stddev=0.67]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.402116, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1018, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.66,0.67 0.70,0.74,0.81,0.88,0.91 0.95,0.96,0.99,1.1), mean=0.81, stddev=0.0808], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1033, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.64,0.84,0.96 1.0,1.1,1.2,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.16, stddev=0.131], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.95,1.0 1.0,1.1,1.1,1.3,1.3 1.4,1.4,1.4,1.4), mean=1.16, stddev=0.112], bias-{mean,stddev}=-0.1556,0.07164, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.69e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.86,1.6,1.8 1.9,2.0,2.2,2.5,2.7 2.7,2.8,2.9,3.1), mean=2.23, stddev=0.322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.43 0.46,0.48,0.52,0.55,0.56 0.57,0.58,0.58,0.59), mean=0.511, stddev=0.0392], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.002,0.004), mean=0.000881, stddev=0.000471], oderiv-count=8.91571e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.88,1.6,1.8 1.9,2.0,2.3,2.5,2.6 2.7,2.9,2.9,3.0), mean=2.23, stddev=0.33], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,2.5,2.7 2.9,3.1,3.4,3.8,4.2 4.5,4.8,5.1,5.2), mean=3.48, stddev=0.588]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.402116, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.096, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.54, stddev=0.00526], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.62,0.64 0.66,0.70,0.76,0.83,0.86 0.89,0.94,0.97,1.0), mean=0.764, stddev=0.0786], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09367, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.71,0.75,0.88 0.93,0.97,1.1,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.05, stddev=0.116], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.84,0.85,0.87 0.93,0.97,1.1,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.05, stddev=0.1], bias-{mean,stddev}=-0.1465,0.06597, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.31e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,1.1,1.3,1.5 1.7,1.8,1.9,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.93, stddev=0.251], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.42 0.44,0.47,0.50,0.53,0.54 0.56,0.57,0.58,0.59), mean=0.497, stddev=0.0404], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.000987, stddev=0.000267], oderiv-count=7.89101e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,1.2,1.3,1.5 1.6,1.7,1.9,2.1,2.3 2.3,2.4,2.5,2.5), mean=1.91, stddev=0.255], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,2.1,2.3,2.4 2.5,2.7,2.9,3.3,3.7 3.7,4.0,4.1,4.6), mean=2.99, stddev=0.444]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.402116, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0981, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.57, stddev=0.00258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.56,0.63,0.65 0.68,0.71,0.77,0.86,0.89 0.93,0.96,0.97,1.0), mean=0.78, stddev=0.0851], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09314, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.70,0.72,0.86 0.91,0.96,1.1,1.1,1.2 1.2,1.2,1.3,1.4), mean=1.05, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.83,0.85,0.89 0.93,0.96,1.1,1.1,1.2 1.2,1.2,1.3,1.4), mean=1.05, stddev=0.0985], bias-{mean,stddev}=-0.1315,0.0688, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.54e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.2,1.2,1.4 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.5,2.7), mean=1.91, stddev=0.265], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.38,0.41 0.44,0.45,0.48,0.51,0.52 0.55,0.56,0.57,0.58), mean=0.483, stddev=0.0412], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.001, stddev=0.000204], oderiv-count=6.7721e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,1.2,1.3,1.4 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.5,2.9), mean=1.91, stddev=0.277], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.1,2.3,2.5 2.6,2.7,3.0,3.3,3.6 3.7,3.9,4.1,4.6), mean=3.03, stddev=0.419]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.402116, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00359], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.63,0.67 0.69,0.73,0.80,0.88,0.91 0.95,0.99,1.0,1.1), mean=0.803, stddev=0.0886], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09444, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.64,0.70,0.76 0.87,0.95,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.06, stddev=0.143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.82,0.84,0.86 0.92,0.98,1.1,1.1,1.2 1.3,1.3,1.3,1.3), mean=1.06, stddev=0.112], bias-{mean,stddev}=-0.1061,0.08022, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.13e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.99,1.2,1.4 1.6,1.8,1.9,2.2,2.4 2.6,2.7,2.9,3.0), mean=1.97, stddev=0.347], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.34,0.41 0.42,0.44,0.47,0.50,0.51 0.52,0.54,0.54,0.55), mean=0.463, stddev=0.0418], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00101, stddev=0.00016], oderiv-count=5.83149e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.90,1.1,1.4 1.6,1.7,1.9,2.2,2.3 2.6,2.8,2.8,3.1), mean=1.95, stddev=0.364], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.2,2.3,2.6 2.7,2.9,3.1,3.4,3.9 4.3,4.6,4.6,5.1), mean=3.23, stddev=0.507]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.402116, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1034, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.65, stddev=0.004], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.61,0.62,0.66 0.70,0.74,0.82,0.90,0.95 0.97,1.0,1.1,1.1), mean=0.821, stddev=0.0969], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09581, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.62,0.64,0.74 0.83,0.91,1.1,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.07, stddev=0.174], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.79,0.85,0.88 0.94,0.99,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.08, stddev=0.115], bias-{mean,stddev}=-0.08855,0.06745, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.23e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.2,1.3 1.5,1.7,2.0,2.2,2.4 2.6,2.6,2.6,2.7), mean=1.96, stddev=0.335], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.32,0.37 0.41,0.44,0.46,0.48,0.49 0.50,0.50,0.51,0.52), mean=0.452, stddev=0.0401], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.00115, stddev=0.00015], oderiv-count=4.84704e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,1.0,1.1,1.3 1.5,1.7,1.9,2.2,2.4 2.6,2.6,2.6,2.7), mean=1.94, stddev=0.356], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.7,2.7 2.9,3.0,3.2,3.5,3.9 4.0,4.4,4.4,4.8), mean=3.3, stddev=0.431]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.402116, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1075, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.72, stddev=0.00352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.63,0.67 0.70,0.75,0.84,0.96,1.0 1.1,1.1,1.1,1.2), mean=0.852, stddev=0.119], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09796, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.62,0.75 0.80,0.94,1.1,1.2,1.3 1.4,1.4,1.4,1.4), mean=1.09, stddev=0.195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.88,0.91,0.93 0.96,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.1, stddev=0.125], bias-{mean,stddev}=-0.07546,0.05521, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.61e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.3,1.4 1.5,1.7,1.9,2.2,2.3 2.4,2.5,2.5,2.5), mean=1.92, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.27,0.34,0.35 0.38,0.40,0.44,0.47,0.48 0.48,0.49,0.49,0.50), mean=0.432, stddev=0.0433], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00136, stddev=0.000177], oderiv-count=3.83488e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.95,1.3,1.4 1.5,1.7,1.9,2.2,2.3 2.4,2.5,2.5,2.6), mean=1.91, stddev=0.317], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.7,2.7,2.9 3.0,3.1,3.5,4.0,4.3 4.6,4.8,4.8,5.1), mean=3.55, stddev=0.525]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.402116, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1038, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0.00301], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.62,0.64 0.67,0.71,0.81,0.92,0.99 1.0,1.1,1.1,1.1), mean=0.821, stddev=0.122], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09545, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.52,0.64,0.72 0.78,0.88,1.0,1.3,1.3 1.4,1.5,1.5,1.5), mean=1.06, stddev=0.213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.83,0.84,0.89 0.93,0.98,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.07, stddev=0.108], bias-{mean,stddev}=-0.09143,0.05766, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.98e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,1.0,1.2,1.2 1.3,1.5,1.7,1.8,1.9 2.0,2.2,2.2,2.4), mean=1.64, stddev=0.245], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.30 0.35,0.37,0.41,0.44,0.46 0.48,0.49,0.49,0.50), mean=0.404, stddev=0.051], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00188, stddev=0.000258], oderiv-count=2.84147e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.95,1.1,1.2 1.3,1.4,1.6,1.9,1.9 2.1,2.2,2.2,2.5), mean=1.64, stddev=0.272], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.8,2.8,2.9 3.0,3.2,3.5,4.1,4.4 4.5,4.8,4.9,5.0), mean=3.63, stddev=0.533]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.402116, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.61,0.63 0.65,0.69,0.79,0.91,0.97 1.0,1.0,1.1,1.1), mean=0.801, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09387, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.56,0.66 0.71,0.81,1.0,1.2,1.4 1.4,1.4,1.5,1.5), mean=1.03, stddev=0.243], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.84,0.85,0.89 0.94,0.96,1.0,1.1,1.2 1.3,1.3,1.4,1.5), mean=1.06, stddev=0.118], bias-{mean,stddev}=-0.1021,0.08007, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.27e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.89,0.94 1.0,1.2,1.4,1.6,1.7 1.8,1.9,2.1,2.3), mean=1.42, stddev=0.258], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.21 0.24,0.29,0.38,0.43,0.46 0.48,0.49,0.49,0.54), mean=0.364, stddev=0.0798], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.004,0.004,0.004,0.004), mean=0.00284, stddev=0.000434], oderiv-count=1.75603e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.86,0.87,0.96 1.0,1.2,1.4,1.6,1.7 1.9,1.9,2.0,2.3), mean=1.42, stddev=0.263], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.8,2.9,3.0 3.2,3.4,3.9,4.5,4.8 5.1,5.3,5.3,5.8), mean=3.96, stddev=0.661]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.402116, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.62,0.67 0.71,0.74,0.82,0.93,0.99 1.0,1.1,1.1,1.1), mean=0.836, stddev=0.111], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.096, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.57,0.60,0.64 0.69,0.82,1.0,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.05, stddev=0.258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.91,0.91,0.94 0.96,0.98,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.08, stddev=0.102], bias-{mean,stddev}=-0.1175,0.1038, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.08e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.90,0.91,0.94 0.99,1.1,1.3,1.6,1.7 1.8,1.8,1.8,2.1), mean=1.35, stddev=0.251], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.17 0.19,0.23,0.34,0.44,0.46 0.48,0.51,0.53,0.54), mean=0.337, stddev=0.0998], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.005,0.006,0.007 0.008,0.009,0.009,0.01), mean=0.00569, stddev=0.00098], oderiv-count=598400
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.84,0.94,0.96 1.0,1.1,1.4,1.6,1.7 1.8,1.9,1.9,2.2), mean=1.38, stddev=0.268], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.0,3.1,3.4 3.6,4.0,4.7,5.3,5.7 5.8,6.0,6.0,6.3), mean=4.64, stddev=0.753]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.402116, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.005, max-change=0.75, params-rms=0.1289, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.46, stddev=0.00195], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.79,0.81,0.84 0.89,0.94,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.03, stddev=0.103], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.213, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.6,1.7,1.8,1.9 1.9,2.0,2.0,2.2), mean=1.7, stddev=0.139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.2,2.2 2.2,2.3,2.4,2.5,2.6 2.6,2.7,2.8,2.8), mean=2.41, stddev=0.148], bias-{mean,stddev}=-0.05357,0.1261, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.21e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.0,2.0 2.1,2.2,2.4,2.7,2.9 3.0,3.1,3.1,3.3), mean=2.45, stddev=0.298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.35 0.36,0.37,0.40,0.42,0.43 0.44,0.45,0.45,0.48), mean=0.394, stddev=0.0291], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.008 0.008,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00987, stddev=0.00126], oderiv-count=610368
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,2.0,2.0 2.1,2.2,2.4,2.7,2.9 3.0,3.1,3.2,3.4), mean=2.47, stddev=0.297], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.9,5.8,5.9,6.0 6.3,6.6,7.3,8.2,8.7 9.1,10,11,12), mean=7.48, stddev=1.09]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, params-rms=0.2965, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.3,3.3 3.3,3.3,3.4,3.4,3.4 3.4,3.4,3.4,3.4), mean=3.36, stddev=0.00697], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.7,1.9,2.0 2.1,2.2,2.3,2.6,2.7 2.7,2.8,2.8,2.9), mean=2.36, stddev=0.249], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-4e-08 -3e-08,-2e-08,-3e-09,2e-08,3e-08 4e-08,5e-08,5e-08,5e-08), mean=-1.35e-09, stddev=2.37e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.6,3.6,3.7,3.7 3.8,3.9,4.0,4.3,4.4 4.5,4.7,4.9,5.1), mean=4.09, stddev=0.273]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00543027, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2315, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.14,0.24,0.52 0.84,1.2,1.9,2.3,2.4 2.5,2.7,2.8,3.6), mean=1.75, stddev=0.615], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,13,13 14,14,15,15,16 17,17,17,18), mean=14.7, stddev=1.01], bias-{mean,stddev}=0.001201,0.3184, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1557, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.83,0.89,1.1 1.1,1.2,1.3,1.3,1.3 1.4,1.4,1.4,1.7), mean=1.24, stddev=0.105], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.6,1.7,1.9,1.9 2.0,2.0,2.0,2.2), mean=1.76, stddev=0.123], bias-{mean,stddev}=-0.09003,0.2179, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.19e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.83,0.85,0.87 0.94,1.0,1.2,1.5,1.6 1.8,1.9,1.9,2.1), mean=1.26, stddev=0.271], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.37,0.39 0.42,0.44,0.48,0.53,0.57 0.60,0.61,0.65,0.69), mean=0.488, stddev=0.0617], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.004,0.005,0.005,0.005 0.006,0.006,0.007,0.01), mean=0.00488, stddev=0.000783], oderiv-count=616896
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.82,0.87 0.92,1.0,1.2,1.4,1.6 1.8,1.9,1.9,2.1), mean=1.24, stddev=0.263], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.6,1.7,1.9,2.0,2.1 2.2,2.5,2.5,3.6), mean=1.88, stddev=0.264]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00543027, l2-regularize=0.0005, max-change=0.75, params-rms=0.1525, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.73, stddev=0.000846], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.96,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.21, stddev=0.117], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-3e-08 -3e-08,-2e-08,-5e-09,1e-08,3e-08 3e-08,4e-08,4e-08,5e-08), mean=-2.74e-09, stddev=2.27e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.6,1.7,1.8,1.9,1.9 2.0,2.1,2.1,2.2), mean=1.81, stddev=0.124]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0271513, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1848, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.07,0.25 0.64,0.93,1.4,1.8,2.0 2.2,2.3,2.4,3.3), mean=1.37, stddev=0.551], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,12,12,12,12 12,12,12,12), mean=11.7, stddev=0.223], bias-{mean,stddev}=-1.18e-09,0.2469, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,5e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000774, stddev=0.0012], oderiv-count=610368
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/139.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/140.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.04903 tdnnf2.linear:5.33887 tdnnf2.affine:6.0278 tdnnf3.linear:4.54456 tdnnf3.affine:5.27714 tdnnf4.linear:4.21408 tdnnf4.affine:5.1175 tdnnf5.linear:4.03537 tdnnf5.affine:4.64075 tdnnf6.linear:3.65404 tdnnf6.affine:4.11861 tdnnf7.linear:3.49615 tdnnf7.affine:3.93452 tdnnf8.linear:3.3361 tdnnf8.affine:3.82009 tdnnf9.linear:3.43106 tdnnf9.affine:3.90956 tdnnf10.linear:3.52032 tdnnf10.affine:4.08546 tdnnf11.linear:3.5751 tdnnf11.affine:4.26707 tdnnf12.linear:3.61749 tdnnf12.affine:4.45046 tdnnf13.linear:4.16507 tdnnf13.affine:4.98495 prefinal-l:3.5191 prefinal-chain.affine:5.46776 prefinal-chain.linear:5.0699 output.affine:15.6501 prefinal-xent.affine:2.96954 prefinal-xent.linear:1.87821 output-xent.affine:13.42 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.3974 tdnnf2.linear:17.0814 tdnnf2.affine:17.1932 tdnnf3.linear:14.7964 tdnnf3.affine:14.9056 tdnnf4.linear:13.7811 tdnnf4.affine:14.7356 tdnnf5.linear:13.029 tdnnf5.affine:13.3618 tdnnf6.linear:12.2883 tdnnf6.affine:12.1265 tdnnf7.linear:12.5568 tdnnf7.affine:12.04 tdnnf8.linear:12.9325 tdnnf8.affine:12.1812 tdnnf9.linear:13.2323 tdnnf9.affine:12.3281 tdnnf10.linear:13.7587 tdnnf10.affine:12.5835 tdnnf11.linear:13.2822 tdnnf11.affine:12.2783 tdnnf12.linear:12.9471 tdnnf12.affine:12.1053 tdnnf13.linear:13.4894 tdnnf13.affine:12.4156 prefinal-l:11.6674 prefinal-chain.affine:19.3447 prefinal-chain.linear:26.8402 output.affine:119.419 prefinal-xent.affine:14.3448 prefinal-xent.linear:13.8003 output-xent.affine:95.2918 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.357862 tdnnf2.linear:0.314211 tdnnf2.affine:0.354172 tdnnf3.linear:0.308407 tdnnf3.affine:0.356748 tdnnf4.linear:0.306139 tdnnf4.affine:0.346879 tdnnf5.linear:0.310474 tdnnf5.affine:0.346425 tdnnf6.linear:0.298178 tdnnf6.affine:0.339331 tdnnf7.linear:0.278108 tdnnf7.affine:0.325325 tdnnf8.linear:0.256727 tdnnf8.affine:0.31196 tdnnf9.linear:0.259086 tdnnf9.affine:0.316614 tdnnf10.linear:0.254943 tdnnf10.affine:0.323495 tdnnf11.linear:0.268854 tdnnf11.affine:0.346627 tdnnf12.linear:0.278476 tdnnf12.affine:0.367157 tdnnf13.linear:0.307295 tdnnf13.affine:0.399891 prefinal-l:0.300196 prefinal-chain.affine:0.28163 prefinal-chain.linear:0.188798 output.affine:0.131207 prefinal-xent.affine:0.206803 prefinal-xent.linear:0.136039 output-xent.affine:0.140897 ]
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 09:31:37 CST 2020, elapsed time 4 seconds
