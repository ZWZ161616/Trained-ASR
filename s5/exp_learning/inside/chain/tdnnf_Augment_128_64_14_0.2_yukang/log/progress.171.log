# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/171.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/170.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/171.mdl 
# Started at Mon Feb 24 10:19:11 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/171.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1546, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.5,1.6 1.7,1.8,2.1,2.6,3.1 3.3,3.4,3.4,3.7), mean=2.24, stddev=0.509], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.63,0.65,0.69 0.79,0.97,1.6,2.1,2.6 2.8,3.1,3.2,3.8), mean=1.62, stddev=0.66], bias-{mean,stddev}=-0.1578,0.2242, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.96e+06, self-repaired-proportion=0.00650696, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.01,0.02 0.03,0.05,0.10,0.20,0.25 0.31,0.32,0.33,0.36), mean=0.126, stddev=0.0884], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.08 0.11,0.16,0.28,0.50,0.66 0.73,0.76,0.77,0.79), mean=0.338, stddev=0.196], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.06,0.07 0.08,0.11,0.11,0.12), mean=0.0449, stddev=0.02], oderiv-count=1.30504e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.009,0.01,0.02 0.03,0.05,0.10,0.20,0.27 0.30,0.35,0.36,0.41), mean=0.13, stddev=0.0925], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.09 0.12,0.15,0.21,0.29,0.32 0.34,0.35,0.36,0.38), mean=0.219, stddev=0.0791]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.460317, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=2.03, stddev=0.00512], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.74,0.79,0.81 0.86,0.90,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.01, stddev=0.122], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1245, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.1,1.1,1.2 1.2,1.3,1.4,1.5,1.6 1.7,1.7,1.8,1.9), mean=1.4, stddev=0.157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.3,1.3,1.4,1.5,1.6 1.6,1.6,1.6,1.7), mean=1.4, stddev=0.105], bias-{mean,stddev}=-0.1811,0.1177, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.88e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.2,1.4 1.5,1.7,1.9,2.1,2.2 2.3,2.4,2.5,2.6), mean=1.9, stddev=0.288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.38 0.41,0.44,0.53,0.58,0.60 0.60,0.60,0.60,0.62), mean=0.513, stddev=0.0701], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.006,0.006,0.007), mean=0.00176, stddev=0.00102], oderiv-count=1.21808e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.4 1.5,1.7,1.9,2.2,2.3 2.4,2.5,2.5,2.7), mean=1.91, stddev=0.3], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,2.0,2.1 2.3,2.6,2.9,3.5,3.8 4.0,4.2,4.2,4.5), mean=3.02, stddev=0.568]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.460317, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.11, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.76, stddev=0.00234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.68,0.70,0.74 0.77,0.80,0.87,0.94,0.99 1.0,1.1,1.1,1.2), mean=0.875, stddev=0.091], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1099, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.78,0.83,1.1 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.24, stddev=0.139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.0,1.1 1.1,1.2,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.24, stddev=0.0958], bias-{mean,stddev}=-0.1737,0.08563, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.08e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.5,1.5,1.6 1.7,1.8,2.1,2.3,2.4 2.4,2.5,2.5,2.6), mean=2.05, stddev=0.255], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.40 0.44,0.47,0.52,0.56,0.57 0.58,0.59,0.59,0.60), mean=0.512, stddev=0.0524], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0008,0.001,0.001,0.002 0.002,0.004,0.004,0.004), mean=0.00119, stddev=0.000722], oderiv-count=1.10728e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.4,1.5,1.5 1.7,1.8,2.1,2.3,2.4 2.4,2.5,2.6,2.6), mean=2.04, stddev=0.261], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.8,2.2,2.5 2.6,2.8,3.2,3.7,4.0 4.1,4.3,4.3,4.5), mean=3.25, stddev=0.529]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.460317, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1066, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00699], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.69,0.72 0.75,0.78,0.85,0.92,0.95 0.97,1.0,1.1,1.2), mean=0.848, stddev=0.084], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1087, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.72,0.77,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.22, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,1.0 1.1,1.1,1.2,1.3,1.4 1.5,1.5,1.6,1.8), mean=1.22, stddev=0.142], bias-{mean,stddev}=-0.1796,0.1067, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.51e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,1.1,1.1,1.8 1.9,2.1,2.3,2.5,2.7 2.8,2.9,2.9,3.1), mean=2.28, stddev=0.346], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.42,0.43 0.44,0.47,0.51,0.55,0.57 0.57,0.58,0.58,0.60), mean=0.508, stddev=0.0448], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0006 0.0006,0.0006,0.0007,0.0008,0.001 0.002,0.002,0.003,0.006), mean=0.000892, stddev=0.000657], oderiv-count=9.8032e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,1.0,1.1,1.8 1.9,2.1,2.3,2.6,2.7 2.8,2.9,3.0,3.2), mean=2.3, stddev=0.358], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.6,1.9,2.8 3.0,3.2,3.6,4.1,4.5 4.8,5.1,5.2,5.4), mean=3.66, stddev=0.666]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.460317, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09886, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.58, stddev=0.00426], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.61,0.63,0.66 0.69,0.72,0.79,0.85,0.88 0.91,0.96,1.0,1.1), mean=0.787, stddev=0.0787], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09839, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.67,0.93 0.96,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.11, stddev=0.127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.91,0.92,0.96 0.98,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.11, stddev=0.103], bias-{mean,stddev}=-0.147,0.07523, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.93e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.95,1.0,1.7 1.9,2.0,2.2,2.4,2.6 2.7,2.8,2.8,3.0), mean=2.21, stddev=0.328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.42 0.46,0.48,0.51,0.55,0.56 0.57,0.58,0.58,0.59), mean=0.509, stddev=0.0426], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0006 0.0006,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.003,0.004), mean=0.00085, stddev=0.000451], oderiv-count=8.82086e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.94,1.0,1.7 1.9,2.0,2.2,2.5,2.6 2.7,2.8,2.9,3.1), mean=2.21, stddev=0.339], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.6,1.6,2.6 2.9,3.0,3.4,3.7,4.0 4.2,4.5,4.6,5.5), mean=3.39, stddev=0.561]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.460317, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0933, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.49, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.56,0.61,0.63 0.65,0.67,0.74,0.80,0.84 0.88,0.90,0.92,0.96), mean=0.742, stddev=0.0775], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08989, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.67,0.71,0.81 0.88,0.93,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.01, stddev=0.116], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.85,0.86 0.88,0.92,1.0,1.1,1.1 1.2,1.2,1.3,1.3), mean=1.01, stddev=0.105], bias-{mean,stddev}=-0.1454,0.06381, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.19e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.2,1.2,1.5 1.6,1.7,1.9,2.1,2.2 2.4,2.4,2.4,2.5), mean=1.9, stddev=0.263], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.42 0.45,0.47,0.49,0.53,0.54 0.55,0.57,0.57,0.62), mean=0.495, stddev=0.0417], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.000941, stddev=0.000235], oderiv-count=8.10125e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.2,1.2,1.5 1.6,1.7,1.9,2.1,2.2 2.4,2.4,2.4,2.5), mean=1.89, stddev=0.263], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.0,2.3,2.4 2.5,2.6,2.9,3.3,3.5 3.7,3.9,4.0,4.2), mean=2.96, stddev=0.412]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.460317, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09397, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.5, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.58,0.60,0.63 0.65,0.68,0.75,0.82,0.85 0.87,0.90,0.92,0.96), mean=0.748, stddev=0.0783], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08963, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.67,0.81 0.87,0.91,1.0,1.1,1.1 1.2,1.2,1.2,1.4), mean=1.01, stddev=0.12], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.83,0.84,0.86 0.89,0.92,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.01, stddev=0.0989], bias-{mean,stddev}=-0.1292,0.06878, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.74e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.99,1.1,1.4 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.89, stddev=0.276], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.35,0.41 0.43,0.45,0.49,0.51,0.52 0.54,0.55,0.57,0.59), mean=0.482, stddev=0.0425], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.000968, stddev=0.000203], oderiv-count=6.93101e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.94,1.1,1.3 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.88, stddev=0.285], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,2.0,2.5 2.6,2.7,2.9,3.2,3.5 3.7,3.8,3.9,4.2), mean=2.97, stddev=0.4]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.460317, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09743, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.56, stddev=0.00289], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.61,0.64 0.67,0.70,0.78,0.84,0.88 0.91,0.94,0.96,1.0), mean=0.775, stddev=0.0824], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0911, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.62,0.74 0.85,0.91,1.0,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.02, stddev=0.146], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.82,0.82,0.86 0.89,0.93,1.0,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.02, stddev=0.114], bias-{mean,stddev}=-0.101,0.08268, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.86e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.97,1.0,1.3 1.6,1.7,1.9,2.2,2.4 2.6,2.8,2.8,3.0), mean=1.93, stddev=0.352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.40 0.42,0.43,0.47,0.49,0.50 0.52,0.52,0.53,0.63), mean=0.462, stddev=0.0441], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.000983, stddev=0.000168], oderiv-count=5.89408e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.1,1.3 1.6,1.7,1.9,2.2,2.3 2.6,2.6,2.7,3.2), mean=1.93, stddev=0.349], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.4,2.6 2.7,2.9,3.1,3.5,3.8 4.0,4.3,4.3,4.6), mean=3.2, stddev=0.448]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.460317, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1009, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00289], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.60,0.61,0.65 0.68,0.72,0.80,0.89,0.93 0.95,0.98,1.0,1.1), mean=0.802, stddev=0.0971], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09292, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.60,0.73 0.82,0.91,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.04, stddev=0.163], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.79,0.79,0.85 0.88,0.95,1.0,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.04, stddev=0.115], bias-{mean,stddev}=-0.08509,0.06735, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.22e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.98,1.0,1.4 1.5,1.7,1.9,2.2,2.4 2.5,2.6,2.7,2.8), mean=1.93, stddev=0.343], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.31,0.38 0.41,0.43,0.46,0.48,0.49 0.50,0.50,0.51,0.51), mean=0.45, stddev=0.0408], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.00111, stddev=0.000155], oderiv-count=4.89024e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.0,1.4 1.6,1.7,1.9,2.2,2.4 2.5,2.6,2.6,2.9), mean=1.94, stddev=0.339], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.7,2.7 2.8,3.0,3.3,3.7,4.0 4.2,4.6,4.6,5.2), mean=3.38, stddev=0.48]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.460317, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1034, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.65, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.63,0.65 0.68,0.74,0.81,0.91,0.96 1.0,1.1,1.1,1.1), mean=0.82, stddev=0.106], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09403, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.69,0.77 0.86,0.93,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.05, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.85,0.86,0.91 0.92,0.95,1.0,1.1,1.2 1.3,1.4,1.4,1.4), mean=1.06, stddev=0.118], bias-{mean,stddev}=-0.07728,0.05381, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.47e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,1.2,1.4 1.5,1.7,1.8,2.0,2.1 2.2,2.3,2.3,2.5), mean=1.84, stddev=0.258], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.33,0.37 0.39,0.41,0.44,0.46,0.48 0.48,0.49,0.49,0.50), mean=0.432, stddev=0.0392], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00134, stddev=0.000163], oderiv-count=3.81434e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,1.2,1.4 1.5,1.6,1.8,2.1,2.2 2.2,2.4,2.4,2.5), mean=1.85, stddev=0.263], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.7,2.8,2.9 3.0,3.1,3.5,4.0,4.3 4.6,5.1,5.1,5.7), mean=3.58, stddev=0.561]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.460317, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1009, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00297], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.59,0.62,0.65 0.67,0.71,0.79,0.89,0.94 0.99,1.0,1.1,1.1), mean=0.801, stddev=0.106], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09246, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.60,0.72 0.76,0.85,1.0,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.03, stddev=0.197], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.78,0.85,0.86 0.90,0.95,1.1,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.104], bias-{mean,stddev}=-0.09015,0.0612, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.93e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.92,1.1,1.2 1.3,1.4,1.6,1.8,1.9 1.9,2.0,2.0,2.5), mean=1.59, stddev=0.233], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.30 0.34,0.37,0.41,0.45,0.47 0.48,0.49,0.50,0.52), mean=0.405, stddev=0.0557], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00185, stddev=0.000219], oderiv-count=2.93248e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.90,1.1,1.1 1.3,1.4,1.6,1.8,1.9 1.9,2.0,2.1,2.5), mean=1.59, stddev=0.242], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.6,2.7,2.7 2.9,3.1,3.6,4.2,4.5 4.7,4.8,5.0,5.4), mean=3.65, stddev=0.614]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.460317, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1003, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.59,0.63 0.66,0.69,0.79,0.90,0.94 0.98,1.0,1.0,1.1), mean=0.795, stddev=0.111], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.61,0.74 0.78,0.83,1.0,1.2,1.3 1.4,1.4,1.4,1.4), mean=1.03, stddev=0.21], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.84,0.84,0.88 0.91,0.96,1.0,1.1,1.2 1.2,1.4,1.4,1.5), mean=1.05, stddev=0.122], bias-{mean,stddev}=-0.09915,0.08202, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.93,0.96,1.1 1.2,1.2,1.4,1.6,1.7 1.8,1.9,2.0,2.7), mean=1.45, stddev=0.257], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.21,0.25 0.27,0.30,0.39,0.45,0.47 0.49,0.51,0.54,0.60), mean=0.377, stddev=0.0811], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.003,0.004,0.004), mean=0.00267, stddev=0.000354], oderiv-count=1.87027e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.89,1.0 1.1,1.2,1.4,1.6,1.7 1.8,1.9,1.9,2.7), mean=1.44, stddev=0.263], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.7,2.8,2.9 3.1,3.4,3.9,4.7,5.0 5.2,5.4,5.8,6.4), mean=4.02, stddev=0.74]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.460317, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1067, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.62,0.64,0.67 0.70,0.76,0.84,0.94,1.0 1.0,1.1,1.1,1.1), mean=0.847, stddev=0.11], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09774, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.60,0.61,0.70 0.79,0.88,1.1,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.08, stddev=0.224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.92,0.94,0.96 0.97,1.0,1.1,1.2,1.2 1.3,1.3,1.4,1.4), mean=1.1, stddev=0.0997], bias-{mean,stddev}=-0.1039,0.1051, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.01e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.89,0.89,0.92 1.1,1.3,1.5,1.6,1.7 1.8,1.8,1.9,2.3), mean=1.44, stddev=0.234], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.18 0.22,0.30,0.37,0.44,0.46 0.48,0.51,0.52,0.54), mean=0.36, stddev=0.0899], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.005,0.006,0.006 0.007,0.007,0.008,0.009), mean=0.0053, stddev=0.000778], oderiv-count=606016
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.88,0.88,0.91 1.1,1.2,1.4,1.6,1.7 1.7,1.8,1.8,2.2), mean=1.41, stddev=0.23], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.9,3.3,3.5,3.6 3.8,4.1,4.6,5.4,5.7 6.0,6.5,6.5,6.5), mean=4.73, stddev=0.748]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.460317, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.005, max-change=0.75, params-rms=0.1316, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.49, stddev=0.0211], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.81,0.84,0.88 0.90,0.95,1.0,1.1,1.2 1.2,1.2,1.3,1.3), mean=1.05, stddev=0.107], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2039, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.4 1.4,1.5,1.6,1.7,1.8 1.8,1.9,1.9,2.0), mean=1.62, stddev=0.143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.1 2.1,2.2,2.3,2.4,2.5 2.6,2.7,2.7,2.7), mean=2.3, stddev=0.153], bias-{mean,stddev}=-0.0746,0.1219, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.19e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.0,2.0,2.1 2.1,2.2,2.5,2.8,3.0 3.1,3.2,3.3,3.5), mean=2.51, stddev=0.334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.34 0.35,0.36,0.39,0.42,0.43 0.44,0.45,0.46,0.47), mean=0.392, stddev=0.0303], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.008 0.008,0.009,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.0096, stddev=0.00119], oderiv-count=602752
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.0 2.1,2.2,2.4,2.8,3.0 3.1,3.2,3.3,3.7), mean=2.48, stddev=0.348], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.9,5.8,6.0,6.3 6.4,6.8,7.6,8.5,9.1 9.5,9.9,10,14), mean=7.72, stddev=1.17]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, params-rms=0.3026, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,3.4,3.4,3.4 3.4,3.4,3.4,3.4,3.4 3.4,3.4,3.4,3.4), mean=3.42, stddev=0.000977], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,2.0 2.1,2.2,2.4,2.6,2.8 2.8,2.9,3.0,3.0), mean=2.4, stddev=0.281], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-4e-08 -4e-08,-2e-08,1e-09,2e-08,3e-08 4e-08,4e-08,4e-08,6e-08), mean=2.67e-10, stddev=2.48e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.6,3.6,3.7,3.8 3.8,3.9,4.1,4.5,4.6 4.6,4.7,5.0,5.3), mean=4.19, stddev=0.325]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00432921, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2359, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.15,0.25,0.54 0.88,1.3,1.9,2.3,2.4 2.5,2.7,2.8,3.7), mean=1.79, stddev=0.606], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(13,13,13,14 14,14,15,16,16 17,17,18,18), mean=15, stddev=1.07], bias-{mean,stddev}=0.001326,0.3421, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1515, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.76,0.77,1.1 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.4,1.7), mean=1.21, stddev=0.113], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.6,1.6,1.7,1.9,1.9 1.9,1.9,2.0,2.0), mean=1.71, stddev=0.129], bias-{mean,stddev}=-0.1111,0.1974, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.26e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.92,0.97 1.0,1.1,1.3,1.5,1.7 1.8,2.0,2.0,2.1), mean=1.31, stddev=0.262], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.38,0.39 0.43,0.44,0.47,0.52,0.57 0.59,0.63,0.63,0.68), mean=0.486, stddev=0.0595], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.004,0.005,0.005,0.005 0.005,0.006,0.007,0.008), mean=0.00467, stddev=0.000602], oderiv-count=615808
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.84,0.87,0.93 0.97,1.1,1.3,1.5,1.7 1.9,2.0,2.0,2.1), mean=1.29, stddev=0.278], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.7,1.9,2.1,2.3 2.4,2.6,2.7,4.3), mean=1.96, stddev=0.329]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00432921, l2-regularize=0.0005, max-change=0.75, params-rms=0.1507, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.7, stddev=0.000488], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.84,0.95,1.0 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.2, stddev=0.128], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-4e-08 -3e-08,-2e-08,-2e-09,1e-08,3e-08 3e-08,4e-08,4e-08,4e-08), mean=-2.69e-09, stddev=2.22e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.6,1.7,1.8,1.9,1.9 2.0,2.0,2.1,2.1), mean=1.79, stddev=0.124]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0216461, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1813, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.08,0.24 0.60,0.89,1.4,1.8,2.0 2.1,2.3,2.3,3.2), mean=1.34, stddev=0.545], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,11,12,12,12 12,12,12,12), mean=11.5, stddev=0.234], bias-{mean,stddev}=-3.812e-08,0.2647, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000768, stddev=0.0012], oderiv-count=603840
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/170.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/171.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:10.0434 tdnnf2.linear:5.09822 tdnnf2.affine:5.73419 tdnnf3.linear:4.31838 tdnnf3.affine:5.0252 tdnnf4.linear:4.18907 tdnnf4.affine:5.00259 tdnnf5.linear:3.93008 tdnnf5.affine:4.40589 tdnnf6.linear:3.51168 tdnnf6.affine:3.94635 tdnnf7.linear:3.38184 tdnnf7.affine:3.86992 tdnnf8.linear:3.25083 tdnnf8.affine:3.70972 tdnnf9.linear:3.37024 tdnnf9.affine:3.81958 tdnnf10.linear:3.43375 tdnnf10.affine:4.02532 tdnnf11.linear:3.53219 tdnnf11.affine:4.22549 tdnnf12.linear:3.69975 tdnnf12.affine:4.46617 tdnnf13.linear:3.97403 tdnnf13.affine:4.9272 prefinal-l:4.23381 prefinal-chain.affine:5.08896 prefinal-chain.linear:5.64232 output.affine:15.654 prefinal-xent.affine:2.84151 prefinal-xent.linear:1.86505 output-xent.affine:12.9281 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.131 tdnnf2.linear:16.2597 tdnnf2.affine:16.123 tdnnf3.linear:14.0807 tdnnf3.affine:14.2377 tdnnf4.linear:13.641 tdnnf4.affine:14.1112 tdnnf5.linear:12.6535 tdnnf5.affine:12.7311 tdnnf6.linear:11.9422 tdnnf6.affine:11.6454 tdnnf7.linear:12.0284 tdnnf7.affine:11.5918 tdnnf8.linear:12.4711 tdnnf8.affine:11.7536 tdnnf9.linear:12.9213 tdnnf9.affine:11.9569 tdnnf10.linear:13.2297 tdnnf10.affine:12.0824 tdnnf11.linear:12.9214 tdnnf11.affine:11.8994 tdnnf12.linear:12.839 tdnnf12.affine:12.0145 tdnnf13.linear:13.6604 tdnnf13.affine:12.6216 prefinal-l:11.9113 prefinal-chain.affine:18.5235 prefinal-chain.linear:27.3923 output.affine:121.901 prefinal-xent.affine:13.9476 prefinal-xent.linear:13.6379 output-xent.affine:93.7304 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.387166 tdnnf2.linear:0.314566 tdnnf2.affine:0.357166 tdnnf3.linear:0.307392 tdnnf3.affine:0.354381 tdnnf4.linear:0.308256 tdnnf4.affine:0.357233 tdnnf5.linear:0.310983 tdnnf5.affine:0.34551 tdnnf6.linear:0.295256 tdnnf6.affine:0.338938 tdnnf7.linear:0.281557 tdnnf7.affine:0.333653 tdnnf8.linear:0.261194 tdnnf8.affine:0.315652 tdnnf9.linear:0.261119 tdnnf9.affine:0.319646 tdnnf10.linear:0.259417 tdnnf10.affine:0.332659 tdnnf11.linear:0.273596 tdnnf11.affine:0.355196 tdnnf12.linear:0.288029 tdnnf12.affine:0.372786 tdnnf13.linear:0.290967 tdnnf13.affine:0.390114 prefinal-l:0.355993 prefinal-chain.affine:0.274086 prefinal-chain.linear:0.205811 output.affine:0.128436 prefinal-xent.affine:0.203361 prefinal-xent.linear:0.136701 output-xent.affine:0.138026 ]
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 10:19:15 CST 2020, elapsed time 4 seconds
