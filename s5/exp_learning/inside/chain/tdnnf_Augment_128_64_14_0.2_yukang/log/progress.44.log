# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/44.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/43.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/44.mdl 
# Started at Mon Feb 24 06:45:00 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/44.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1332, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.92,0.95,1.2 1.3,1.6,1.8,2.2,2.5 2.9,3.1,3.1,3.4), mean=1.92, stddev=0.483], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.51,0.52,0.60 0.68,0.79,1.4,1.8,2.2 2.4,2.6,2.6,3.3), mean=1.4, stddev=0.569], bias-{mean,stddev}=-0.1111,0.2112, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8e+06, self-repaired-proportion=0.0939721, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.001,0.003 0.006,0.02,0.12,0.20,0.26 0.31,0.33,0.34,0.40), mean=0.126, stddev=0.0958], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.02,0.03 0.05,0.10,0.35,0.54,0.71 0.76,0.79,0.80,0.81), mean=0.356, stddev=0.227], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.09 0.10,0.13,0.13,0.20), mean=0.049, stddev=0.0286], oderiv-count=1.28895e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.001,0.001,0.003 0.005,0.02,0.12,0.20,0.27 0.30,0.34,0.35,0.38), mean=0.127, stddev=0.0958], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.009,0.01,0.02 0.04,0.10,0.21,0.28,0.31 0.32,0.34,0.34,0.37), mean=0.196, stddev=0.096]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1419, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3), mean=2.27, stddev=0.00557], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.59,0.70 0.84,0.98,1.2,1.3,1.3 1.4,1.4,1.5,1.6), mean=1.12, stddev=0.197], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1333, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.3 1.3,1.4,1.5,1.6,1.7 1.8,1.9,2.0,2.1), mean=1.5, stddev=0.179], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.4,1.4,1.5,1.6,1.7 1.7,1.7,1.8,1.9), mean=1.5, stddev=0.116], bias-{mean,stddev}=-0.1296,0.08772, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.94e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.3 1.4,1.5,1.7,1.9,2.0 2.1,2.1,2.3,2.4), mean=1.72, stddev=0.235], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.38,0.40 0.41,0.43,0.52,0.57,0.58 0.60,0.60,0.61,0.61), mean=0.505, stddev=0.0659], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.006), mean=0.00165, stddev=0.000595], oderiv-count=1.16936e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.3 1.4,1.5,1.7,1.9,2.0 2.1,2.2,2.3,2.4), mean=1.72, stddev=0.237], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.6,1.9,2.0 2.2,2.4,2.7,3.2,3.3 3.4,3.6,3.7,4.4), mean=2.77, stddev=0.465]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1241, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.99, stddev=0.00437], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.72,0.76,0.81 0.86,0.91,0.98,1.1,1.1 1.2,1.2,1.3,1.3), mean=0.987, stddev=0.105], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1169, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.0,1.0,1.1 1.1,1.2,1.3,1.4,1.5 1.6,1.7,1.8,1.8), mean=1.31, stddev=0.164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.5 1.5,1.5,1.6,1.6), mean=1.32, stddev=0.101], bias-{mean,stddev}=-0.1044,0.05051, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.45e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.7 1.7,1.8,1.9,2.1,2.2 2.4,2.4,2.5,2.5), mean=1.95, stddev=0.208], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.42 0.43,0.46,0.51,0.55,0.56 0.57,0.58,0.60,0.60), mean=0.507, stddev=0.05], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.003,0.003,0.004), mean=0.00109, stddev=0.000399], oderiv-count=1.1228e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.7,1.7 1.7,1.8,1.9,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.96, stddev=0.195], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.2,2.3,2.5 2.7,2.8,3.2,3.5,3.7 3.9,4.0,4.2,4.7), mean=3.18, stddev=0.437]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.109, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.74, stddev=0.00249], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.69,0.74 0.77,0.80,0.87,0.93,0.97 1.0,1.0,1.0,1.2), mean=0.868, stddev=0.0833], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1061, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.87,0.96,1.0 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.19, stddev=0.13], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.4,1.4), mean=1.2, stddev=0.0881], bias-{mean,stddev}=-0.1129,0.0486, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.25e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.5,1.5,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.3,2.4,2.4), mean=1.91, stddev=0.225], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.41,0.42 0.43,0.46,0.50,0.54,0.55 0.56,0.57,0.57,0.61), mean=0.5, stddev=0.0463], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0007,0.0007 0.0007,0.0008,0.0009,0.001,0.001 0.001,0.002,0.003,0.004), mean=0.000959, stddev=0.000381], oderiv-count=9.9968e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.3,2.3,2.4), mean=1.91, stddev=0.233], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,2.1,2.4 2.5,2.7,3.1,3.5,3.8 4.0,4.2,4.3,4.3), mean=3.12, stddev=0.496]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1025, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.64, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.66,0.69 0.71,0.75,0.81,0.88,0.91 0.94,0.96,1.0,1.1), mean=0.816, stddev=0.0793], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1007, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.82,0.84,0.95 1.0,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.13, stddev=0.125], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.94,0.98 1.0,1.1,1.1,1.2,1.3 1.3,1.3,1.4,1.4), mean=1.14, stddev=0.0964], bias-{mean,stddev}=-0.1175,0.06563, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.1,1.5,1.6 1.6,1.8,1.9,2.1,2.2 2.4,2.5,2.5,2.6), mean=1.93, stddev=0.252], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.38,0.41 0.42,0.45,0.49,0.53,0.54 0.55,0.56,0.56,0.60), mean=0.489, stddev=0.0452], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.002,0.003), mean=0.00088, stddev=0.000336], oderiv-count=9.18445e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.1,1.3,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.5,2.6), mean=1.9, stddev=0.251], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.7,2.2,2.4 2.6,2.8,3.1,3.5,3.9 4.2,4.7,4.9,5.0), mean=3.2, stddev=0.574]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1009, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00267], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.65,0.67 0.71,0.74,0.80,0.87,0.90 0.92,0.95,0.96,1.0), mean=0.804, stddev=0.0737], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09655, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.76,0.81,0.92 0.96,0.99,1.1,1.2,1.2 1.3,1.4,1.4,1.4), mean=1.09, stddev=0.121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.89,0.89,0.93 0.97,1.0,1.1,1.2,1.2 1.2,1.3,1.4,1.4), mean=1.09, stddev=0.0986], bias-{mean,stddev}=-0.1029,0.04827, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.27e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,1.2,1.2,1.6 1.7,1.7,1.9,2.1,2.2 2.4,2.5,2.5,2.6), mean=1.91, stddev=0.256], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.42,0.42 0.43,0.46,0.49,0.52,0.54 0.55,0.56,0.56,0.57), mean=0.487, stddev=0.0384], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0007 0.0007,0.0008,0.0008,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.000898, stddev=0.000222], oderiv-count=7.58266e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.1,1.2,1.6 1.6,1.7,1.8,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.87, stddev=0.249], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,2.1,2.5 2.6,2.7,3.1,3.5,3.8 4.0,4.2,4.3,4.8), mean=3.13, stddev=0.501]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1019, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.00365], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.63,0.65,0.69 0.70,0.74,0.82,0.88,0.91 0.95,0.98,1.0,1.1), mean=0.811, stddev=0.0828], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09585, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.70,0.73,0.85 0.91,0.96,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.08, stddev=0.139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.89,0.90,0.92 0.95,0.99,1.1,1.2,1.2 1.3,1.3,1.4,1.4), mean=1.08, stddev=0.108], bias-{mean,stddev}=-0.09758,0.04548, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.77e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,1.2,1.3,1.4 1.6,1.7,1.9,2.1,2.2 2.3,2.5,2.5,2.6), mean=1.9, stddev=0.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.39,0.41 0.43,0.44,0.48,0.52,0.53 0.54,0.55,0.56,0.58), mean=0.479, stddev=0.0412], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0007,0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.000929, stddev=0.000171], oderiv-count=7.08992e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,1.2,1.3,1.4 1.5,1.7,1.9,2.1,2.2 2.3,2.4,2.5,2.6), mean=1.89, stddev=0.275], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.8,2.3,2.5 2.5,2.7,3.0,3.4,3.7 4.0,4.4,4.4,5.0), mean=3.09, stddev=0.521]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1055, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.00403], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.69,0.71 0.74,0.78,0.84,0.91,0.94 0.98,1.0,1.0,1.1), mean=0.84, stddev=0.0811], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09701, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.77,0.80,0.87 0.90,0.99,1.1,1.2,1.2 1.3,1.4,1.4,1.4), mean=1.09, stddev=0.135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.82,0.83,0.91 0.94,0.98,1.1,1.2,1.3 1.3,1.3,1.3,1.5), mean=1.09, stddev=0.123], bias-{mean,stddev}=-0.08193,0.03965, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.84e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.6 1.6,1.8,2.0,2.2,2.3 2.6,2.8,2.8,2.9), mean=1.99, stddev=0.311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.39,0.40 0.41,0.43,0.46,0.49,0.51 0.52,0.54,0.54,0.56), mean=0.463, stddev=0.0373], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.001), mean=0.000892, stddev=0.000119], oderiv-count=6.10272e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.4,1.6 1.6,1.8,2.0,2.2,2.3 2.6,2.7,2.8,2.9), mean=1.99, stddev=0.309], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.5,2.6,2.7 2.7,2.9,3.2,3.7,4.2 4.7,4.8,4.9,5.3), mean=3.37, stddev=0.585]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1056, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0.00309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.68,0.70 0.73,0.76,0.83,0.93,0.97 1.0,1.0,1.1,1.1), mean=0.84, stddev=0.0952], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09804, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.66,0.76 0.88,0.98,1.1,1.2,1.3 1.4,1.5,1.5,1.5), mean=1.09, stddev=0.178], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.82,0.88,0.90 0.94,0.99,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.1, stddev=0.128], bias-{mean,stddev}=-0.07026,0.03546, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.41e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.6 1.7,1.9,2.0,2.2,2.4 2.5,2.6,2.6,3.0), mean=2.03, stddev=0.297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.32,0.37 0.40,0.43,0.46,0.49,0.50 0.51,0.51,0.51,0.55), mean=0.453, stddev=0.0429], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00101, stddev=0.000139], oderiv-count=4.94208e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.6 1.7,1.8,2.0,2.2,2.3 2.4,2.6,2.7,3.1), mean=2.02, stddev=0.29], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.7,2.7,2.7 2.9,3.1,3.4,3.8,4.0 4.2,4.6,4.9,5.8), mean=3.45, stddev=0.504]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1086, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.8,1.8), mean=1.74, stddev=0.00784], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.63,0.68,0.70 0.73,0.77,0.83,0.95,1.0 1.1,1.1,1.1,1.3), mean=0.861, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1003, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.60,0.69 0.80,0.94,1.1,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.11, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.84,0.87,0.92 0.95,1.0,1.1,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.13, stddev=0.139], bias-{mean,stddev}=-0.05779,0.03814, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.52e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.4 1.7,1.8,2.1,2.4,2.6 2.7,3.0,3.0,3.1), mean=2.12, stddev=0.373], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.32,0.36 0.38,0.40,0.44,0.47,0.49 0.49,0.51,0.51,0.52), mean=0.437, stddev=0.046], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.0009 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00115, stddev=0.000187], oderiv-count=4.06771e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.3,1.5 1.6,1.8,2.1,2.4,2.5 2.7,2.9,2.9,3.1), mean=2.1, stddev=0.363], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.7,2.8,3.0 3.1,3.4,3.7,4.1,4.5 4.7,5.0,5.1,6.3), mean=3.76, stddev=0.565]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1135, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.82, stddev=0.00567], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.67,0.70,0.71 0.74,0.78,0.88,1.0,1.1 1.2,1.2,1.3,1.4), mean=0.898, stddev=0.137], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.61,0.63,0.75 0.81,0.91,1.2,1.4,1.5 1.5,1.6,1.7,1.7), mean=1.16, stddev=0.252], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,0.99,1.0 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.5,1.5), mean=1.18, stddev=0.117], bias-{mean,stddev}=-0.05085,0.04036, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.73e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.4,1.6 1.7,1.8,2.2,2.5,2.6 2.7,2.8,2.9,3.0), mean=2.16, stddev=0.357], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.31,0.33 0.36,0.38,0.43,0.46,0.48 0.49,0.49,0.50,0.53), mean=0.421, stddev=0.0477], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00143, stddev=0.00022], oderiv-count=2.83642e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.6 1.7,1.9,2.2,2.4,2.5 2.7,2.8,2.9,3.0), mean=2.13, stddev=0.333], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.9,2.9,3.1 3.2,3.5,4.0,4.5,4.9 5.3,5.5,5.7,5.8), mean=4.04, stddev=0.665]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.81, stddev=0.00721], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.67,0.68 0.72,0.77,0.87,1.0,1.1 1.2,1.2,1.3,1.4), mean=0.895, stddev=0.149], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.64 0.72,0.84,1.1,1.4,1.6 1.7,1.7,1.7,1.8), mean=1.14, stddev=0.317], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.94,0.99 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.6), mean=1.18, stddev=0.123], bias-{mean,stddev}=-0.04548,0.04762, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.22e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.3 1.4,1.7,2.0,2.3,2.5 2.7,2.9,3.0,3.8), mean=2.01, stddev=0.436], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.23,0.25 0.29,0.34,0.39,0.45,0.45 0.47,0.48,0.49,0.53), mean=0.385, stddev=0.0637], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.003), mean=0.00208, stddev=0.000335], oderiv-count=1.7952e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.2,1.2,1.3 1.5,1.7,2.0,2.3,2.6 2.7,3.1,3.2,3.7), mean=2.02, stddev=0.429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.8,2.8,3.1 3.4,3.6,4.2,4.8,5.4 5.9,6.1,6.5,7.3), mean=4.32, stddev=0.84]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1049, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.68, stddev=0.00458], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.62,0.65 0.68,0.72,0.80,0.92,1.0 1.1,1.2,1.2,1.3), mean=0.828, stddev=0.136], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0996, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.61,0.63 0.67,0.81,1.1,1.4,1.5 1.6,1.6,1.7,1.8), mean=1.09, stddev=0.3], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.93,0.94 0.96,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.3), mean=1.12, stddev=0.103], bias-{mean,stddev}=-0.05521,0.06695, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.91e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.92,0.95,1.0 1.1,1.4,1.6,2.0,2.2 2.3,2.5,2.6,3.1), mean=1.68, stddev=0.406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.20,0.25,0.33,0.42,0.47 0.49,0.50,0.51,0.54), mean=0.336, stddev=0.0937], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.005,0.005,0.006 0.007,0.007,0.007,0.009), mean=0.00486, stddev=0.00101], oderiv-count=617984
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.99,1.0,1.1 1.2,1.4,1.6,1.9,2.1 2.4,2.5,2.5,3.0), mean=1.68, stddev=0.386], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.9,3.0,3.2,3.3 3.4,3.6,4.1,5.0,5.3 5.7,5.9,5.9,6.0), mean=4.27, stddev=0.749]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.005, max-change=0.75, params-rms=0.1145, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.3, stddev=0.014], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.67,0.71 0.76,0.82,0.92,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.91, stddev=0.106], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2025, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.4 1.4,1.5,1.6,1.7,1.8 1.9,2.0,2.0,2.1), mean=1.61, stddev=0.158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.0,2.1 2.1,2.2,2.3,2.4,2.5 2.5,2.6,2.6,2.7), mean=2.29, stddev=0.157], bias-{mean,stddev}=-0.001032,0.1126, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.08e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.7 1.8,1.8,2.1,2.4,2.5 2.6,2.8,2.8,2.9), mean=2.1, stddev=0.291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.34,0.35 0.36,0.37,0.39,0.41,0.43 0.44,0.44,0.44,0.46), mean=0.39, stddev=0.0279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.009 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0103, stddev=0.00121], oderiv-count=616896
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.7 1.8,1.9,2.0,2.4,2.5 2.5,2.6,2.7,2.9), mean=2.09, stddev=0.276], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,4.0,4.0,4.1 4.2,4.4,4.8,5.5,6.1 6.3,6.7,6.7,7.1), mean=4.97, stddev=0.718]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, params-rms=0.2478, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.8,2.8,2.8 2.8,2.8,2.8,2.8,2.8 2.8,2.8,2.8,2.8), mean=2.8, stddev=0.00602], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.6 1.8,1.9,2.0,2.1,2.2 2.2,2.3,2.4,2.4), mean=1.97, stddev=0.176], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-5e-08 -4e-08,-2e-08,-4e-09,2e-08,3e-08 5e-08,6e-08,6e-08,6e-08), mean=-3.65e-10, stddev=2.83e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.1,3.1,3.1,3.2 3.2,3.3,3.5,3.6,3.8 3.9,4.0,4.2,4.3), mean=3.49, stddev=0.239]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0109543, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.1764, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.09,0.16,0.34 0.53,0.79,1.4,1.8,1.9 2.0,2.1,2.2,2.7), mean=1.31, stddev=0.527], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9.2,9.2,9.4,10 10,11,11,12,12 13,13,13,13), mean=11.2, stddev=0.835], bias-{mean,stddev}=0.0005086,0.2634, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1628, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.84,1.0,1.1 1.2,1.2,1.3,1.4,1.4 1.4,1.5,1.5,1.6), mean=1.3, stddev=0.12], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.8,1.9,2.0 2.0,2.1,2.1,2.2), mean=1.84, stddev=0.142], bias-{mean,stddev}=-0.009215,0.181, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.07e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.78,0.79,0.82 0.88,0.96,1.2,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.15, stddev=0.201], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.37,0.39 0.40,0.42,0.46,0.50,0.51 0.53,0.55,0.55,0.57), mean=0.461, stddev=0.0436], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.004,0.005,0.005,0.005 0.005,0.006,0.006,0.01), mean=0.00471, stddev=0.000793], oderiv-count=612544
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.71,0.72,0.78 0.87,0.96,1.1,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.13, stddev=0.206], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.5,1.6,1.8,1.9,2.1 2.1,2.2,2.2,2.3), mean=1.77, stddev=0.215]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0109543, l2-regularize=0.0005, max-change=0.75, params-rms=0.1619, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.83, stddev=0.00195], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.0,1.1 1.1,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.29, stddev=0.125], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-3e-08 -3e-08,-2e-08,2e-09,3e-08,3e-08 4e-08,4e-08,4e-08,5e-08), mean=3.09e-09, stddev=2.31e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.9,1.9,2.0,2.0,2.1 2.1,2.1,2.2,2.2), mean=1.97, stddev=0.0974]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0547713, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1854, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.20 0.60,0.95,1.4,1.9,2.1 2.2,2.4,2.4,3.6), mean=1.37, stddev=0.561], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,12,12,12,12 12,12,12,12), mean=11.8, stddev=0.256], bias-{mean,stddev}=-2.898e-08,0.2192, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000778, stddev=0.00121], oderiv-count=628864
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/43.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/44.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.5291 tdnnf2.linear:4.86687 tdnnf2.affine:5.29993 tdnnf3.linear:4.43031 tdnnf3.affine:5.0457 tdnnf4.linear:4.04317 tdnnf4.affine:4.66083 tdnnf5.linear:3.70775 tdnnf5.affine:4.38682 tdnnf6.linear:3.59562 tdnnf6.affine:4.1957 tdnnf7.linear:3.45935 tdnnf7.affine:4.06447 tdnnf8.linear:3.31949 tdnnf8.affine:3.9144 tdnnf9.linear:3.28576 tdnnf9.affine:4.00505 tdnnf10.linear:3.36376 tdnnf10.affine:4.1358 tdnnf11.linear:3.54483 tdnnf11.affine:4.44323 tdnnf12.linear:3.7 tdnnf12.affine:4.59718 tdnnf13.linear:4.03234 tdnnf13.affine:5.1223 prefinal-l:2.42641 prefinal-chain.affine:4.56961 prefinal-chain.linear:3.69127 output.affine:12.2761 prefinal-xent.affine:3.43969 prefinal-xent.linear:2.22578 output-xent.affine:12.5201 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.5179 tdnnf2.linear:18.1605 tdnnf2.affine:17.1565 tdnnf3.linear:15.8852 tdnnf3.affine:15.0227 tdnnf4.linear:13.9473 tdnnf4.affine:13.6563 tdnnf5.linear:13.1195 tdnnf5.affine:12.9844 tdnnf6.linear:12.9205 tdnnf6.affine:12.4248 tdnnf7.linear:13.0383 tdnnf7.affine:12.3293 tdnnf8.linear:13.5091 tdnnf8.affine:12.46 tdnnf9.linear:13.5221 tdnnf9.affine:12.5803 tdnnf10.linear:13.9018 tdnnf10.affine:12.8654 tdnnf11.linear:14.5338 tdnnf11.affine:13.4278 tdnnf12.linear:14.519 tdnnf12.affine:13.4195 tdnnf13.linear:13.4235 tdnnf13.affine:12.7867 prefinal-l:10.3609 prefinal-chain.affine:18.3721 prefinal-chain.linear:22.4257 output.affine:91.2222 prefinal-xent.affine:14.8814 prefinal-xent.linear:14.6523 output-xent.affine:95.2771 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.289419 tdnnf2.linear:0.267804 tdnnf2.affine:0.308183 tdnnf3.linear:0.277903 tdnnf3.affine:0.333756 tdnnf4.linear:0.288408 tdnnf4.affine:0.339228 tdnnf5.linear:0.281499 tdnnf5.affine:0.333713 tdnnf6.linear:0.276836 tdnnf6.affine:0.335718 tdnnf7.linear:0.263826 tdnnf7.affine:0.328105 tdnnf8.linear:0.245296 tdnnf8.affine:0.314064 tdnnf9.linear:0.243198 tdnnf9.affine:0.318855 tdnnf10.linear:0.242001 tdnnf10.affine:0.321419 tdnnf11.linear:0.244002 tdnnf11.affine:0.330688 tdnnf12.linear:0.253404 tdnnf12.affine:0.341263 tdnnf13.linear:0.299361 tdnnf13.affine:0.399873 prefinal-l:0.234091 prefinal-chain.affine:0.24917 prefinal-chain.linear:0.165001 output.affine:0.135529 prefinal-xent.affine:0.231166 prefinal-xent.linear:0.151835 output-xent.affine:0.131672 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 06:45:03 CST 2020, elapsed time 3 seconds
