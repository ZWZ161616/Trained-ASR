# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/212.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/211.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/212.mdl 
# Started at Mon Feb 24 11:20:47 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/212.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1519, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.4,1.5 1.7,1.8,2.1,2.6,3.0 3.2,3.3,3.4,3.6), mean=2.2, stddev=0.487], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.59,0.60,0.70 0.77,0.91,1.6,2.1,2.5 2.8,2.9,3.1,3.6), mean=1.59, stddev=0.645], bias-{mean,stddev}=-0.1484,0.2168, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.81e+06, self-repaired-proportion=0.0160317, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.009,0.02 0.03,0.05,0.11,0.20,0.24 0.28,0.35,0.35,0.37), mean=0.127, stddev=0.0868], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.06,0.08 0.11,0.18,0.30,0.49,0.65 0.72,0.78,0.78,0.80), mean=0.345, stddev=0.196], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.04,0.05,0.06 0.07,0.08,0.08,0.13), mean=0.0387, stddev=0.0173], oderiv-count=1.28895e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.007,0.02 0.03,0.05,0.10,0.21,0.25 0.28,0.35,0.36,0.39), mean=0.127, stddev=0.0889], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.05,0.09 0.11,0.15,0.21,0.29,0.31 0.33,0.33,0.34,0.35), mean=0.214, stddev=0.0771]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.330159, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.125, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=2, stddev=0.00258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.72,0.78,0.81 0.85,0.90,0.99,1.1,1.1 1.2,1.2,1.3,1.4), mean=0.993, stddev=0.116], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1242, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.2 1.2,1.3,1.4,1.5,1.6 1.7,1.8,1.8,1.8), mean=1.4, stddev=0.154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.3,1.3,1.4,1.5,1.5 1.6,1.6,1.6,1.7), mean=1.4, stddev=0.108], bias-{mean,stddev}=-0.1834,0.1073, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.2e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,1.1,1.3 1.4,1.5,1.7,2.0,2.1 2.1,2.2,2.2,2.3), mean=1.73, stddev=0.267], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.37,0.37 0.40,0.45,0.54,0.58,0.59 0.60,0.60,0.60,0.62), mean=0.514, stddev=0.0707], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.006,0.007,0.008), mean=0.00175, stddev=0.00107], oderiv-count=1.17995e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,1.1,1.3 1.4,1.5,1.7,2.0,2.1 2.2,2.2,2.2,2.3), mean=1.73, stddev=0.275], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.7,1.8,2.0 2.2,2.4,2.7,3.1,3.4 3.5,3.8,3.9,4.0), mean=2.75, stddev=0.479]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.330159, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1111, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.78, stddev=0.0055], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.71,0.72,0.74 0.77,0.81,0.88,0.96,1.0 1.0,1.1,1.1,1.2), mean=0.884, stddev=0.092], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.95,0.97,1.1 1.2,1.2,1.3,1.4,1.5 1.6,1.6,1.6,1.7), mean=1.3, stddev=0.154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.31, stddev=0.105], bias-{mean,stddev}=-0.1868,0.09472, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.85e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,1.2,1.3,1.5 1.7,1.8,2.0,2.2,2.3 2.4,2.5,2.5,2.7), mean=2, stddev=0.276], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.39,0.40 0.44,0.47,0.52,0.56,0.58 0.58,0.59,0.59,0.60), mean=0.515, stddev=0.0518], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0007 0.0008,0.0008,0.0009,0.001,0.002 0.003,0.003,0.004,0.007), mean=0.00113, stddev=0.000782], oderiv-count=1.0685e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,1.2,1.2,1.5 1.7,1.8,2.0,2.2,2.3 2.4,2.5,2.6,2.6), mean=1.98, stddev=0.284], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.6,1.8,2.4 2.6,2.8,3.1,3.5,3.7 3.9,4.4,4.5,4.5), mean=3.13, stddev=0.522]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.330159, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1052, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.68, stddev=0.00258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.67,0.71 0.74,0.78,0.84,0.90,0.93 0.98,1.0,1.0,1.1), mean=0.838, stddev=0.0787], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1087, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.66,0.68,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.22, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.96,1.0,1.0 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.5,2.0), mean=1.22, stddev=0.151], bias-{mean,stddev}=-0.1761,0.09771, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.92e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.90,0.93,1.7 1.8,1.9,2.2,2.4,2.5 2.7,2.7,2.7,3.0), mean=2.13, stddev=0.355], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.42 0.43,0.46,0.51,0.55,0.56 0.57,0.58,0.58,0.59), mean=0.503, stddev=0.0478], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0006 0.0006,0.0006,0.0007,0.0008,0.001 0.002,0.003,0.004,0.005), mean=0.000866, stddev=0.000618], oderiv-count=9.856e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.87,0.95,1.7 1.8,1.9,2.1,2.4,2.5 2.6,2.7,2.7,3.0), mean=2.12, stddev=0.342], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.4,2.6 2.9,2.9,3.3,3.8,4.1 4.4,4.8,4.9,5.6), mean=3.4, stddev=0.646]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.330159, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09737, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.56, stddev=0.00258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.62,0.64 0.67,0.70,0.77,0.84,0.87 0.91,0.96,1.0,1.0), mean=0.775, stddev=0.0816], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0955, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.59,0.90 0.94,1.0,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.07, stddev=0.131], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.88,0.88,0.89 0.94,0.99,1.1,1.1,1.2 1.3,1.3,1.3,1.3), mean=1.08, stddev=0.106], bias-{mean,stddev}=-0.1449,0.06434, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.78,0.82,1.5 1.6,1.7,1.9,2.1,2.3 2.3,2.4,2.4,2.5), mean=1.9, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.41,0.43 0.47,0.48,0.52,0.54,0.57 0.58,0.59,0.59,0.60), mean=0.513, stddev=0.0426], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0007 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.003,0.003), mean=0.000899, stddev=0.000367], oderiv-count=8.83667e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.83,0.91,1.5 1.6,1.7,1.9,2.1,2.3 2.3,2.3,2.4,2.7), mean=1.89, stddev=0.288], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.6,2.4 2.5,2.6,2.9,3.2,3.4 3.7,4.1,4.2,4.9), mean=2.92, stddev=0.487]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.330159, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09171, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.47, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.57,0.59,0.61 0.63,0.66,0.73,0.80,0.82 0.86,0.87,0.91,0.96), mean=0.73, stddev=0.0771], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08693, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.65,0.67,0.84 0.86,0.90,0.98,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.977, stddev=0.109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.81,0.84 0.86,0.89,0.96,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.978, stddev=0.1], bias-{mean,stddev}=-0.1425,0.05903, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.37e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,1.1,1.1,1.3 1.4,1.5,1.7,1.8,2.0 2.0,2.1,2.1,2.2), mean=1.67, stddev=0.237], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.38,0.42 0.43,0.46,0.50,0.53,0.55 0.56,0.57,0.58,0.59), mean=0.496, stddev=0.0436], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0008,0.0009,0.0009,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.000988, stddev=0.000183], oderiv-count=7.98912e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,1.1,1.1,1.2 1.4,1.5,1.7,1.9,2.0 2.1,2.2,2.2,2.3), mean=1.67, stddev=0.245], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.8,1.9,2.0 2.2,2.3,2.5,2.9,3.0 3.2,3.5,3.6,4.1), mean=2.58, stddev=0.388]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.330159, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09344, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.49, stddev=0.00437], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.59,0.62 0.64,0.68,0.74,0.81,0.84 0.86,0.88,0.91,0.94), mean=0.744, stddev=0.0759], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0878, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.61,0.62,0.80 0.84,0.89,1.0,1.1,1.1 1.1,1.2,1.2,1.3), mean=0.986, stddev=0.124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.80,0.80,0.84 0.86,0.89,0.98,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.988, stddev=0.102], bias-{mean,stddev}=-0.1262,0.0628, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.63e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.77,1.0,1.2 1.4,1.5,1.6,1.8,2.0 2.1,2.2,2.2,2.3), mean=1.66, stddev=0.254], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.40 0.43,0.45,0.47,0.51,0.52 0.53,0.56,0.56,0.59), mean=0.474, stddev=0.0435], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.000997, stddev=0.000198], oderiv-count=6.93101e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.70,1.0,1.2 1.4,1.5,1.7,1.8,2.0 2.1,2.1,2.2,2.5), mean=1.66, stddev=0.269], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,2.0,2.1 2.2,2.3,2.6,2.9,3.3 3.4,3.6,3.7,4.2), mean=2.67, stddev=0.428]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.330159, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09623, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.54, stddev=0.00207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.60,0.63 0.66,0.70,0.77,0.82,0.87 0.91,0.95,0.97,1.0), mean=0.765, stddev=0.0822], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08887, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.59,0.77 0.82,0.89,0.99,1.1,1.2 1.2,1.2,1.2,1.3), mean=0.995, stddev=0.145], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.81,0.82,0.85 0.87,0.91,0.98,1.1,1.1 1.2,1.3,1.3,1.3), mean=1, stddev=0.109], bias-{mean,stddev}=-0.09713,0.0656, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.67e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.86,0.91,1.3 1.4,1.5,1.7,1.9,2.2 2.4,2.5,2.5,2.6), mean=1.74, stddev=0.322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.31,0.39 0.42,0.43,0.46,0.49,0.50 0.50,0.53,0.54,0.67), mean=0.457, stddev=0.0455], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.000991, stddev=0.000164], oderiv-count=5.81062e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.86,0.86,1.3 1.4,1.5,1.7,1.9,2.2 2.4,2.5,2.5,2.7), mean=1.74, stddev=0.33], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.1,2.1,2.3 2.4,2.5,2.8,3.2,3.7 3.9,4.1,4.1,4.2), mean=2.92, stddev=0.474]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.330159, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00249], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.56,0.61,0.64 0.67,0.71,0.79,0.88,0.92 0.97,0.99,1.0,1.1), mean=0.795, stddev=0.1], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09173, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.56,0.73 0.81,0.91,1.0,1.2,1.2 1.2,1.3,1.3,1.3), mean=1.03, stddev=0.16], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.80,0.82,0.85 0.89,0.94,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.03, stddev=0.107], bias-{mean,stddev}=-0.07961,0.0564, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.16e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.85,0.87,1.2 1.5,1.6,1.8,2.0,2.2 2.3,2.5,2.5,2.6), mean=1.8, stddev=0.322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.29,0.38 0.41,0.43,0.45,0.48,0.48 0.49,0.50,0.51,0.52), mean=0.446, stddev=0.0412], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.00109, stddev=0.000156], oderiv-count=4.8816e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.81,0.83,1.3 1.5,1.6,1.8,2.0,2.3 2.3,2.6,2.6,2.6), mean=1.81, stddev=0.328], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.3,2.3,2.4 2.5,2.7,3.1,3.4,3.6 3.9,4.1,4.2,4.7), mean=3.11, stddev=0.451]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.330159, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1015, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.59,0.62,0.63 0.66,0.71,0.80,0.89,0.96 1.0,1.1,1.1,1.1), mean=0.803, stddev=0.115], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09156, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.69,0.74 0.83,0.89,1.0,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.02, stddev=0.161], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.74,0.78,0.83 0.85,0.93,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.03, stddev=0.12], bias-{mean,stddev}=-0.07595,0.04301, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.61e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.91,1.3,1.4 1.4,1.5,1.7,1.8,1.9 1.9,2.1,2.1,2.2), mean=1.66, stddev=0.214], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.34,0.36 0.37,0.40,0.43,0.46,0.48 0.48,0.49,0.49,0.51), mean=0.426, stddev=0.0436], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00137, stddev=0.000174], oderiv-count=3.72531e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.88,1.2,1.3 1.4,1.5,1.6,1.8,1.9 2.0,2.1,2.1,2.2), mean=1.65, stddev=0.23], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.5,2.5,2.6 2.6,2.8,3.0,3.4,3.8 4.0,4.2,4.2,4.5), mean=3.12, stddev=0.448]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.330159, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09685, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.59,0.60 0.63,0.67,0.75,0.87,0.94 0.97,1.0,1.0,1.1), mean=0.766, stddev=0.115], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08928, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.52,0.69 0.76,0.84,0.99,1.2,1.2 1.3,1.3,1.3,1.4), mean=0.992, stddev=0.191], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.80,0.82,0.84 0.86,0.92,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1, stddev=0.102], bias-{mean,stddev}=-0.08532,0.05164, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.84e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.85,0.85,1.1 1.1,1.3,1.4,1.5,1.6 1.6,1.8,1.8,2.0), mean=1.39, stddev=0.188], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.27,0.30 0.33,0.36,0.40,0.44,0.46 0.47,0.47,0.47,0.48), mean=0.394, stddev=0.0514], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00193, stddev=0.000212], oderiv-count=2.83642e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.82,0.83,1.0 1.1,1.2,1.4,1.5,1.6 1.7,1.8,1.8,2.0), mean=1.39, stddev=0.202], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.3,2.4,2.5 2.6,2.7,3.1,3.7,3.9 4.1,4.3,4.3,4.7), mean=3.22, stddev=0.529]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.330159, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09557, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.53, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.56,0.56,0.58 0.61,0.65,0.75,0.87,0.91 0.94,0.98,1.0,1.1), mean=0.756, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08947, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.50,0.55,0.68 0.71,0.81,0.97,1.2,1.3 1.3,1.3,1.3,1.3), mean=0.989, stddev=0.215], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.80,0.82,0.84 0.86,0.92,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.01, stddev=0.106], bias-{mean,stddev}=-0.09394,0.07061, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.3e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.78,0.82,0.89 0.99,1.1,1.2,1.4,1.5 1.6,1.7,1.7,2.6), mean=1.26, stddev=0.233], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.19,0.22 0.25,0.29,0.37,0.42,0.45 0.47,0.49,0.50,0.63), mean=0.36, stddev=0.0798], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.004,0.004,0.004), mean=0.00278, stddev=0.000364], oderiv-count=1.85395e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.75,0.77,0.89 0.98,1.1,1.2,1.4,1.5 1.6,1.7,1.9,2.6), mean=1.26, stddev=0.247], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.6,2.6,2.8 2.8,3.0,3.5,4.2,4.5 4.7,4.9,5.0,5.2), mean=3.59, stddev=0.641]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.330159, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1012, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.60,0.64 0.66,0.70,0.79,0.91,0.95 0.98,1.0,1.0,1.1), mean=0.801, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09481, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.60,0.69 0.79,0.89,1.0,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.05, stddev=0.21], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.84,0.85,0.89 0.93,0.98,1.1,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.07, stddev=0.107], bias-{mean,stddev}=-0.09595,0.08937, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.87e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.77,0.83,0.88 1.0,1.1,1.3,1.4,1.6 1.6,1.7,1.7,1.8), mean=1.27, stddev=0.212], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.16,0.17 0.21,0.28,0.35,0.43,0.45 0.47,0.49,0.50,0.54), mean=0.347, stddev=0.0887], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.005,0.006,0.006 0.007,0.008,0.008,0.008), mean=0.0055, stddev=0.000762], oderiv-count=617984
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.82,0.84,0.92 1.0,1.2,1.3,1.5,1.6 1.7,1.7,1.7,1.8), mean=1.31, stddev=0.215], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,3.0,3.0,3.0 3.4,3.7,4.3,5.0,5.7 5.9,6.1,6.3,6.4), mean=4.41, stddev=0.834]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.330159, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.005, max-change=0.75, params-rms=0.1401, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.59, stddev=0.0193], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.88,0.91,0.93 0.99,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.12, stddev=0.104], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2042, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.4 1.4,1.5,1.7,1.7,1.8 1.8,1.9,1.9,1.9), mean=1.63, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.1 2.1,2.2,2.3,2.4,2.5 2.5,2.6,2.6,2.6), mean=2.31, stddev=0.13], bias-{mean,stddev}=-0.0635,0.1304, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.08e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.9,1.9,2.0 2.1,2.2,2.4,2.7,2.9 3.0,3.3,3.3,3.4), mean=2.45, stddev=0.321], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.34 0.35,0.36,0.38,0.41,0.42 0.43,0.45,0.47,0.47), mean=0.384, stddev=0.0291], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00902, stddev=0.00119], oderiv-count=623424
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.8,1.9,2.0 2.1,2.2,2.4,2.7,3.0 3.1,3.3,3.4,3.5), mean=2.49, stddev=0.338], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.1,5.1,5.6,6.0 6.2,6.5,7.3,8.1,8.6 8.9,10,10,13), mean=7.42, stddev=1.11]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, params-rms=0.299, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,3.4,3.4,3.4 3.4,3.4,3.4,3.4,3.4 3.4,3.4,3.4,3.4), mean=3.38, stddev=0.0116], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.7,1.9 2.0,2.1,2.4,2.6,2.7 2.8,2.9,2.9,2.9), mean=2.38, stddev=0.282], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-6e-08,-4e-08 -3e-08,-2e-08,-3e-09,2e-08,2e-08 3e-08,3e-08,6e-08,7e-08), mean=-1.1e-09, stddev=2.39e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.6,3.6,3.7,3.7 3.8,3.9,4.1,4.3,4.5 4.6,4.7,4.8,4.8), mean=4.14, stddev=0.275]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00320812, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2349, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.15,0.26,0.57 0.90,1.3,1.9,2.2,2.4 2.5,2.7,2.8,3.5), mean=1.78, stddev=0.593], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(13,13,13,14 14,14,15,16,16 17,17,17,18), mean=14.9, stddev=0.993], bias-{mean,stddev}=0.001418,0.3372, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1503, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.75,0.83,1.0 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.4,1.8), mean=1.2, stddev=0.122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.5,1.6,1.7,1.8,1.8 1.9,1.9,1.9,2.0), mean=1.7, stddev=0.13], bias-{mean,stddev}=-0.08645,0.1857, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.8e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.86,0.87,0.97 1.0,1.1,1.2,1.4,1.7 1.8,1.9,2.0,2.1), mean=1.29, stddev=0.253], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.36,0.40 0.42,0.44,0.48,0.51,0.56 0.60,0.61,0.62,0.68), mean=0.482, stddev=0.0595], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.004,0.005,0.005,0.005 0.005,0.006,0.007,0.008), mean=0.00463, stddev=0.000569], oderiv-count=610368
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.85,0.90,0.95 1.0,1.1,1.3,1.5,1.7 1.8,1.9,2.1,2.2), mean=1.3, stddev=0.271], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.7,2.0,2.2,2.3 2.4,2.5,2.5,3.5), mean=1.98, stddev=0.301]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00320812, l2-regularize=0.0005, max-change=0.75, params-rms=0.1488, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.68, stddev=0.00109], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.82,0.91,0.96 1.0,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.18, stddev=0.132], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-3e-08 -3e-08,-2e-08,5e-09,2e-08,3e-08 4e-08,4e-08,5e-08,5e-08), mean=3.08e-09, stddev=2.23e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.6,1.7,1.7,1.8,1.9 2.0,2.0,2.1,2.1), mean=1.75, stddev=0.12]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0160406, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1878, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.08,0.26 0.66,0.95,1.4,1.9,2.1 2.2,2.3,2.4,3.3), mean=1.4, stddev=0.553], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,12 12,12,12,12,12 12,12,12,12), mean=11.9, stddev=0.235], bias-{mean,stddev}=3.411e-08,0.2432, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000781, stddev=0.0012], oderiv-count=634304
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/211.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/212.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.12426 tdnnf2.linear:4.57344 tdnnf2.affine:5.10265 tdnnf3.linear:3.92692 tdnnf3.affine:4.67037 tdnnf4.linear:3.63686 tdnnf4.affine:4.39248 tdnnf5.linear:3.36101 tdnnf5.affine:3.79798 tdnnf6.linear:3.03383 tdnnf6.affine:3.40516 tdnnf7.linear:2.95632 tdnnf7.affine:3.35901 tdnnf8.linear:2.82776 tdnnf8.affine:3.22287 tdnnf9.linear:2.89599 tdnnf9.affine:3.30834 tdnnf10.linear:2.97219 tdnnf10.affine:3.53579 tdnnf11.linear:3.03072 tdnnf11.affine:3.7214 tdnnf12.linear:3.20034 tdnnf12.affine:3.93334 tdnnf13.linear:3.6041 tdnnf13.affine:4.4775 prefinal-l:4.56113 prefinal-chain.affine:4.92659 prefinal-chain.linear:5.26723 output.affine:14.2225 prefinal-xent.affine:2.7155 prefinal-xent.linear:1.70239 output-xent.affine:11.7784 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.6564 tdnnf2.linear:16.0013 tdnnf2.affine:16.0814 tdnnf3.linear:14.2236 tdnnf3.affine:15.0332 tdnnf4.linear:13.4717 tdnnf4.affine:14.0999 tdnnf5.linear:12.4638 tdnnf5.affine:12.3554 tdnnf6.linear:11.7394 tdnnf6.affine:11.263 tdnnf7.linear:11.96 tdnnf7.affine:11.351 tdnnf8.linear:12.3172 tdnnf8.affine:11.4529 tdnnf9.linear:12.8221 tdnnf9.affine:11.7927 tdnnf10.linear:12.9861 tdnnf10.affine:11.7611 tdnnf11.linear:12.397 tdnnf11.affine:11.4836 tdnnf12.linear:12.2333 tdnnf12.affine:11.5285 tdnnf13.linear:12.9504 tdnnf13.affine:12.2254 prefinal-l:12.6847 prefinal-chain.affine:18.5561 prefinal-chain.linear:27.0637 output.affine:121.341 prefinal-xent.affine:13.8039 prefinal-xent.linear:13.4709 output-xent.affine:96.7299 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.353013 tdnnf2.linear:0.284408 tdnnf2.affine:0.316155 tdnnf3.linear:0.274895 tdnnf3.affine:0.307727 tdnnf4.linear:0.267402 tdnnf4.affine:0.307795 tdnnf5.linear:0.267338 tdnnf5.affine:0.305297 tdnnf6.linear:0.257286 tdnnf6.affine:0.30119 tdnnf7.linear:0.247483 tdnnf7.affine:0.295421 tdnnf8.linear:0.229158 tdnnf8.affine:0.281052 tdnnf9.linear:0.225347 tdnnf9.affine:0.280555 tdnnf10.linear:0.228456 tdnnf10.affine:0.300101 tdnnf11.linear:0.243412 tdnnf11.affine:0.323086 tdnnf12.linear:0.260469 tdnnf12.affine:0.340339 tdnnf13.linear:0.277816 tdnnf13.affine:0.365489 prefinal-l:0.362193 prefinal-chain.affine:0.265146 prefinal-chain.linear:0.194004 output.affine:0.117151 prefinal-xent.affine:0.19616 prefinal-xent.linear:0.12597 output-xent.affine:0.121904 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 11:20:50 CST 2020, elapsed time 3 seconds
