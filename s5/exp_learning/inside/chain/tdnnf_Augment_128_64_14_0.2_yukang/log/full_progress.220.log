# nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/219.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/220.mdl 
# Started at Mon Feb 24 11:31:41 CST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/219.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/220.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.05377, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.59,0.60,0.62 0.64,0.68,0.79,0.88,0.93 0.96,1.0,1.1,1.1), mean=0.79, stddev=0.111], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.26,0.28 0.29,0.33,0.56,0.80,0.87 0.94,0.98,0.98,1.1), mean=0.567, stddev=0.22], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.18 0.23,0.31,0.62,1.0,1.3 1.4,1.5,1.5,1.7), mean=0.694, stddev=0.393], bias-{mean,stddev}=0.000694,0.03648, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.82e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.39,-0.35,-0.19,-0.11 -0.08,-0.008,0.11,0.34,0.43 0.51,0.68,0.70,0.93), mean=0.16, stddev=0.216], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.87,-0.72,-0.27 -0.15,0.02,0.34,0.74,0.89 1.1,1.2,1.3,1.8), mean=0.382, stddev=0.452], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0.07,0.11,0.11,0.16), mean=0.00753, stddev=0.0265], oderiv-count=390592
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.307937, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03427, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.48,0.49 0.51,0.52,0.55,0.57,0.59 0.59,0.60,0.60,0.63), mean=0.547, stddev=0.032], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.23,0.24,0.27,0.30,0.31 0.32,0.34,0.35,0.35), mean=0.272, stddev=0.0317], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.25 0.28,0.33,0.48,0.67,0.77 0.83,0.90,0.91,0.95), mean=0.515, stddev=0.189], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03871, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.37 0.39,0.40,0.44,0.47,0.48 0.49,0.51,0.52,0.53), mean=0.436, stddev=0.0391], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.37,0.38 0.39,0.40,0.44,0.46,0.48 0.49,0.50,0.50,0.52), mean=0.437, stddev=0.0332], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.006,0.01,0.02 0.05,0.10,0.31,0.60,0.73 0.81,0.88,0.91,0.99), mean=0.355, stddev=0.256], bias-{mean,stddev}=-0.0001731,0.01551, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.54e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-1.2,-1.2,-0.74 0.007,0.42,1.6,3.2,4.1 4.5,5.9,6.3,8.4), mean=1.81, stddev=1.72], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-1.2,-0.75,-0.50 -0.21,0.08,0.53,0.91,1.1 1.1,1.5,1.6,1.9), mean=0.472, stddev=0.535]
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.307937, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02915, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.41,0.42 0.42,0.43,0.46,0.49,0.50 0.53,0.54,0.54,0.59), mean=0.465, stddev=0.0361], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.19 0.20,0.21,0.23,0.26,0.27 0.28,0.28,0.29,0.30), mean=0.232, stddev=0.0265], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.21 0.23,0.27,0.40,0.59,0.65 0.72,0.76,0.78,0.83), mean=0.434, stddev=0.17], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03647, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.34,0.35 0.37,0.38,0.41,0.44,0.46 0.47,0.48,0.48,0.51), mean=0.411, stddev=0.0353], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.35,0.36 0.37,0.38,0.41,0.44,0.45 0.46,0.47,0.47,0.49), mean=0.412, stddev=0.0299], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.001,0.008,0.02 0.05,0.10,0.29,0.55,0.68 0.77,0.84,0.86,0.95), mean=0.335, stddev=0.241], bias-{mean,stddev}=8.78e-05,0.01156, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.002,0.002 0.003,0.003,0.003,0.004), mean=0.000706, stddev=0.00101], oderiv-count=213312
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.307937, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02757, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.38,0.39 0.39,0.41,0.43,0.47,0.47 0.48,0.53,0.54,0.58), mean=0.439, stddev=0.0388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.26,0.27,0.28,0.29), mean=0.219, stddev=0.024], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.19 0.20,0.25,0.38,0.56,0.63 0.68,0.71,0.73,0.77), mean=0.41, stddev=0.162], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0348, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.32,0.33 0.34,0.36,0.39,0.43,0.44 0.45,0.46,0.46,0.49), mean=0.392, stddev=0.0368], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.35 0.35,0.37,0.39,0.42,0.43 0.44,0.45,0.45,0.47), mean=0.393, stddev=0.0298], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.003,0.01,0.02 0.05,0.10,0.27,0.53,0.66 0.75,0.82,0.83,0.85), mean=0.319, stddev=0.23], bias-{mean,stddev}=0.0009922,0.01126, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.7e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.5,-1.3,-0.91 -0.41,0.19,1.3,2.5,3.1 3.6,4.0,4.1,5.1), mean=1.31, stddev=1.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.30,-0.21,-0.15,0.09 0.20,0.36,0.56,0.75,0.85 0.97,1.1,1.1,1.3), mean=0.545, stddev=0.273]
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.307937, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0262, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.37,0.37 0.38,0.39,0.42,0.44,0.45 0.45,0.46,0.46,0.51), mean=0.418, stddev=0.0275], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.17 0.18,0.19,0.21,0.22,0.24 0.25,0.26,0.26,0.29), mean=0.208, stddev=0.0227], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.18 0.20,0.24,0.37,0.53,0.61 0.65,0.69,0.71,0.74), mean=0.39, stddev=0.153], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03003, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.29 0.30,0.31,0.34,0.36,0.38 0.38,0.39,0.39,0.43), mean=0.338, stddev=0.0294], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.30 0.31,0.32,0.34,0.36,0.37 0.38,0.38,0.40,0.40), mean=0.339, stddev=0.0225], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.003,0.008,0.02 0.04,0.09,0.24,0.45,0.57 0.63,0.68,0.69,0.75), mean=0.277, stddev=0.197], bias-{mean,stddev}=0.0005627,0.008676, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.002,0.003 0.003,0.003,0.003,0.004), mean=0.000945, stddev=0.00108], oderiv-count=110656
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.307937, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0231, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.32,0.33 0.34,0.35,0.37,0.39,0.39 0.40,0.41,0.42,0.42), mean=0.369, stddev=0.0235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.16,0.17,0.18,0.20,0.21 0.22,0.22,0.23,0.24), mean=0.184, stddev=0.0198], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.18,0.22,0.33,0.47,0.52 0.56,0.59,0.61,0.63), mean=0.345, stddev=0.132], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02589, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.26,0.27,0.29,0.31,0.33 0.33,0.35,0.35,0.37), mean=0.292, stddev=0.0254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.26 0.27,0.27,0.29,0.31,0.32 0.33,0.34,0.35,0.35), mean=0.292, stddev=0.0228], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.009,0.02 0.04,0.08,0.21,0.39,0.49 0.54,0.58,0.61,0.64), mean=0.239, stddev=0.169], bias-{mean,stddev}=0.001269,0.006686, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.68e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-2.2,-1.2,-0.83 -0.31,0.41,1.6,3.0,3.7 4.1,4.5,4.6,5.6), mean=1.64, stddev=1.59], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.36,-0.29,-0.10,0.03 0.13,0.30,0.51,0.75,0.96 1.0,1.2,1.3,1.4), mean=0.537, stddev=0.317], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.002,0.003 0.003,0.004,0.004,0.005), mean=0.000785, stddev=0.00121], oderiv-count=70080
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.307937, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02192, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.31,0.31 0.32,0.33,0.35,0.37,0.38 0.38,0.39,0.39,0.42), mean=0.35, stddev=0.0227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.15,0.16,0.17,0.19,0.20 0.21,0.22,0.22,0.24), mean=0.174, stddev=0.02], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.16,0.20,0.31,0.44,0.51 0.53,0.57,0.58,0.60), mean=0.326, stddev=0.128], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02512, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.23,0.24 0.25,0.26,0.28,0.30,0.32 0.34,0.34,0.36,0.36), mean=0.283, stddev=0.0282], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.23,0.24 0.25,0.26,0.28,0.30,0.32 0.32,0.33,0.33,0.34), mean=0.283, stddev=0.0237], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.02 0.03,0.07,0.20,0.39,0.47 0.52,0.57,0.60,0.66), mean=0.23, stddev=0.167], bias-{mean,stddev}=-0.0002594,0.006228, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.22e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-38,-31,-30,-26 -19,-12,1.5,16,23 32,35,42,66), mean=2.36, stddev=17.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.4,-8.4,-8.3,-5.8 -4.6,-3.5,-0.58,1.9,2.9 4.3,5.1,6.2,8.5), mean=-0.671, stddev=3.27], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.000576, stddev=0.000921], oderiv-count=85568
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.307937, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0216, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.30 0.32,0.32,0.34,0.36,0.38 0.40,0.40,0.41,0.42), mean=0.345, stddev=0.0265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.14,0.15,0.17,0.19,0.20 0.20,0.21,0.22,0.23), mean=0.171, stddev=0.021], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.13,0.15 0.16,0.20,0.30,0.45,0.50 0.53,0.56,0.57,0.60), mean=0.321, stddev=0.127], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02436, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.22,0.23 0.24,0.25,0.27,0.30,0.31 0.32,0.32,0.33,0.34), mean=0.274, stddev=0.0277], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.24,0.24 0.25,0.26,0.27,0.29,0.30 0.31,0.32,0.32,0.33), mean=0.275, stddev=0.0213], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.003,0.007,0.02 0.03,0.07,0.19,0.37,0.46 0.52,0.58,0.59,0.63), mean=0.222, stddev=0.164], bias-{mean,stddev}=0.0005991,0.005687, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.17e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.5,-8.2,-6.4,-4.7 -2.5,-0.73,2.8,6.8,8.8 10,12,13,18), mean=2.94, stddev=4.59], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.6,-1.3,-0.97 -0.54,-0.24,0.43,1.1,1.5 1.7,2.2,2.4,3.0), mean=0.466, stddev=0.864]
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.307937, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.31 0.31,0.32,0.34,0.37,0.38 0.39,0.39,0.40,0.42), mean=0.346, stddev=0.0257], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.14 0.15,0.16,0.17,0.19,0.20 0.21,0.21,0.22,0.22), mean=0.172, stddev=0.0209], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.13,0.14 0.16,0.19,0.30,0.44,0.50 0.55,0.56,0.58,0.61), mean=0.322, stddev=0.129], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02543, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.23,0.24 0.25,0.26,0.29,0.31,0.32 0.33,0.34,0.35,0.36), mean=0.286, stddev=0.0285], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.24,0.25 0.26,0.27,0.29,0.30,0.31 0.32,0.33,0.34,0.34), mean=0.287, stddev=0.0213], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.007,0.02 0.03,0.07,0.19,0.38,0.49 0.56,0.61,0.62,0.65), mean=0.231, stddev=0.172], bias-{mean,stddev}=-0.00128,0.00526, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.307937, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02267, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.32,0.32 0.33,0.33,0.36,0.38,0.39 0.40,0.40,0.41,0.41), mean=0.362, stddev=0.0242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.15,0.16,0.18,0.20,0.21 0.22,0.22,0.23,0.25), mean=0.18, stddev=0.0252], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.15 0.17,0.20,0.31,0.45,0.52 0.56,0.59,0.61,0.63), mean=0.336, stddev=0.136], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02664, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.23,0.24,0.25 0.26,0.27,0.30,0.32,0.34 0.35,0.36,0.37,0.40), mean=0.3, stddev=0.0336], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.26 0.27,0.28,0.30,0.32,0.33 0.34,0.36,0.36,0.36), mean=0.3, stddev=0.0253], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.007,0.02 0.03,0.07,0.20,0.41,0.50 0.57,0.62,0.64,0.67), mean=0.243, stddev=0.178], bias-{mean,stddev}=0.0006863,0.005813, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.85e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-47,-44,-42,-37 -26,-14,-0.54,15,24 32,36,40,58), mean=0.137, stddev=20], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.5,-7.7,-7.3,-5.5 -4.4,-2.4,0.63,2.6,4.4 5.3,6.5,6.6,11), mean=0.44, stddev=3.4]
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.307937, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02257, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.32 0.33,0.34,0.36,0.38,0.39 0.40,0.41,0.41,0.43), mean=0.36, stddev=0.0272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.14 0.15,0.16,0.18,0.20,0.21 0.21,0.22,0.23,0.24), mean=0.179, stddev=0.0233], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.17,0.20,0.31,0.47,0.52 0.55,0.58,0.60,0.63), mean=0.335, stddev=0.134], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02767, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.24,0.25 0.27,0.29,0.31,0.34,0.35 0.36,0.37,0.38,0.40), mean=0.311, stddev=0.0337], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.28 0.29,0.29,0.31,0.33,0.35 0.35,0.36,0.36,0.36), mean=0.312, stddev=0.0225], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.008,0.02 0.04,0.08,0.21,0.41,0.53 0.60,0.67,0.67,0.73), mean=0.251, stddev=0.186], bias-{mean,stddev}=9.834e-05,0.006452, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.307937, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02429, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.34,0.35 0.36,0.36,0.38,0.41,0.42 0.43,0.44,0.44,0.45), mean=0.388, stddev=0.0274], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.16,0.17,0.19,0.21,0.23 0.24,0.24,0.24,0.25), mean=0.193, stddev=0.0262], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.13,0.15 0.17,0.21,0.33,0.50,0.58 0.61,0.63,0.65,0.66), mean=0.358, stddev=0.15], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02941, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.27 0.28,0.30,0.33,0.36,0.38 0.39,0.41,0.41,0.46), mean=0.33, stddev=0.0401], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.29 0.30,0.31,0.33,0.35,0.37 0.37,0.38,0.38,0.41), mean=0.332, stddev=0.0271], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.008,0.02 0.04,0.08,0.22,0.43,0.56 0.63,0.71,0.74,0.80), mean=0.266, stddev=0.199], bias-{mean,stddev}=-0.0003577,0.008685, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.307937, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02736, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.39,0.39 0.40,0.41,0.44,0.46,0.47 0.47,0.50,0.50,0.51), mean=0.437, stddev=0.0298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.17 0.19,0.19,0.22,0.24,0.25 0.26,0.27,0.28,0.30), mean=0.217, stddev=0.0268], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.16,0.18 0.19,0.24,0.38,0.55,0.63 0.67,0.72,0.74,0.80), mean=0.405, stddev=0.166], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03369, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.30,0.31 0.32,0.35,0.38,0.41,0.42 0.43,0.44,0.44,0.48), mean=0.379, stddev=0.0371], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.33,0.34 0.34,0.35,0.38,0.41,0.42 0.42,0.43,0.44,0.45), mean=0.38, stddev=0.0283], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.02 0.04,0.09,0.26,0.51,0.64 0.72,0.81,0.81,0.85), mean=0.307, stddev=0.226], bias-{mean,stddev}=0.0003263,0.01288, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.307937, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.005, max-change=0.75, params-rms=0.0485, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.48,0.49 0.51,0.52,0.55,0.58,0.58 0.59,0.60,0.60,0.61), mean=0.548, stddev=0.0308], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.33 0.34,0.35,0.38,0.42,0.44 0.45,0.47,0.47,0.50), mean=0.386, stddev=0.0393], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.16,0.18 0.22,0.28,0.48,0.71,0.82 0.87,0.90,0.91,0.97), mean=0.503, stddev=0.219], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.05252, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.33,0.34,0.35 0.36,0.38,0.41,0.45,0.48 0.49,0.50,0.51,0.53), mean=0.418, stddev=0.0427], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.51,0.54 0.54,0.56,0.59,0.62,0.64 0.65,0.66,0.68,0.69), mean=0.593, stddev=0.0389], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.16,0.19 0.22,0.30,0.51,0.76,0.87 0.94,0.99,1.0,1.0), mean=0.541, stddev=0.245], bias-{mean,stddev}=-0.001008,0.01508, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.85e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-1.9,-1.8,-1.2 -0.62,-0.007,1.1,2.3,3.5 4.0,5.0,5.1,8.4), mean=1.28, stddev=1.68], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.17,-0.12,-0.05,0.03 0.08,0.19,0.42,0.60,0.69 0.82,0.93,0.96,1.4), mean=0.417, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.00883, stddev=0.00583], oderiv-count=44608
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, params-rms=0.05582, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.55,0.57 0.58,0.59,0.63,0.67,0.68 0.69,0.70,0.71,0.71), mean=0.63, stddev=0.0417], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.33,0.37 0.38,0.40,0.44,0.49,0.52 0.52,0.53,0.54,0.62), mean=0.443, stddev=0.0536], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.20 0.26,0.33,0.55,0.82,0.91 0.98,1.0,1.1,1.1), mean=0.579, stddev=0.253], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00304809, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.0261, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.003,0.006,0.02 0.03,0.04,0.12,0.27,0.36 0.43,0.50,0.54,0.88), mean=0.16, stddev=0.134], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.5,1.6,1.7,1.7,1.7 1.8,1.8,1.8,1.8), mean=1.66, stddev=0.0768], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.57,0.96 1.1,1.2,1.6,2.0,2.1 2.2,2.3,2.4,2.4), mean=1.6, stddev=0.438], bias-{mean,stddev}=2.132e-06,0.04327, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.02922, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.18,0.19 0.20,0.21,0.23,0.26,0.27 0.28,0.29,0.29,0.30), mean=0.232, stddev=0.0287], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.29 0.30,0.31,0.33,0.35,0.36 0.36,0.37,0.38,0.39), mean=0.33, stddev=0.0238], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.10,0.12 0.13,0.18,0.29,0.43,0.48 0.52,0.54,0.55,0.57), mean=0.303, stddev=0.131], bias-{mean,stddev}=-0.0007867,0.009631, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.26e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-16,-14,-13,-9.5 -7.3,-5.5,-1.3,1.9,3.4 5.3,6.7,8.1,8.7), mean=-1.77, stddev=4.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.6,-1.5,-1.2 -0.96,-0.52,0.64,1.2,1.7 1.9,2.3,2.7,3.5), mean=0.443, stddev=1]
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00304809, l2-regularize=0.0005, max-change=0.75, params-rms=0.01859, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.18,0.18 0.19,0.20,0.21,0.22,0.23 0.23,0.23,0.24,0.25), mean=0.21, stddev=0.0155], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.15,0.16,0.17 0.18,0.18,0.18,0.19), mean=0.148, stddev=0.0177], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.08,0.08 0.09,0.11,0.18,0.26,0.30 0.33,0.34,0.35,0.38), mean=0.195, stddev=0.0799], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0152404, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.02215, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.003,0.007,0.02 0.03,0.05,0.11,0.23,0.30 0.35,0.40,0.43,0.59), mean=0.142, stddev=0.106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.4,1.4,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.41, stddev=0.0537], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.78,0.82,0.85 0.91,1.0,1.4,1.7,1.8 1.9,1.9,1.9,2.0), mean=1.37, stddev=0.328], bias-{mean,stddev}=-1.652e-09,0.01671, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040

LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.03179 tdnnf2.linear:4.38603 tdnnf2.affine:4.95755 tdnnf3.linear:3.7313 tdnnf3.affine:4.67041 tdnnf4.linear:3.52839 tdnnf4.affine:4.45611 tdnnf5.linear:3.35326 tdnnf5.affine:3.84471 tdnnf6.linear:2.95629 tdnnf6.affine:3.31442 tdnnf7.linear:2.8054 tdnnf7.affine:3.21589 tdnnf8.linear:2.76445 tdnnf8.affine:3.1189 tdnnf9.linear:2.77508 tdnnf9.affine:3.25546 tdnnf10.linear:2.9022 tdnnf10.affine:3.41065 tdnnf11.linear:2.88833 tdnnf11.affine:3.54249 tdnnf12.linear:3.10917 tdnnf12.affine:3.76599 tdnnf13.linear:3.5026 tdnnf13.affine:4.31532 prefinal-l:4.39009 prefinal-chain.affine:4.75627 prefinal-chain.linear:5.05238 output.affine:13.5524 prefinal-xent.affine:2.64673 prefinal-xent.linear:1.68282 output-xent.affine:11.3136 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.4496 tdnnf2.linear:15.9039 tdnnf2.affine:15.9684 tdnnf3.linear:14.1296 tdnnf3.affine:15.0886 tdnnf4.linear:13.424 tdnnf4.affine:14.1538 tdnnf5.linear:12.441 tdnnf5.affine:12.2916 tdnnf6.linear:11.7208 tdnnf6.affine:11.2432 tdnnf7.linear:11.8331 tdnnf7.affine:11.2636 tdnnf8.linear:12.2787 tdnnf8.affine:11.3502 tdnnf9.linear:12.8296 tdnnf9.affine:11.7563 tdnnf10.linear:12.9041 tdnnf10.affine:11.6397 tdnnf11.linear:12.3087 tdnnf11.affine:11.3536 tdnnf12.linear:11.983 tdnnf12.affine:11.3103 tdnnf13.linear:12.755 tdnnf13.affine:12.1131 prefinal-l:12.5908 prefinal-chain.affine:18.4057 prefinal-chain.linear:26.6658 output.affine:120.324 prefinal-xent.affine:13.5469 prefinal-xent.linear:13.3283 output-xent.affine:97.2487 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.356548 tdnnf2.linear:0.276697 tdnnf2.affine:0.310838 tdnnf3.linear:0.265134 tdnnf3.affine:0.312283 tdnnf4.linear:0.264105 tdnnf4.affine:0.318889 tdnnf5.linear:0.271594 tdnnf5.affine:0.315757 tdnnf6.linear:0.253449 tdnnf6.affine:0.296392 tdnnf7.linear:0.237808 tdnnf7.affine:0.286339 tdnnf8.linear:0.225744 tdnnf8.affine:0.275005 tdnnf9.linear:0.217064 tdnnf9.affine:0.277808 tdnnf10.linear:0.225362 tdnnf10.affine:0.29338 tdnnf11.linear:0.234879 tdnnf11.affine:0.312084 tdnnf12.linear:0.259855 tdnnf12.affine:0.333244 tdnnf13.linear:0.274874 tdnnf13.affine:0.357466 prefinal-l:0.350813 prefinal-chain.affine:0.259133 prefinal-chain.linear:0.189387 output.affine:0.11252 prefinal-xent.affine:0.194972 prefinal-xent.linear:0.126206 output-xent.affine:0.116429 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 11:31:44 CST 2020, elapsed time 3 seconds
