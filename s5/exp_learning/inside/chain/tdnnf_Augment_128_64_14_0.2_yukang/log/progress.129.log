# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/129.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/128.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/129.mdl 
# Started at Mon Feb 24 09:16:28 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/129.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1482, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.1,1.3,1.5 1.6,1.8,2.1,2.5,2.8 3.2,3.3,3.4,3.5), mean=2.15, stddev=0.482], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.60,0.63,0.69 0.76,0.91,1.6,2.0,2.5 2.7,2.9,3.1,3.6), mean=1.56, stddev=0.622], bias-{mean,stddev}=-0.1555,0.2146, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.48e+06, self-repaired-proportion=0.0568533, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.002,0.002,0.007 0.02,0.04,0.11,0.19,0.25 0.29,0.32,0.33,0.42), mean=0.121, stddev=0.091], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.05 0.07,0.15,0.31,0.50,0.63 0.72,0.74,0.79,0.83), mean=0.334, stddev=0.206], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.06,0.08 0.10,0.13,0.21,0.22), mean=0.0518, stddev=0.0331], oderiv-count=1.3395e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.002,0.003,0.005 0.02,0.04,0.10,0.19,0.26 0.29,0.32,0.34,0.39), mean=0.121, stddev=0.0906], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.04 0.07,0.13,0.21,0.28,0.31 0.33,0.34,0.34,0.36), mean=0.204, stddev=0.0854]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.2,2.2,2.2 2.2,2.2,2.2,2.2,2.2 2.2,2.2,2.2,2.2), mean=2.16, stddev=0.00414], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.62,0.74,0.81 0.88,0.96,1.1,1.2,1.2 1.3,1.4,1.5,1.5), mean=1.07, stddev=0.151], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1337, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.3 1.3,1.4,1.5,1.6,1.7 1.8,1.9,1.9,2.0), mean=1.5, stddev=0.173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.3 1.4,1.4,1.5,1.6,1.6 1.7,1.8,1.8,1.9), mean=1.51, stddev=0.119], bias-{mean,stddev}=-0.1773,0.1142, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.54e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.4 1.7,1.8,2.0,2.2,2.4 2.4,2.5,2.5,2.7), mean=1.99, stddev=0.292], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.38 0.40,0.44,0.54,0.57,0.59 0.59,0.60,0.60,0.60), mean=0.517, stddev=0.067], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.006,0.006,0.007), mean=0.00172, stddev=0.001], oderiv-count=1.26257e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.5 1.6,1.8,2.0,2.2,2.4 2.4,2.5,2.5,2.6), mean=1.98, stddev=0.297], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,2.0,2.3 2.5,2.6,3.1,3.5,3.8 3.8,4.0,4.1,4.3), mean=3.09, stddev=0.517]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.87, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.70,0.73,0.75 0.81,0.85,0.93,1.0,1.1 1.1,1.1,1.1,1.3), mean=0.929, stddev=0.101], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1163, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,0.98,1.1 1.1,1.2,1.3,1.4,1.5 1.6,1.7,1.7,1.8), mean=1.31, stddev=0.147], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.31, stddev=0.1], bias-{mean,stddev}=-0.1613,0.07495, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.56e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.5,1.7 1.8,1.8,2.1,2.3,2.4 2.5,2.5,2.6,2.7), mean=2.07, stddev=0.252], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.42 0.45,0.47,0.53,0.55,0.57 0.58,0.58,0.59,0.59), mean=0.513, stddev=0.0469], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.002 0.002,0.004,0.005,0.005), mean=0.00122, stddev=0.000718], oderiv-count=1.08013e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.7 1.8,1.8,2.0,2.3,2.4 2.5,2.5,2.5,2.7), mean=2.07, stddev=0.254], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.3,2.5 2.7,2.9,3.3,3.7,4.0 4.1,4.4,4.6,4.6), mean=3.3, stddev=0.515]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.74, stddev=0.00375], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.72,0.74 0.76,0.80,0.86,0.93,0.96 0.99,1.0,1.1,1.2), mean=0.864, stddev=0.0799], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.82,1.1 1.1,1.2,1.3,1.4,1.5 1.5,1.6,1.6,1.6), mean=1.28, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.28, stddev=0.113], bias-{mean,stddev}=-0.1805,0.09837, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.18e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.82,1.3,1.8 1.9,2.0,2.2,2.4,2.6 2.6,2.7,2.7,3.1), mean=2.18, stddev=0.317], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.40,0.43 0.45,0.47,0.51,0.54,0.56 0.57,0.58,0.58,0.59), mean=0.506, stddev=0.0438], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0007 0.0007,0.0007,0.0008,0.0009,0.001 0.002,0.003,0.003,0.006), mean=0.000966, stddev=0.000698], oderiv-count=1.01552e+07
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.80,1.3,1.7 1.8,1.9,2.2,2.4,2.5 2.7,2.8,2.8,3.0), mean=2.17, stddev=0.328], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.9,2.8 2.9,3.1,3.5,3.9,4.2 4.6,5.0,5.1,5.4), mean=3.51, stddev=0.613]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1035, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0.00234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.68,0.70 0.72,0.75,0.82,0.89,0.94 0.97,0.99,1.0,1.0), mean=0.824, stddev=0.0803], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.78,1.0 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.18, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.92,0.96,1.0 1.1,1.1,1.2,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.19, stddev=0.114], bias-{mean,stddev}=-0.1582,0.06996, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.94e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.81,1.3,1.8 1.9,2.0,2.2,2.4,2.6 2.7,2.8,2.9,3.0), mean=2.2, stddev=0.325], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.43,0.45 0.46,0.48,0.51,0.54,0.55 0.56,0.57,0.57,0.58), mean=0.509, stddev=0.0363], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.002,0.005), mean=0.000883, stddev=0.000514], oderiv-count=8.94733e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.80,1.4,1.8 1.9,2.0,2.2,2.5,2.6 2.7,2.8,3.0,3.1), mean=2.21, stddev=0.334], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,2.3,2.8 2.9,3.1,3.4,3.8,4.2 4.3,4.6,4.9,5.6), mean=3.47, stddev=0.574]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09749, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.56, stddev=0.00169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.64,0.66 0.68,0.71,0.77,0.84,0.87 0.91,0.94,0.96,1.0), mean=0.776, stddev=0.0759], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09479, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.72,0.78,0.89 0.93,0.98,1.1,1.1,1.2 1.2,1.3,1.3,1.5), mean=1.07, stddev=0.121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.84,0.86,0.91 0.92,0.99,1.1,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.07, stddev=0.0998], bias-{mean,stddev}=-0.1444,0.06339, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.48e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,1.1,1.2,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.9, stddev=0.262], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.38,0.43 0.45,0.46,0.50,0.53,0.54 0.55,0.57,0.57,0.58), mean=0.497, stddev=0.0399], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.000999, stddev=0.000252], oderiv-count=7.98912e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,1.1,1.2,1.5 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.4,2.4), mean=1.9, stddev=0.257], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,2.0,2.2,2.4 2.5,2.7,2.9,3.3,3.5 3.7,3.8,4.0,4.2), mean=2.96, stddev=0.41]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09918, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.59, stddev=0.00434], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.62,0.65,0.67 0.68,0.72,0.78,0.86,0.90 0.93,0.97,0.99,1.0), mean=0.789, stddev=0.0827], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09397, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.68,0.87 0.93,0.97,1.0,1.1,1.2 1.2,1.3,1.3,1.5), mean=1.06, stddev=0.122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.88,0.88,0.92 0.95,0.98,1.1,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.06, stddev=0.0945], bias-{mean,stddev}=-0.132,0.06449, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.5e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,1.1,1.2,1.4 1.6,1.7,1.9,2.0,2.2 2.3,2.4,2.5,2.6), mean=1.88, stddev=0.265], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.37,0.41 0.44,0.45,0.48,0.51,0.53 0.55,0.56,0.57,0.59), mean=0.482, stddev=0.0418], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00101, stddev=0.00019], oderiv-count=7.26106e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,1.1,1.1,1.4 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.5,2.6), mean=1.88, stddev=0.269], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.1,2.3,2.4 2.6,2.7,2.9,3.3,3.6 3.8,3.9,3.9,4.3), mean=2.99, stddev=0.404]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1029, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.7), mean=1.65, stddev=0.00189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.63,0.64,0.68 0.70,0.74,0.82,0.88,0.93 0.97,1.0,1.0,1.1), mean=0.818, stddev=0.0898], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09521, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.65,0.79 0.90,0.96,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.07, stddev=0.142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.85,0.85,0.89 0.94,0.98,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.07, stddev=0.109], bias-{mean,stddev}=-0.1082,0.07503, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.76e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.1,1.2,1.5 1.6,1.7,1.9,2.1,2.3 2.6,2.7,2.7,3.1), mean=1.93, stddev=0.325], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.35,0.40 0.42,0.43,0.46,0.49,0.50 0.52,0.52,0.52,0.54), mean=0.461, stddev=0.0392], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0009,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00101, stddev=0.000153], oderiv-count=5.93581e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.2,1.5 1.6,1.7,1.9,2.1,2.3 2.6,2.7,2.7,2.9), mean=1.93, stddev=0.325], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.3,2.4,2.7 2.8,2.8,3.1,3.5,3.9 4.2,4.5,4.5,5.0), mean=3.21, stddev=0.478]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1043, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.67, stddev=0.00384], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.63,0.66 0.70,0.74,0.83,0.91,0.96 1.0,1.0,1.1,1.1), mean=0.828, stddev=0.104], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09622, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.62,0.75 0.84,0.92,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.07, stddev=0.178], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.84,0.89,0.91 0.94,0.97,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.08, stddev=0.117], bias-{mean,stddev}=-0.08908,0.06247, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.11e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.1,1.2,1.4 1.5,1.7,1.9,2.1,2.4 2.4,2.5,2.6,2.6), mean=1.92, stddev=0.319], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.38 0.39,0.43,0.46,0.48,0.49 0.50,0.50,0.50,0.54), mean=0.448, stddev=0.0437], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.00115, stddev=0.000163], oderiv-count=4.98528e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,1.1,1.2,1.4 1.5,1.7,2.0,2.2,2.4 2.5,2.6,2.6,2.7), mean=1.94, stddev=0.34], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.5,2.6,2.8 2.9,3.0,3.3,3.6,4.0 4.1,4.4,4.5,4.6), mean=3.33, stddev=0.426]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1082, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.73, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.63,0.67 0.70,0.76,0.85,0.96,1.0 1.1,1.1,1.1,1.2), mean=0.857, stddev=0.124], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09906, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.62,0.75 0.81,0.94,1.1,1.3,1.3 1.4,1.4,1.4,1.5), mean=1.1, stddev=0.196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.87,0.89,0.94 0.97,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.11, stddev=0.126], bias-{mean,stddev}=-0.07004,0.05089, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.62e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.3,1.4 1.6,1.7,2.0,2.2,2.3 2.5,2.5,2.6,2.7), mean=1.96, stddev=0.304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.29,0.31,0.36 0.37,0.40,0.44,0.47,0.48 0.48,0.49,0.50,0.51), mean=0.432, stddev=0.0441], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00133, stddev=0.000173], oderiv-count=3.88966e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.2,1.5 1.6,1.7,2.0,2.2,2.3 2.4,2.5,2.5,2.7), mean=1.97, stddev=0.299], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.9,2.9,2.9,3.0 3.1,3.2,3.5,3.9,4.2 4.5,4.9,5.0,5.2), mean=3.6, stddev=0.472]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1044, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.67, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.61,0.64 0.67,0.71,0.81,0.94,0.99 1.1,1.1,1.2,1.2), mean=0.825, stddev=0.13], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09647, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.51,0.57,0.75 0.79,0.87,1.0,1.3,1.4 1.4,1.5,1.5,1.5), mean=1.07, stddev=0.227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.79,0.86,0.87 0.95,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.09, stddev=0.113], bias-{mean,stddev}=-0.08956,0.05077, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.95e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,1.1,1.1,1.3 1.3,1.4,1.7,1.8,2.0 2.0,2.1,2.2,2.2), mean=1.65, stddev=0.246], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.25,0.31 0.34,0.36,0.40,0.44,0.45 0.46,0.48,0.48,0.50), mean=0.398, stddev=0.0505], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00188, stddev=0.000255], oderiv-count=2.91731e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,1.1,1.2,1.2 1.3,1.4,1.6,1.8,2.0 2.0,2.1,2.2,2.3), mean=1.64, stddev=0.245], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.6,2.7,2.8 2.9,3.1,3.5,4.0,4.3 4.5,4.6,4.9,5.0), mean=3.58, stddev=0.527]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1014, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.63 0.66,0.69,0.79,0.91,0.98 1.0,1.1,1.1,1.1), mean=0.802, stddev=0.122], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09427, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.60,0.63 0.69,0.77,1.0,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.03, stddev=0.265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.77,0.82,0.90 0.92,0.96,1.0,1.1,1.2 1.3,1.3,1.4,1.5), mean=1.06, stddev=0.122], bias-{mean,stddev}=-0.09865,0.07421, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.15e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.86,0.87,1.0 1.1,1.1,1.4,1.6,1.8 1.8,2.0,2.1,2.3), mean=1.39, stddev=0.271], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.19,0.21 0.25,0.27,0.36,0.43,0.45 0.46,0.48,0.49,0.58), mean=0.352, stddev=0.0824], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003,0.004 0.004,0.004,0.004,0.004), mean=0.00289, stddev=0.000445], oderiv-count=1.86048e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.79,0.86,0.95 1.0,1.1,1.3,1.6,1.7 1.8,2.0,2.1,2.5), mean=1.37, stddev=0.281], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.4,2.6,2.7 3.0,3.2,3.8,4.2,4.6 4.7,4.9,5.1,5.7), mean=3.74, stddev=0.62]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1042, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.67, stddev=0.00349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.61,0.66 0.69,0.73,0.81,0.92,0.99 1.0,1.1,1.1,1.1), mean=0.825, stddev=0.116], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09548, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.59,0.64 0.68,0.79,1.0,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.04, stddev=0.275], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.88,0.91,0.94 0.97,0.99,1.1,1.1,1.2 1.2,1.3,1.3,1.3), mean=1.08, stddev=0.098], bias-{mean,stddev}=-0.1171,0.1026, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.1e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.86,0.86,0.89 0.96,1.1,1.4,1.5,1.6 1.7,1.8,1.8,2.1), mean=1.32, stddev=0.255], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.16 0.18,0.22,0.32,0.42,0.46 0.47,0.50,0.50,0.53), mean=0.324, stddev=0.103], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.006,0.006,0.007 0.008,0.009,0.009,0.01), mean=0.00574, stddev=0.0011], oderiv-count=614720
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.79,0.81,0.84 0.93,1.0,1.3,1.5,1.6 1.7,1.7,1.8,2.0), mean=1.29, stddev=0.26], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.1,3.2,3.4 3.5,3.7,4.3,5.0,5.4 5.6,6.0,6.1,6.5), mean=4.39, stddev=0.722]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.343915, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.005, max-change=0.75, params-rms=0.1285, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.45, stddev=0.00162], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.82,0.82,0.84 0.89,0.93,1.0,1.1,1.1 1.2,1.2,1.3,1.3), mean=1.02, stddev=0.105], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.5 1.5,1.6,1.7,1.8,1.9 1.9,2.0,2.0,2.2), mean=1.72, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.2 2.3,2.3,2.4,2.5,2.6 2.7,2.8,2.8,2.8), mean=2.44, stddev=0.151], bias-{mean,stddev}=-0.04194,0.1287, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.07e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,2.0 2.1,2.2,2.4,2.7,2.8 2.9,3.0,3.1,3.3), mean=2.42, stddev=0.286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.34 0.35,0.36,0.39,0.42,0.43 0.44,0.45,0.45,0.46), mean=0.392, stddev=0.0293], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.008 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00986, stddev=0.0013], oderiv-count=603840
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.9,2.0,2.0 2.1,2.2,2.4,2.6,2.8 2.9,3.0,3.1,3.3), mean=2.4, stddev=0.288], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.6,5.4,5.5,5.7 5.9,6.2,6.9,7.7,8.2 8.8,9.8,9.9,11), mean=7.05, stddev=1.04]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, params-rms=0.2904, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.3,3.3 3.3,3.3,3.3,3.3,3.3 3.3,3.3,3.3,3.3), mean=3.29, stddev=0.0064], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.7,2.0 2.0,2.1,2.3,2.5,2.6 2.7,2.7,2.8,2.8), mean=2.31, stddev=0.239], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-4e-08 -3e-08,-2e-08,-1e-09,2e-08,2e-08 3e-08,4e-08,5e-08,6e-08), mean=-2.54e-09, stddev=2.4e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.3,3.3,3.7,3.7 3.8,3.8,4.0,4.2,4.3 4.4,4.5,4.6,4.8), mean=4.03, stddev=0.251]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00588494, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2277, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.14,0.23,0.51 0.80,1.2,1.9,2.2,2.4 2.5,2.6,2.7,3.4), mean=1.72, stddev=0.612], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,13 13,14,14,15,16 16,17,17,17), mean=14.4, stddev=0.98], bias-{mean,stddev}=0.001147,0.307, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1577, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.82,0.86,1.1 1.2,1.2,1.3,1.3,1.4 1.4,1.4,1.4,1.7), mean=1.26, stddev=0.111], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.7,1.8,1.9,1.9 2.0,2.0,2.0,2.2), mean=1.78, stddev=0.118], bias-{mean,stddev}=-0.08041,0.2221, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.77,0.78,0.86 0.90,0.96,1.2,1.4,1.6 1.7,1.8,1.8,2.1), mean=1.22, stddev=0.272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.38,0.39 0.42,0.44,0.47,0.53,0.57 0.59,0.60,0.64,0.68), mean=0.484, stddev=0.0612], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.004,0.005,0.005,0.006 0.006,0.006,0.007,0.01), mean=0.00494, stddev=0.000739], oderiv-count=619072
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.75,0.76,0.84 0.92,0.98,1.2,1.5,1.6 1.7,1.9,1.9,2.0), mean=1.24, stddev=0.279], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.5,1.6,1.9,2.0,2.1 2.2,2.3,2.3,2.9), mean=1.86, stddev=0.252]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00588494, l2-regularize=0.0005, max-change=0.75, params-rms=0.1535, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.74, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.97,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.22, stddev=0.119], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-5e-08,-3e-08 -2e-08,-2e-08,-2e-09,2e-08,2e-08 3e-08,4e-08,4e-08,4e-08), mean=-3.82e-10, stddev=2e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.9,2.0,2.0 2.0,2.1,2.2,2.2), mean=1.85, stddev=0.127]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0294247, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1864, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.07,0.24 0.63,0.94,1.4,1.9,2.1 2.2,2.3,2.4,3.4), mean=1.38, stddev=0.554], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 11,12,12,12,12 12,12,12,12), mean=11.8, stddev=0.21], bias-{mean,stddev}=4.686e-08,0.2383, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000771, stddev=0.0012], oderiv-count=614720
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/128.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/129.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.6272 tdnnf2.linear:5.18857 tdnnf2.affine:5.91001 tdnnf3.linear:4.41561 tdnnf3.affine:5.11591 tdnnf4.linear:4.1017 tdnnf4.affine:5.02284 tdnnf5.linear:3.96346 tdnnf5.affine:4.68018 tdnnf6.linear:3.57423 tdnnf6.affine:4.12866 tdnnf7.linear:3.46955 tdnnf7.affine:3.89071 tdnnf8.linear:3.31836 tdnnf8.affine:3.76482 tdnnf9.linear:3.33483 tdnnf9.affine:3.85488 tdnnf10.linear:3.48851 tdnnf10.affine:4.0646 tdnnf11.linear:3.57358 tdnnf11.affine:4.2988 tdnnf12.linear:3.70909 tdnnf12.affine:4.46749 tdnnf13.linear:4.08808 tdnnf13.affine:4.85627 prefinal-l:3.30131 prefinal-chain.affine:5.45991 prefinal-chain.linear:4.89985 output.affine:15.4408 prefinal-xent.affine:3.02431 prefinal-xent.linear:1.86767 output-xent.affine:13.4299 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.0525 tdnnf2.linear:17.3001 tdnnf2.affine:17.2767 tdnnf3.linear:14.9514 tdnnf3.affine:15.0199 tdnnf4.linear:13.8839 tdnnf4.affine:14.7692 tdnnf5.linear:13.2453 tdnnf5.affine:13.6319 tdnnf6.linear:12.4784 tdnnf6.affine:12.2634 tdnnf7.linear:12.6955 tdnnf7.affine:12.1421 tdnnf8.linear:13.1686 tdnnf8.affine:12.2776 tdnnf9.linear:13.3548 tdnnf9.affine:12.3779 tdnnf10.linear:13.8544 tdnnf10.affine:12.7178 tdnnf11.linear:13.3677 tdnnf11.affine:12.4027 tdnnf12.linear:12.9748 tdnnf12.affine:12.1468 tdnnf13.linear:13.3357 tdnnf13.affine:12.3475 prefinal-l:11.6314 prefinal-chain.affine:19.6236 prefinal-chain.linear:26.2872 output.affine:117.416 prefinal-xent.affine:14.5215 prefinal-xent.linear:13.8904 output-xent.affine:96.0025 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.344247 tdnnf2.linear:0.298665 tdnnf2.affine:0.340797 tdnnf3.linear:0.293842 tdnnf3.affine:0.338533 tdnnf4.linear:0.294736 tdnnf4.affine:0.33808 tdnnf5.linear:0.298776 tdnnf5.affine:0.342083 tdnnf6.linear:0.286021 tdnnf6.affine:0.336202 tdnnf7.linear:0.272502 tdnnf7.affine:0.319971 tdnnf8.linear:0.251067 tdnnf8.affine:0.305664 tdnnf9.linear:0.249439 tdnnf9.affine:0.310461 tdnnf10.linear:0.250887 tdnnf10.affine:0.319481 tdnnf11.linear:0.26701 tdnnf11.affine:0.346436 tdnnf12.linear:0.28519 tdnnf12.affine:0.366518 tdnnf13.linear:0.307269 tdnnf13.affine:0.392757 prefinal-l:0.286839 prefinal-chain.affine:0.278437 prefinal-chain.linear:0.187069 output.affine:0.131742 prefinal-xent.affine:0.208274 prefinal-xent.linear:0.134287 output-xent.affine:0.139607 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 09:16:31 CST 2020, elapsed time 3 seconds
