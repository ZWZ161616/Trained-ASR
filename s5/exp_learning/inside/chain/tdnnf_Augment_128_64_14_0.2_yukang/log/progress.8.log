# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/8.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/7.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/8.mdl 
# Started at Mon Feb 24 05:16:13 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/8.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.49,0.49,0.69 0.92,1.2,1.7,2.1,2.3 2.4,2.6,3.3,3.4), mean=1.65, stddev=0.559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.51,0.53 0.58,0.68,1.2,1.6,2.0 2.2,2.4,2.5,3.0), mean=1.22, stddev=0.527], bias-{mean,stddev}=-0.03224,0.2693, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=9.05e+06, self-repaired-proportion=0.135871, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,4e-05,0.0003,0.002 0.003,0.008,0.14,0.30,0.36 0.41,0.44,0.46,0.48), mean=0.163, stddev=0.14], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.002,0.004,0.03 0.05,0.08,0.40,0.77,0.83 0.88,0.92,0.93,0.95), mean=0.418, stddev=0.303], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.09,0.11 0.12,0.14,0.14,0.18), mean=0.0563, stddev=0.0337], oderiv-count=1.30274e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,7e-05,0.0001,0.0008 0.003,0.01,0.15,0.28,0.34 0.41,0.43,0.44,0.49), mean=0.161, stddev=0.137], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.003,0.007 0.02,0.05,0.24,0.30,0.32 0.34,0.35,0.35,0.38), mean=0.2, stddev=0.111]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1378, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.2,2.2,2.2 2.2,2.2,2.2,2.2,2.2 2.2,2.2,2.2,2.2), mean=2.21, stddev=0.00737], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.66,0.73,0.74 0.82,0.94,1.1,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.09, stddev=0.18], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.1,1.1,1.1 1.2,1.2,1.4,1.5,1.6 1.7,1.8,1.8,1.8), mean=1.4, stddev=0.175], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.3,1.4,1.5,1.5 1.6,1.7,1.7,1.7), mean=1.4, stddev=0.119], bias-{mean,stddev}=-0.08679,0.2477, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.22e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.2,1.3 1.4,1.4,1.6,1.8,1.9 2.0,2.0,2.1,2.2), mean=1.62, stddev=0.204], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.38,0.40 0.40,0.43,0.51,0.55,0.58 0.60,0.62,0.63,0.66), mean=0.494, stddev=0.0644], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.003,0.003,0.003,0.006), mean=0.00179, stddev=0.000684], oderiv-count=1.20325e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.3 1.4,1.5,1.6,1.8,1.9 1.9,2.0,2.1,2.3), mean=1.63, stddev=0.211], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.7,1.9 2.1,2.3,2.6,2.9,3.1 3.2,3.3,3.3,3.4), mean=2.61, stddev=0.385]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.122, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.95, stddev=0.00496], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.75,0.80,0.83 0.86,0.89,0.97,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.972, stddev=0.0895], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.99,0.99,1.1 1.1,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.24, stddev=0.135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.97,1.0,1.1 1.1,1.1,1.2,1.3,1.4 1.5,1.5,1.5,1.7), mean=1.25, stddev=0.121], bias-{mean,stddev}=-0.09382,0.1483, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.58e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.6,1.7,1.9,2.0,2.2 2.2,2.3,2.4,2.5), mean=1.86, stddev=0.214], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.38,0.40 0.41,0.43,0.49,0.56,0.57 0.58,0.59,0.59,0.60), mean=0.495, stddev=0.0622], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0007,0.0007 0.0007,0.0008,0.0009,0.001,0.002 0.002,0.002,0.002,0.003), mean=0.00107, stddev=0.000396], oderiv-count=1.0782e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.5 1.6,1.7,1.9,2.0,2.2 2.3,2.4,2.4,2.6), mean=1.88, stddev=0.237], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.1,2.1,2.2 2.3,2.6,3.1,3.5,3.7 3.9,4.0,4.0,4.3), mean=3.05, stddev=0.518]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1061, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.7, stddev=0.00526], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.70,0.72 0.75,0.78,0.85,0.91,0.94 0.96,0.98,1.0,1.1), mean=0.846, stddev=0.0726], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09885, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.88,0.89,0.93 0.95,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.11, stddev=0.118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.91,0.94,0.98 1.0,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.11, stddev=0.0978], bias-{mean,stddev}=-0.08137,0.1232, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.37e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.5 1.6,1.7,1.9,2.0,2.2 2.2,2.3,2.3,2.5), mean=1.88, stddev=0.226], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.38,0.39 0.40,0.44,0.49,0.53,0.56 0.56,0.58,0.58,0.58), mean=0.485, stddev=0.0549], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.0006,0.0006,0.0008,0.001,0.001 0.001,0.002,0.002,0.003), mean=0.000854, stddev=0.000349], oderiv-count=9.6272e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.5 1.6,1.7,1.9,2.0,2.2 2.2,2.3,2.4,2.5), mean=1.87, stddev=0.226], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,2.0,2.2,2.3 2.4,2.7,3.1,3.5,3.9 4.0,4.2,4.3,4.5), mean=3.14, stddev=0.524]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0972, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.56, stddev=0.00316], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.64,0.65 0.69,0.71,0.78,0.82,0.86 0.90,0.92,0.95,0.97), mean=0.774, stddev=0.0696], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09231, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.77,0.82,0.87 0.91,0.95,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.1], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.88,0.88,0.90 0.94,0.97,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.0865], bias-{mean,stddev}=-0.06024,0.1203, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.96e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.7,1.8,1.9,2.1,2.2 2.3,2.5,2.6,2.7), mean=1.95, stddev=0.227], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.38 0.40,0.44,0.49,0.54,0.56 0.57,0.59,0.59,0.60), mean=0.484, stddev=0.0602], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0005 0.0005,0.0006,0.0007,0.0009,0.001 0.001,0.002,0.002,0.003), mean=0.000765, stddev=0.000348], oderiv-count=9.02637e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.7,1.8,1.9,2.1,2.2 2.3,2.5,2.5,2.8), mean=1.93, stddev=0.228], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.1,2.2,2.5 2.6,2.8,3.2,3.6,3.9 4.2,4.5,4.6,5.0), mean=3.24, stddev=0.54]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09281, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.48, stddev=0.00498], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.61,0.63 0.66,0.69,0.74,0.79,0.82 0.85,0.87,0.87,0.90), mean=0.74, stddev=0.0631], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08964, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.80,0.82,0.86 0.89,0.93,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.01, stddev=0.0936], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.79,0.82,0.85 0.89,0.92,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.01, stddev=0.0992], bias-{mean,stddev}=-0.08951,0.1042, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.37e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.8,1.9,2.1,2.2 2.3,2.4,2.5,2.7), mean=1.95, stddev=0.204], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.38,0.39 0.40,0.42,0.47,0.51,0.52 0.54,0.55,0.56,0.56), mean=0.467, stddev=0.0466], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0005 0.0005,0.0006,0.0007,0.0008,0.001 0.001,0.002,0.002,0.003), mean=0.000769, stddev=0.00038], oderiv-count=7.83494e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.7,1.8,1.9,2.1,2.2 2.3,2.4,2.5,2.7), mean=1.94, stddev=0.213], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.1,2.4,2.6 2.8,2.9,3.3,3.8,4.0 4.1,4.3,4.5,4.9), mean=3.35, stddev=0.499]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1032, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.65, stddev=0.00483], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.68,0.70 0.73,0.75,0.82,0.88,0.92 0.95,0.96,1.0,1.1), mean=0.822, stddev=0.0761], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1056, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.90,0.92,1.0 1.0,1.1,1.2,1.3,1.3 1.4,1.5,1.5,1.6), mean=1.19, stddev=0.135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.84,0.91,0.99 1.0,1.1,1.2,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.19, stddev=0.135], bias-{mean,stddev}=-0.1035,0.1482, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.54e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,1.9,1.9,2.1 2.2,2.4,2.6,2.8,2.9 3.1,3.3,3.3,3.5), mean=2.57, stddev=0.344], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.38 0.40,0.43,0.48,0.52,0.54 0.55,0.56,0.57,0.57), mean=0.477, stddev=0.052], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0004,0.0004,0.0004 0.0004,0.0005,0.0005,0.0007,0.0008 0.0009,0.001,0.001,0.007), mean=0.00063, stddev=0.000628], oderiv-count=7.08992e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,1.7,1.9,2.0 2.2,2.4,2.5,2.7,2.9 3.0,3.3,3.3,3.4), mean=2.53, stddev=0.342], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,2.5,2.8,3.0 3.3,3.6,4.2,4.9,5.3 5.5,5.9,6.3,6.5), mean=4.25, stddev=0.831]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09688, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00375], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.62,0.64,0.66 0.69,0.71,0.77,0.82,0.85 0.88,0.92,0.94,1.0), mean=0.772, stddev=0.069], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09232, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.69,0.76,0.84 0.90,0.94,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.04, stddev=0.126], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.79,0.80,0.85 0.87,0.93,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.04, stddev=0.121], bias-{mean,stddev}=-0.07368,0.114, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.84e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,1.3,1.4,1.7 1.8,1.9,2.1,2.4,2.5 2.5,2.8,2.8,2.9), mean=2.15, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.37,0.39 0.40,0.42,0.46,0.50,0.52 0.53,0.55,0.55,0.56), mean=0.46, stddev=0.0432], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0005 0.0006,0.0006,0.0007,0.0008,0.0009 0.001,0.001,0.001,0.004), mean=0.000725, stddev=0.000293], oderiv-count=5.90451e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,1.2,1.3,1.7 1.8,1.9,2.1,2.3,2.5 2.5,2.8,2.8,2.9), mean=2.11, stddev=0.314], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,2.3,2.3,2.6 2.9,3.1,3.6,4.1,4.3 4.8,4.9,4.9,5.3), mean=3.64, stddev=0.626]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09715, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00289], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.62,0.66 0.68,0.71,0.77,0.84,0.87 0.89,0.93,0.96,0.98), mean=0.774, stddev=0.0758], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09156, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.73,0.79 0.89,0.93,1.0,1.1,1.2 1.3,1.3,1.3,1.3), mean=1.03, stddev=0.135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.74,0.78,0.82 0.86,0.93,1.0,1.1,1.2 1.3,1.4,1.4,1.4), mean=1.03, stddev=0.138], bias-{mean,stddev}=-0.06384,0.1051, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.36e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.86,1.5,1.7 1.8,2.0,2.1,2.4,2.4 2.6,2.8,2.8,3.0), mean=2.15, stddev=0.316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.37,0.39 0.41,0.43,0.47,0.51,0.52 0.54,0.55,0.55,0.57), mean=0.467, stddev=0.0478], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0006 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.001,0.001,0.002), mean=0.000829, stddev=0.000205], oderiv-count=4.70016e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.82,1.4,1.6 1.7,1.9,2.1,2.4,2.5 2.6,2.8,2.9,2.9), mean=2.14, stddev=0.337], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.0,2.3,2.7 2.8,3.1,3.5,4.0,4.4 4.6,4.7,5.1,5.3), mean=3.57, stddev=0.594]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.6, stddev=0.00514], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.65,0.66,0.68 0.70,0.72,0.79,0.87,0.90 0.93,0.96,0.99,1.1), mean=0.797, stddev=0.0823], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09253, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.68,0.69,0.79 0.84,0.93,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.04, stddev=0.139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.76,0.82,0.85 0.90,0.92,1.0,1.1,1.2 1.3,1.3,1.3,1.4), mean=1.04, stddev=0.127], bias-{mean,stddev}=-0.05205,0.09757, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.67e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.4,1.4,1.7 1.8,2.0,2.2,2.4,2.5 2.5,2.8,2.8,2.9), mean=2.16, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.35,0.40 0.42,0.43,0.46,0.49,0.51 0.52,0.52,0.52,0.54), mean=0.46, stddev=0.0408], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0008 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.000965, stddev=0.000136], oderiv-count=3.72531e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.4,1.7 1.9,1.9,2.1,2.3,2.5 2.6,2.7,2.8,2.9), mean=2.15, stddev=0.286], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.8,2.8,2.9 3.0,3.2,3.5,4.0,4.2 4.4,4.7,5.1,5.2), mean=3.62, stddev=0.486]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1038, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.64,0.66,0.70 0.72,0.75,0.83,0.89,0.94 0.98,1.0,1.0,1.1), mean=0.826, stddev=0.0868], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09663, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.70,0.77 0.83,0.93,1.1,1.2,1.3 1.3,1.4,1.5,1.6), mean=1.08, stddev=0.176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.85,0.89 0.91,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.09, stddev=0.129], bias-{mean,stddev}=-0.04899,0.106, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.88e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.5,1.7 1.9,2.1,2.3,2.5,2.7 2.8,2.9,3.0,3.2), mean=2.31, stddev=0.328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.35,0.35,0.37 0.39,0.43,0.45,0.48,0.49 0.50,0.51,0.52,0.54), mean=0.446, stddev=0.0387], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.001 0.001,0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.00114, stddev=0.000141], oderiv-count=2.85158e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.7 1.9,2.0,2.2,2.5,2.7 2.8,2.9,2.9,3.1), mean=2.25, stddev=0.33], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.9,2.9,3.1 3.3,3.5,3.8,4.3,4.4 4.7,4.9,5.0,5.3), mean=3.87, stddev=0.481]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.76, stddev=0.0032], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.71,0.72,0.73 0.76,0.79,0.87,0.96,1.0 1.0,1.1,1.1,1.2), mean=0.877, stddev=0.0973], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1009, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.67,0.76 0.84,0.92,1.1,1.3,1.4 1.4,1.5,1.5,1.7), mean=1.12, stddev=0.212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.82,0.85,0.88 0.94,0.99,1.1,1.3,1.3 1.4,1.5,1.5,1.7), mean=1.13, stddev=0.162], bias-{mean,stddev}=-0.03031,0.1154, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.4,1.6 1.8,2.0,2.4,2.6,2.7 2.9,3.0,3.1,3.3), mean=2.33, stddev=0.388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.29,0.29,0.36 0.37,0.41,0.45,0.48,0.49 0.50,0.51,0.53,0.53), mean=0.44, stddev=0.0488], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00155, stddev=0.000208], oderiv-count=1.88986e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.3,1.4,1.5 1.8,2.0,2.3,2.6,2.7 2.8,3.0,3.1,3.4), mean=2.3, stddev=0.399], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.0,3.1,3.2 3.5,3.6,4.0,4.5,4.8 5.0,5.2,5.2,5.4), mean=4.08, stddev=0.509]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1087, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.74, stddev=0.004], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.69,0.70,0.71 0.74,0.78,0.86,0.93,0.99 1.0,1.1,1.2,1.2), mean=0.864, stddev=0.0999], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1013, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.65,0.70,0.74 0.81,0.91,1.1,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.12, stddev=0.236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.87,0.93 0.95,1.0,1.1,1.2,1.3 1.4,1.4,1.4,1.6), mean=1.14, stddev=0.138], bias-{mean,stddev}=-0.02967,0.1271, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.3,1.5 1.7,1.9,2.2,2.6,2.7 2.8,3.0,3.1,3.3), mean=2.23, stddev=0.417], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.30,0.32 0.34,0.38,0.43,0.48,0.50 0.52,0.53,0.53,0.54), mean=0.424, stddev=0.0605], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.003,0.004,0.004 0.004,0.004,0.005,0.005), mean=0.00333, stddev=0.000494], oderiv-count=619072
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.1,1.3,1.4 1.7,1.9,2.2,2.6,2.7 2.8,3.0,3.1,3.3), mean=2.2, stddev=0.429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.1,3.2,3.3 3.5,3.7,4.1,4.5,4.7 4.9,5.1,5.3,5.7), mean=4.12, stddev=0.505]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.005, max-change=0.75, params-rms=0.09832, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.11, stddev=0.00764], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.65,0.66,0.68 0.73,0.74,0.78,0.83,0.85 0.86,0.88,0.89,0.91), mean=0.785, stddev=0.0529], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1711, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.80,0.94 1.0,1.2,1.3,1.6,1.6 1.7,1.7,1.7,1.8), mean=1.35, stddev=0.24], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.7,1.9,2.1,2.2 2.2,2.3,2.3,2.5), mean=1.93, stddev=0.195], bias-{mean,stddev}=-0.02539,0.2843, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.07e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.85,1.0,1.1 1.3,1.5,2.0,2.3,2.7 2.9,3.1,3.1,3.3), mean=1.97, stddev=0.507], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.26,0.29 0.32,0.34,0.39,0.43,0.44 0.45,0.47,0.47,0.48), mean=0.386, stddev=0.0511], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00904, stddev=0.00118], oderiv-count=625600
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.83,1.0,1.1 1.4,1.5,1.9,2.4,2.7 2.8,2.9,3.0,3.2), mean=1.96, stddev=0.5], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,3.0,3.3,3.4 3.6,3.7,4.1,4.6,4.8 5.1,5.2,5.2,5.7), mean=4.16, stddev=0.528]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, params-rms=0.2069, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.3,2.3 2.3,2.3,2.3,2.3,2.3 2.4,2.4,2.4,2.4), mean=2.34, stddev=0.0068], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.5 1.5,1.5,1.7,1.7,1.8 1.8,1.9,1.9,2.0), mean=1.65, stddev=0.12], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-4e-08,-3e-08 -3e-08,-2e-08,-1e-09,2e-08,2e-08 3e-08,4e-08,5e-08,7e-08), mean=7.5e-10, stddev=2.17e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.3,2.4 2.5,2.5,2.7,2.9,3.0 3.1,3.1,3.2,3.3), mean=2.72, stddev=0.212]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0142518, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.09187, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.02,0.04,0.10 0.18,0.27,0.65,0.99,1.1 1.2,1.3,1.4,1.6), mean=0.641, stddev=0.36], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4.6,4.6,4.7,4.9 5.0,5.3,5.7,6.3,6.6 6.8,7.0,7.6,7.7), mean=5.8, stddev=0.635], bias-{mean,stddev}=9.181e-05,0.2035, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1368, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.60,0.64,0.82 0.92,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.09, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.4,1.4,1.5,1.7,1.7 1.7,1.7,1.8,1.9), mean=1.54, stddev=0.128], bias-{mean,stddev}=0.04815,0.1512, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.91e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.76,0.76,0.88 0.92,1.0,1.2,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.19, stddev=0.19], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.37,0.40 0.41,0.43,0.47,0.51,0.52 0.54,0.55,0.55,0.58), mean=0.47, stddev=0.0437], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.004,0.004,0.004 0.005,0.005,0.006,0.01), mean=0.00403, stddev=0.000712], oderiv-count=611456
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.72,0.74,0.89 0.92,1.0,1.2,1.4,1.4 1.5,1.6,1.6,1.6), mean=1.19, stddev=0.197], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.5 1.5,1.7,1.9,2.0,2.1 2.2,2.2,2.2,2.2), mean=1.84, stddev=0.214]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.0142518, l2-regularize=0.0005, max-change=0.75, params-rms=0.1573, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.78, stddev=0.00505], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.94,0.98,1.0 1.1,1.1,1.3,1.4,1.4 1.4,1.5,1.5,1.5), mean=1.25, stddev=0.122], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-4e-08,-3e-08 -2e-08,-2e-08,-5e-10,2e-08,3e-08 3e-08,4e-08,5e-08,6e-08), mean=4.72e-10, stddev=2.15e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.8,1.8,1.9,2.0,2.1 2.1,2.1,2.1,2.2), mean=1.94, stddev=0.109]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0712589, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1409, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.12 0.20,0.47,1.0,1.5,1.7 1.9,2.0,2.1,3.3), mean=0.993, stddev=0.533], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8.0,8.0,8.3,8.4 8.4,8.6,8.9,9.3,9.6 9.6,9.7,9.7,9.8), mean=8.94, stddev=0.418], bias-{mean,stddev}=-1.838e-07,0.2253, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.0001,0.0002,0.0004,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.00073, stddev=0.00122], oderiv-count=609280
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/7.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/8.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.39229 tdnnf2.linear:4.46035 tdnnf2.affine:5.14751 tdnnf3.linear:4.32576 tdnnf3.affine:5.04228 tdnnf4.linear:4.15775 tdnnf4.affine:4.83098 tdnnf5.linear:3.82298 tdnnf5.affine:4.46278 tdnnf6.linear:3.55253 tdnnf6.affine:4.28269 tdnnf7.linear:3.79017 tdnnf7.affine:4.4819 tdnnf8.linear:3.37932 tdnnf8.affine:4.08895 tdnnf9.linear:3.34204 tdnnf9.affine:4.06958 tdnnf10.linear:3.40388 tdnnf10.affine:4.20199 tdnnf11.linear:3.39297 tdnnf11.affine:4.24672 tdnnf12.linear:3.62267 tdnnf12.affine:4.56429 tdnnf13.linear:3.87134 tdnnf13.affine:4.88822 prefinal-l:2.19312 prefinal-chain.affine:4.11169 prefinal-chain.linear:3.21077 output.affine:11.0007 prefinal-xent.affine:3.38108 prefinal-xent.linear:2.54204 output-xent.affine:12.483 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:19.9919 tdnnf2.linear:17.6422 tdnnf2.affine:16.19 tdnnf3.linear:15.6152 tdnnf3.affine:14.299 tdnnf4.linear:13.5859 tdnnf4.affine:12.7622 tdnnf5.linear:12.4419 tdnnf5.affine:11.9132 tdnnf6.linear:11.8792 tdnnf6.affine:11.5789 tdnnf7.linear:13.2038 tdnnf7.affine:13.6689 tdnnf8.linear:12.4001 tdnnf8.affine:11.9163 tdnnf9.linear:12.4355 tdnnf9.affine:11.8023 tdnnf10.linear:12.8246 tdnnf10.affine:11.9093 tdnnf11.linear:13.2864 tdnnf11.affine:12.4389 tdnnf12.linear:14.1166 tdnnf12.affine:12.9909 tdnnf13.linear:13.9183 tdnnf13.affine:13.0507 prefinal-l:8.89933 prefinal-chain.affine:15.8185 prefinal-chain.linear:18.7276 output.affine:48.474 prefinal-xent.affine:12.5144 prefinal-xent.linear:14.2333 output-xent.affine:73.0506 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.327499 tdnnf2.linear:0.25674 tdnnf2.affine:0.321733 tdnnf3.linear:0.28108 tdnnf3.affine:0.356449 tdnnf4.linear:0.310238 tdnnf4.affine:0.383339 tdnnf5.linear:0.310781 tdnnf5.affine:0.378227 tdnnf6.linear:0.302698 tdnnf6.affine:0.372689 tdnnf7.linear:0.292106 tdnnf7.affine:0.327092 tdnnf8.linear:0.276781 tdnnf8.affine:0.344632 tdnnf9.linear:0.272983 tdnnf9.affine:0.345923 tdnnf10.linear:0.26935 tdnnf10.affine:0.355642 tdnnf11.linear:0.258542 tdnnf11.affine:0.343995 tdnnf12.linear:0.260238 tdnnf12.affine:0.354704 tdnnf13.linear:0.282247 tdnnf13.affine:0.378217 prefinal-l:0.248264 prefinal-chain.affine:0.261598 prefinal-chain.linear:0.17484 output.affine:0.239559 prefinal-xent.affine:0.27459 prefinal-xent.linear:0.179768 output-xent.affine:0.177466 ]
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 05:16:17 CST 2020, elapsed time 4 seconds
