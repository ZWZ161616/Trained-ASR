# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/271.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/270.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/271.mdl 
# Started at Mon Feb 24 12:46:35 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/271.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1331, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.2,1.3,1.4 1.5,1.6,1.8,2.3,2.5 2.8,2.8,2.9,3.2), mean=1.93, stddev=0.414], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.53,0.56,0.59 0.69,0.80,1.4,1.8,2.2 2.4,2.5,2.6,3.0), mean=1.4, stddev=0.555], bias-{mean,stddev}=-0.115,0.1741, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.78e+06, self-repaired-proportion=0.016375, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.01,0.02 0.03,0.05,0.10,0.18,0.21 0.25,0.28,0.28,0.30), mean=0.113, stddev=0.0729], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.05,0.08 0.11,0.19,0.33,0.48,0.64 0.71,0.73,0.74,0.78), mean=0.349, stddev=0.188], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.05 0.06,0.07,0.08,0.12), mean=0.0361, stddev=0.0153], oderiv-count=1.2407e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.006,0.007,0.02 0.03,0.05,0.10,0.18,0.21 0.25,0.27,0.28,0.30), mean=0.113, stddev=0.0733], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.05,0.08 0.10,0.14,0.20,0.25,0.28 0.29,0.31,0.31,0.32), mean=0.191, stddev=0.0667]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.142857, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1125, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.8, stddev=0.00309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.69,0.70,0.72 0.76,0.81,0.90,0.98,1.0 1.1,1.1,1.2,1.2), mean=0.894, stddev=0.103], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.92,0.97,1.1 1.1,1.2,1.3,1.4,1.4 1.5,1.6,1.6,1.7), mean=1.27, stddev=0.145], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.1,1.1 1.2,1.2,1.3,1.4,1.4 1.4,1.5,1.5,1.5), mean=1.27, stddev=0.0929], bias-{mean,stddev}=-0.1639,0.0957, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.92e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.80,0.85,0.93 1.0,1.1,1.2,1.4,1.5 1.5,1.6,1.7,1.7), mean=1.25, stddev=0.191], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.37,0.38 0.40,0.44,0.54,0.58,0.59 0.60,0.61,0.61,0.61), mean=0.512, stddev=0.0739], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002,0.003 0.003,0.006,0.007,0.008), mean=0.0021, stddev=0.00101], oderiv-count=1.14817e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.79,0.84,0.95 1.0,1.1,1.2,1.4,1.5 1.5,1.6,1.7,1.7), mean=1.24, stddev=0.188], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.4,1.5 1.6,1.7,1.9,2.2,2.4 2.5,2.7,2.7,2.8), mean=1.98, stddev=0.317]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.142857, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1037, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.66, stddev=0.00224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.63,0.65,0.68 0.72,0.75,0.83,0.90,0.94 0.97,0.99,1.0,1.1), mean=0.825, stddev=0.0886], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1075, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.62,0.85,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.5,1.6,1.6), mean=1.21, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.4,1.5), mean=1.21, stddev=0.082], bias-{mean,stddev}=-0.1669,0.07451, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.68e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.96,1.2 1.2,1.3,1.5,1.6,1.7 1.8,1.9,1.9,2.0), mean=1.48, stddev=0.212], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.40,0.40 0.45,0.47,0.51,0.56,0.57 0.59,0.59,0.60,0.60), mean=0.513, stddev=0.0533], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.003,0.003,0.003,0.007), mean=0.00142, stddev=0.000841], oderiv-count=1.11116e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.55,0.91,1.2 1.2,1.3,1.5,1.6,1.7 1.8,1.9,2.0,2.1), mean=1.47, stddev=0.221], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.79,1.2,1.9 2.0,2.1,2.3,2.6,2.8 2.9,3.1,3.1,3.3), mean=2.33, stddev=0.376]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.142857, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09509, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.52, stddev=0.00218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.62,0.64 0.66,0.70,0.76,0.82,0.85 0.87,0.89,0.90,0.98), mean=0.757, stddev=0.0698], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09752, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.56,0.95 0.99,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.09, stddev=0.135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.93,0.94,0.96 0.99,1.0,1.1,1.2,1.2 1.3,1.4,1.4,1.4), mean=1.1, stddev=0.1], bias-{mean,stddev}=-0.1728,0.08447, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.69e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.48,0.48,1.2 1.2,1.3,1.5,1.6,1.7 1.8,1.8,1.8,2.1), mean=1.47, stddev=0.244], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.35,0.39 0.42,0.45,0.50,0.55,0.56 0.57,0.57,0.58,0.60), mean=0.494, stddev=0.0551], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0008,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.003,0.005,0.006), mean=0.0012, stddev=0.000671], oderiv-count=9.8912e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.45,0.49,1.1 1.2,1.3,1.5,1.6,1.7 1.8,1.8,1.9,2.0), mean=1.45, stddev=0.245], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.76,0.87,1.8 2.0,2.1,2.4,2.6,2.8 3.0,3.0,3.1,3.7), mean=2.35, stddev=0.416]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.142857, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08827, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.41, stddev=0.00115], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.57,0.59 0.62,0.65,0.70,0.75,0.79 0.82,0.86,0.88,0.92), mean=0.703, stddev=0.0702], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08478, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.54,0.63,0.82 0.84,0.88,0.95,1.0,1.1 1.1,1.1,1.2,1.3), mean=0.953, stddev=0.11], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.77,0.79,0.83 0.86,0.88,0.95,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.955, stddev=0.0845], bias-{mean,stddev}=-0.148,0.05383, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.65,0.76,1.0 1.1,1.2,1.3,1.4,1.5 1.5,1.5,1.6,1.6), mean=1.26, stddev=0.17], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.38,0.43 0.45,0.47,0.51,0.54,0.55 0.55,0.58,0.58,0.59), mean=0.504, stddev=0.0433], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.003), mean=0.00132, stddev=0.00028], oderiv-count=8.86829e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.62,0.77,1.0 1.0,1.1,1.3,1.4,1.4 1.5,1.5,1.6,1.6), mean=1.25, stddev=0.17], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.3,1.6 1.7,1.8,1.9,2.1,2.3 2.4,2.5,2.6,2.7), mean=1.95, stddev=0.263]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.142857, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.4, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.57,0.59 0.61,0.65,0.70,0.75,0.77 0.80,0.81,0.83,0.88), mean=0.696, stddev=0.0631], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08176, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.65,0.74 0.83,0.85,0.93,0.98,1.0 1.1,1.1,1.1,1.2), mean=0.92, stddev=0.101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.75,0.77,0.81 0.83,0.86,0.90,0.99,1.1 1.1,1.1,1.1,1.2), mean=0.921, stddev=0.0846], bias-{mean,stddev}=-0.1405,0.05208, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.96e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.80,0.81,0.90 1.0,1.1,1.2,1.4,1.5 1.5,1.6,1.6,1.7), mean=1.23, stddev=0.173], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.39,0.42 0.44,0.46,0.49,0.53,0.55 0.55,0.57,0.57,0.60), mean=0.492, stddev=0.0416], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00135, stddev=0.000205], oderiv-count=7.83494e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.75,0.76,0.92 1.0,1.1,1.2,1.4,1.4 1.5,1.5,1.6,1.7), mean=1.22, stddev=0.174], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.4,1.4,1.5 1.6,1.7,1.9,2.1,2.3 2.4,2.5,2.6,2.7), mean=1.92, stddev=0.267]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.142857, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08738, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.4, stddev=0.00395], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.57,0.59 0.62,0.64,0.70,0.75,0.78 0.80,0.82,0.83,0.92), mean=0.696, stddev=0.0641], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.57,0.57,0.74 0.80,0.83,0.92,1.0,1.0 1.0,1.1,1.1,1.2), mean=0.914, stddev=0.109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.75,0.76,0.79 0.80,0.84,0.91,0.99,1.0 1.1,1.1,1.1,1.1), mean=0.916, stddev=0.0834], bias-{mean,stddev}=-0.1265,0.05199, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.38e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.57,0.72,0.88 1.0,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.22, stddev=0.179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.43 0.43,0.45,0.48,0.51,0.53 0.55,0.57,0.57,0.60), mean=0.477, stddev=0.0439], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.003), mean=0.00138, stddev=0.000232], oderiv-count=6.84544e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.74,0.90 1.0,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.6), mean=1.22, stddev=0.18], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.4,1.5 1.6,1.7,1.9,2.1,2.3 2.5,2.6,2.6,2.7), mean=1.93, stddev=0.281]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.142857, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08972, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.44, stddev=0.00138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.56,0.59 0.62,0.65,0.71,0.77,0.81 0.86,0.90,0.91,1.0), mean=0.713, stddev=0.0799], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.54,0.70 0.77,0.82,0.91,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.91, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.74,0.77,0.78 0.81,0.84,0.90,0.97,1.0 1.1,1.1,1.2,1.3), mean=0.913, stddev=0.091], bias-{mean,stddev}=-0.105,0.05397, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.57,0.67,0.95 1.0,1.1,1.2,1.4,1.6 1.7,1.7,1.7,1.8), mean=1.25, stddev=0.218], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.39 0.41,0.43,0.45,0.48,0.50 0.52,0.53,0.54,0.58), mean=0.45, stddev=0.0446], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00133, stddev=0.000222], oderiv-count=5.82106e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.54,0.61,0.93 1.0,1.1,1.2,1.4,1.6 1.6,1.7,1.7,1.9), mean=1.24, stddev=0.225], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.7 1.7,1.8,2.0,2.4,2.7 2.9,3.0,3.0,3.1), mean=2.11, stddev=0.365]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.142857, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09234, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.48, stddev=0.00169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.53,0.55,0.57 0.61,0.65,0.72,0.83,0.87 0.90,0.93,0.95,1.0), mean=0.732, stddev=0.101], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08403, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.56,0.71 0.77,0.84,0.95,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.941, stddev=0.134], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.76,0.77,0.79 0.82,0.86,0.93,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.946, stddev=0.0931], bias-{mean,stddev}=-0.07825,0.04295, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.78,0.78,1.1 1.1,1.2,1.3,1.5,1.6 1.7,1.8,1.9,2.2), mean=1.35, stddev=0.224], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.31,0.37,0.39 0.41,0.43,0.45,0.47,0.48 0.49,0.50,0.51,0.53), mean=0.448, stddev=0.0354], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00139, stddev=0.000225], oderiv-count=4.69152e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.70,0.75,1.1 1.1,1.2,1.3,1.5,1.6 1.7,1.8,1.8,2.0), mean=1.33, stddev=0.226], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.9,2.0,2.3,2.6,2.7 2.8,3.0,3.1,3.3), mean=2.28, stddev=0.326]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.142857, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09325, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.49, stddev=0.00109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.52,0.54,0.57 0.61,0.64,0.72,0.83,0.91 0.96,0.99,1.0,1.1), mean=0.737, stddev=0.117], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08404, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.46,0.63,0.71 0.74,0.85,0.94,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.941, stddev=0.139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.76,0.77,0.79 0.82,0.87,0.95,1.0,1.0 1.1,1.1,1.1,1.3), mean=0.946, stddev=0.0926], bias-{mean,stddev}=-0.07498,0.039, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.57e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.71,0.95,1.1 1.1,1.1,1.3,1.4,1.5 1.5,1.6,1.6,1.7), mean=1.28, stddev=0.175], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.34,0.37 0.38,0.40,0.43,0.46,0.47 0.48,0.49,0.50,0.54), mean=0.426, stddev=0.041], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002), mean=0.00168, stddev=0.000225], oderiv-count=3.97184e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.67,0.89,1.1 1.1,1.1,1.3,1.4,1.5 1.6,1.6,1.7,1.8), mean=1.27, stddev=0.18], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.9,2.0 2.0,2.1,2.3,2.5,2.7 2.9,3.0,3.0,3.2), mean=2.33, stddev=0.281]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.142857, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08723, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.4, stddev=0.00138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.48,0.49,0.51 0.54,0.58,0.66,0.80,0.85 0.90,0.93,0.96,1.1), mean=0.687, stddev=0.12], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0812, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.55,0.59,0.67 0.72,0.74,0.89,1.1,1.1 1.2,1.2,1.2,1.2), mean=0.903, stddev=0.168], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.74,0.74,0.78 0.81,0.84,0.91,0.99,1.0 1.1,1.1,1.1,1.1), mean=0.915, stddev=0.086], bias-{mean,stddev}=-0.07887,0.03888, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.93e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.73,0.77,0.84 0.90,0.96,1.1,1.2,1.2 1.4,1.5,1.5,1.6), mean=1.07, stddev=0.156], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.30,0.32 0.35,0.37,0.40,0.43,0.45 0.45,0.47,0.47,0.49), mean=0.399, stddev=0.0401], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.003,0.003,0.003,0.004), mean=0.00243, stddev=0.000284], oderiv-count=2.83136e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.69,0.73,0.81 0.85,0.92,1.1,1.2,1.2 1.4,1.5,1.5,1.6), mean=1.06, stddev=0.162], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.8 1.9,2.0,2.2,2.5,2.8 3.0,3.1,3.2,3.3), mean=2.26, stddev=0.36]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.142857, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08291, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.33, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.48,0.50 0.52,0.55,0.63,0.75,0.82 0.87,0.90,0.92,0.93), mean=0.653, stddev=0.114], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0796, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.47,0.49,0.56 0.64,0.71,0.86,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.879, stddev=0.194], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.74,0.76 0.78,0.82,0.90,0.97,1.0 1.0,1.0,1.1,1.2), mean=0.896, stddev=0.0872], bias-{mean,stddev}=-0.08965,0.04995, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.34e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.61,0.62,0.67 0.71,0.77,0.88,1.0,1.1 1.2,1.2,1.2,1.4), mean=0.893, stddev=0.148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.23 0.26,0.29,0.36,0.41,0.43 0.46,0.47,0.47,0.52), mean=0.35, stddev=0.0695], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.004,0.004 0.005,0.005,0.006,0.006), mean=0.0037, stddev=0.000568], oderiv-count=1.82784e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.57,0.57,0.65 0.69,0.74,0.87,0.99,1.1 1.2,1.2,1.2,1.5), mean=0.881, stddev=0.158], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.6,1.7 1.8,1.9,2.3,2.8,3.0 3.0,3.3,3.4,3.5), mean=2.35, stddev=0.455]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.142857, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08783, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.41, stddev=0.00134], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.52,0.55 0.57,0.60,0.67,0.80,0.84 0.89,0.92,0.96,1.0), mean=0.694, stddev=0.11], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08719, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.59,0.64 0.77,0.83,0.95,1.2,1.2 1.2,1.3,1.3,1.3), mean=0.971, stddev=0.173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.80,0.83,0.85 0.88,0.92,0.98,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.983, stddev=0.083], bias-{mean,stddev}=-0.08219,0.0686, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.13e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.70,0.77 0.82,0.86,1.0,1.2,1.2 1.3,1.3,1.4,1.4), mean=1.02, stddev=0.163], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.18,0.21 0.24,0.29,0.35,0.41,0.43 0.44,0.45,0.45,0.51), mean=0.348, stddev=0.0712], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.006,0.006,0.006,0.007,0.007 0.008,0.009,0.009,0.009), mean=0.00651, stddev=0.000795], oderiv-count=612544
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.64,0.65,0.74 0.79,0.82,0.98,1.1,1.2 1.3,1.4,1.4,1.5), mean=0.999, stddev=0.176], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,2.0,2.1,2.2 2.5,2.7,3.1,3.7,4.0 4.1,4.3,4.3,4.8), mean=3.16, stddev=0.587]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.142857, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.005, max-change=0.75, params-rms=0.1247, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.41, stddev=0.00661], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.78,0.80,0.82 0.86,0.92,0.99,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.993, stddev=0.092], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1865, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.2,1.2,1.3 1.3,1.4,1.5,1.6,1.6 1.7,1.7,1.7,1.7), mean=1.49, stddev=0.124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.9,1.9 2.0,2.0,2.1,2.2,2.3 2.3,2.3,2.4,2.4), mean=2.11, stddev=0.129], bias-{mean,stddev}=-0.03821,0.1256, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.98e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.4,1.5 1.5,1.6,1.8,2.0,2.1 2.2,2.2,2.3,2.5), mean=1.79, stddev=0.227], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.35 0.36,0.37,0.40,0.42,0.43 0.45,0.46,0.47,0.47), mean=0.398, stddev=0.0286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.009,0.009 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0104, stddev=0.00154], oderiv-count=601664
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.4,1.4 1.5,1.6,1.8,2.0,2.1 2.2,2.3,2.3,2.4), mean=1.78, stddev=0.233], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,3.4,3.4,3.7 3.7,3.9,4.4,5.0,5.3 5.6,5.9,6.0,6.7), mean=4.48, stddev=0.64]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, params-rms=0.247, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.8,2.8,2.8,2.8 2.8,2.8,2.8,2.8,2.8 2.8,2.8,2.8,2.8), mean=2.79, stddev=0.00239], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.5,1.6 1.7,1.8,2.0,2.1,2.2 2.3,2.3,2.4,2.4), mean=1.96, stddev=0.215], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-4e-08 -3e-08,-2e-08,-2e-09,2e-08,2e-08 3e-08,3e-08,4e-08,5e-08), mean=-4.76e-11, stddev=2.04e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.9,2.9,3.0,3.1 3.1,3.3,3.4,3.6,3.7 3.8,4.0,4.0,4.1), mean=3.43, stddev=0.242]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00208424, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2062, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.16,0.25,0.53 0.84,1.2,1.7,2.0,2.1 2.2,2.3,2.4,3.1), mean=1.57, stddev=0.506], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,13,14,14 14,15,15,15), mean=13.1, stddev=0.773], bias-{mean,stddev}=0.001367,0.2958, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.131, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.73,0.74,0.91 0.95,0.99,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.0913], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.4,1.4,1.5,1.5,1.6 1.7,1.7,1.7,1.8), mean=1.48, stddev=0.114], bias-{mean,stddev}=-0.03644,0.1804, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.64,0.66,0.73 0.77,0.82,0.98,1.2,1.4 1.4,1.5,1.6,1.7), mean=1.02, stddev=0.224], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.39 0.40,0.43,0.47,0.51,0.55 0.57,0.61,0.62,0.65), mean=0.473, stddev=0.0587], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.005,0.005,0.005,0.006,0.006 0.007,0.007,0.007,0.01), mean=0.00559, stddev=0.000913], oderiv-count=616896
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.59,0.67,0.71 0.78,0.82,0.97,1.1,1.3 1.4,1.5,1.6,1.6), mean=1.01, stddev=0.219], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.5,1.7,1.8 1.9,1.9,2.0,2.3), mean=1.55, stddev=0.212]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00208424, l2-regularize=0.0005, max-change=0.75, params-rms=0.1344, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.52, stddev=0.000977], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.83,0.84,0.87 0.91,0.96,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.07, stddev=0.123], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-3e-08,-2e-08 -2e-08,-2e-08,2e-10,2e-08,2e-08 2e-08,3e-08,3e-08,5e-08), mean=1.46e-09, stddev=1.79e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.5,1.5,1.6,1.7 1.8,1.8,1.8,1.8), mean=1.55, stddev=0.105]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0104212, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1955, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.08,0.30 0.74,1.0,1.5,1.9,2.1 2.3,2.4,2.5,3.7), mean=1.46, stddev=0.559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,12,13,13 13,13,13,13), mean=12.4, stddev=0.226], bias-{mean,stddev}=2.644e-08,0.2065, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0001,0.0002,0.0006,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000799, stddev=0.0012], oderiv-count=603840
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/270.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/271.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.47414 tdnnf2.linear:3.08631 tdnnf2.affine:3.50922 tdnnf3.linear:2.67394 tdnnf3.affine:3.18664 tdnnf4.linear:2.47414 tdnnf4.affine:2.93712 tdnnf5.linear:2.27388 tdnnf5.affine:2.55976 tdnnf6.linear:2.16278 tdnnf6.affine:2.44903 tdnnf7.linear:2.06403 tdnnf7.affine:2.37931 tdnnf8.linear:1.93739 tdnnf8.affine:2.27296 tdnnf9.linear:1.94905 tdnnf9.affine:2.29053 tdnnf10.linear:2.00173 tdnnf10.affine:2.42181 tdnnf11.linear:2.13553 tdnnf11.affine:2.63482 tdnnf12.linear:2.19912 tdnnf12.affine:2.74459 tdnnf13.linear:2.45114 tdnnf13.affine:3.12145 prefinal-l:3.44453 prefinal-chain.affine:3.63656 prefinal-chain.linear:3.44568 output.affine:8.61416 prefinal-xent.affine:2.06047 prefinal-xent.linear:1.29375 output-xent.affine:7.47214 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.4673 tdnnf2.linear:14.3995 tdnnf2.affine:14.582 tdnnf3.linear:13.2699 tdnnf3.affine:13.9119 tdnnf4.linear:12.1712 tdnnf4.affine:12.6703 tdnnf5.linear:11.2985 tdnnf5.affine:10.9966 tdnnf6.linear:11.1745 tdnnf6.affine:10.6015 tdnnf7.linear:11.1851 tdnnf7.affine:10.5259 tdnnf8.linear:11.4835 tdnnf8.affine:10.4705 tdnnf9.linear:11.8199 tdnnf9.affine:10.8037 tdnnf10.linear:11.9358 tdnnf10.affine:10.7994 tdnnf11.linear:11.1653 tdnnf11.affine:10.4417 tdnnf12.linear:10.6129 tdnnf12.affine:10.2554 tdnnf13.linear:11.2428 tdnnf13.affine:11.2259 prefinal-l:11.2873 prefinal-chain.affine:16.9488 prefinal-chain.linear:22.356 output.affine:106.502 prefinal-xent.affine:12.0357 prefinal-xent.linear:12.1665 output-xent.affine:100.271 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.28501 tdnnf2.linear:0.2129 tdnnf2.affine:0.237657 tdnnf3.linear:0.199136 tdnnf3.affine:0.224613 tdnnf4.linear:0.200908 tdnnf4.affine:0.227554 tdnnf5.linear:0.199666 tdnnf5.affine:0.230382 tdnnf6.linear:0.192394 tdnnf6.affine:0.229836 tdnnf7.linear:0.183938 tdnnf7.affine:0.225508 tdnnf8.linear:0.167827 tdnnf8.affine:0.216294 tdnnf9.linear:0.164287 tdnnf9.affine:0.211336 tdnnf10.linear:0.166897 tdnnf10.affine:0.223142 tdnnf11.linear:0.190706 tdnnf11.affine:0.251745 tdnnf12.linear:0.206299 tdnnf12.affine:0.266652 tdnnf13.linear:0.216987 tdnnf13.affine:0.276751 prefinal-l:0.3036 prefinal-chain.affine:0.213564 prefinal-chain.linear:0.152992 output.affine:0.0806303 prefinal-xent.affine:0.170287 prefinal-xent.linear:0.105866 output-xent.affine:0.0745692 ]
# Accounting: time=3 threads=1
# Ended (code 0) at Mon Feb 24 12:46:38 CST 2020, elapsed time 3 seconds
