# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/206.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/205.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/206.mdl 
# Started at Mon Feb 24 11:12:39 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/206.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1537, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.4,1.4,1.6 1.7,1.8,2.1,2.5,3.1 3.3,3.4,3.4,3.7), mean=2.22, stddev=0.512], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.63,0.65,0.73 0.79,0.94,1.6,2.0,2.5 2.8,3.0,3.1,3.7), mean=1.61, stddev=0.648], bias-{mean,stddev}=-0.1526,0.2195, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.46e+06, self-repaired-proportion=0.022017, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.009,0.02 0.03,0.05,0.11,0.20,0.24 0.27,0.37,0.38,0.39), mean=0.126, stddev=0.0883], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.08 0.10,0.17,0.30,0.47,0.65 0.71,0.78,0.79,0.83), mean=0.34, stddev=0.197], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.06,0.07 0.08,0.11,0.11,0.16), mean=0.0457, stddev=0.0219], oderiv-count=1.28436e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.007,0.02 0.03,0.05,0.11,0.21,0.25 0.28,0.35,0.39,0.40), mean=0.127, stddev=0.0905], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.05,0.09 0.11,0.14,0.22,0.29,0.31 0.33,0.36,0.36,0.38), mean=0.215, stddev=0.0777]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.349206, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0,2.0 2.0,2.0,2.0,2.0), mean=2.02, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.75,0.80,0.81 0.85,0.90,0.99,1.1,1.1 1.2,1.2,1.4,1.4), mean=1, stddev=0.119], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.125, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.4,1.5,1.6 1.7,1.8,1.8,1.9), mean=1.41, stddev=0.158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.3,1.3,1.4,1.5,1.5 1.6,1.6,1.7,1.7), mean=1.41, stddev=0.11], bias-{mean,stddev}=-0.1829,0.1062, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.73e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.1,1.3 1.4,1.6,1.8,2.0,2.1 2.2,2.3,2.3,2.4), mean=1.77, stddev=0.273], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.38 0.39,0.44,0.53,0.58,0.59 0.60,0.61,0.61,0.62), mean=0.518, stddev=0.0722], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.003 0.004,0.007,0.007,0.008), mean=0.00194, stddev=0.00124], oderiv-count=1.23926e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.3 1.4,1.5,1.8,2.0,2.1 2.2,2.3,2.3,2.4), mean=1.76, stddev=0.278], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.9,2.0 2.2,2.4,2.8,3.2,3.4 3.8,3.9,3.9,4.0), mean=2.79, stddev=0.504]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.349206, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1108, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.77, stddev=0.00218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.66,0.72,0.74 0.76,0.80,0.88,0.95,1.0 1.0,1.1,1.1,1.1), mean=0.882, stddev=0.0908], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1169, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.95,0.96,1.1 1.2,1.2,1.3,1.4,1.5 1.6,1.7,1.7,1.7), mean=1.31, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.6,1.6), mean=1.32, stddev=0.106], bias-{mean,stddev}=-0.1823,0.09659, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.45e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,1.3,1.4,1.6 1.7,1.9,2.0,2.2,2.3 2.4,2.5,2.6,2.7), mean=2.03, stddev=0.274], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.42 0.44,0.47,0.52,0.56,0.58 0.58,0.59,0.59,0.61), mean=0.514, stddev=0.0508], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0007,0.0008 0.0008,0.0008,0.0009,0.001,0.002 0.003,0.004,0.004,0.009), mean=0.00124, stddev=0.000999], oderiv-count=1.08401e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,1.3,1.3,1.6 1.7,1.8,2.0,2.3,2.4 2.4,2.5,2.6,2.7), mean=2.03, stddev=0.284], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.8,1.8,2.5 2.6,2.8,3.2,3.6,3.8 4.0,4.2,4.3,4.8), mean=3.2, stddev=0.526]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.349206, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1069, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.71, stddev=0.00349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.67,0.68,0.72 0.74,0.78,0.85,0.91,0.96 0.99,1.0,1.1,1.1), mean=0.851, stddev=0.0838], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.73,1.1 1.1,1.1,1.2,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.24, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.0 1.0,1.1,1.2,1.4,1.4 1.5,1.5,1.5,2.0), mean=1.24, stddev=0.157], bias-{mean,stddev}=-0.1753,0.0995, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.9e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.79,0.96,1.8 1.9,2.0,2.2,2.4,2.5 2.7,2.8,2.8,3.2), mean=2.19, stddev=0.347], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.40,0.42 0.43,0.45,0.50,0.55,0.56 0.58,0.58,0.58,0.59), mean=0.501, stddev=0.0494], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0006 0.0006,0.0006,0.0007,0.0008,0.001 0.002,0.003,0.005,0.006), mean=0.00091, stddev=0.00078], oderiv-count=9.8208e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.85,0.88,1.8 1.9,2.0,2.2,2.5,2.6 2.6,2.8,2.8,3.2), mean=2.19, stddev=0.351], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.4,2.8 3.0,3.2,3.5,4.0,4.4 4.5,4.7,4.9,5.2), mean=3.55, stddev=0.636]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.349206, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09862, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.58, stddev=0.0042], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.62,0.63,0.66 0.70,0.72,0.77,0.84,0.89 0.94,0.96,0.99,1.0), mean=0.785, stddev=0.079], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09739, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.59,0.90 0.96,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.5), mean=1.09, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.88,0.89,0.93 0.95,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.1, stddev=0.106], bias-{mean,stddev}=-0.1456,0.06864, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.99e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.83,0.87,1.6 1.7,1.8,2.0,2.2,2.3 2.4,2.5,2.5,2.8), mean=1.98, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.40,0.43 0.46,0.48,0.52,0.54,0.56 0.57,0.58,0.58,0.60), mean=0.512, stddev=0.042], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0006,0.0007 0.0007,0.0007,0.0008,0.0009,0.001 0.001,0.002,0.003,0.004), mean=0.000899, stddev=0.000458], oderiv-count=8.96314e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.83,0.83,1.6 1.7,1.8,2.0,2.2,2.3 2.4,2.5,2.5,2.6), mean=1.98, stddev=0.305], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.4,1.4,2.5 2.6,2.8,3.1,3.4,3.6 3.8,3.9,4.2,4.7), mean=3.08, stddev=0.484]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.349206, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0927, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.48, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.60,0.61 0.64,0.68,0.74,0.80,0.83 0.86,0.87,0.89,0.93), mean=0.738, stddev=0.0717], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08789, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.69,0.70,0.81 0.86,0.92,0.99,1.1,1.1 1.1,1.1,1.2,1.3), mean=0.988, stddev=0.108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.78,0.79,0.86 0.87,0.91,0.99,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.99, stddev=0.0958], bias-{mean,stddev}=-0.1431,0.06317, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.3e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,1.1,1.1,1.2 1.4,1.6,1.7,1.9,2.0 2.1,2.1,2.2,2.3), mean=1.72, stddev=0.24], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.42 0.44,0.47,0.50,0.53,0.55 0.56,0.58,0.58,0.60), mean=0.497, stddev=0.0442], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0007,0.0008,0.0008 0.0008,0.0008,0.0009,0.001,0.001 0.001,0.002,0.002,0.002), mean=0.000986, stddev=0.000217], oderiv-count=7.98912e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.1,1.1,1.2 1.4,1.5,1.7,2.0,2.0 2.1,2.1,2.2,2.4), mean=1.73, stddev=0.252], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.9,2.0,2.1 2.3,2.4,2.6,2.9,3.2 3.3,3.4,3.4,3.9), mean=2.67, stddev=0.368]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.349206, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09357, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.5, stddev=0.0028], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.57,0.59,0.61 0.65,0.68,0.74,0.81,0.84 0.86,0.89,0.92,0.96), mean=0.745, stddev=0.0762], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08836, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.60,0.61,0.81 0.85,0.91,1.0,1.1,1.1 1.2,1.2,1.2,1.4), mean=0.992, stddev=0.123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.84,0.84 0.87,0.90,0.98,1.1,1.1 1.2,1.2,1.2,1.2), mean=0.995, stddev=0.101], bias-{mean,stddev}=-0.1256,0.06239, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.72e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.80,0.98,1.3 1.5,1.6,1.7,1.9,2.0 2.1,2.2,2.2,2.3), mean=1.73, stddev=0.251], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.41 0.43,0.45,0.48,0.51,0.53 0.54,0.55,0.56,0.59), mean=0.479, stddev=0.0445], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0009,0.0009,0.001,0.001 0.001,0.001,0.002,0.002), mean=0.000992, stddev=0.000207], oderiv-count=6.95546e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.86,0.98,1.4 1.5,1.6,1.7,1.9,2.0 2.1,2.2,2.2,2.3), mean=1.72, stddev=0.256], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.9,2.1,2.2 2.3,2.4,2.7,3.0,3.4 3.4,3.6,3.7,4.0), mean=2.75, stddev=0.406]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.349206, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09687, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.57,0.61,0.62 0.67,0.70,0.77,0.84,0.88 0.92,0.93,0.97,1.1), mean=0.77, stddev=0.0847], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08914, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.59,0.76 0.83,0.89,0.99,1.1,1.2 1.2,1.2,1.2,1.3), mean=0.998, stddev=0.146], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.82,0.82,0.85 0.87,0.90,0.98,1.1,1.1 1.2,1.3,1.3,1.4), mean=1, stddev=0.113], bias-{mean,stddev}=-0.09666,0.06884, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.87,0.92,1.3 1.5,1.6,1.7,2.0,2.3 2.4,2.4,2.5,2.5), mean=1.75, stddev=0.322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.39 0.42,0.43,0.46,0.49,0.50 0.51,0.51,0.53,0.64), mean=0.458, stddev=0.0453], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0008,0.0008,0.0008 0.0008,0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.001, stddev=0.00016], oderiv-count=5.87322e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.88,0.96,1.4 1.4,1.6,1.7,2.0,2.2 2.4,2.4,2.4,2.5), mean=1.75, stddev=0.318], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.2,2.2,2.4 2.4,2.6,2.8,3.2,3.7 3.8,3.9,3.9,4.0), mean=2.92, stddev=0.43]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.349206, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1009, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.61, stddev=0.00189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.59,0.61,0.65 0.68,0.71,0.80,0.88,0.93 0.98,1.0,1.0,1.1), mean=0.801, stddev=0.0998], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09181, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.57,0.58,0.73 0.80,0.90,1.0,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.03, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.79,0.82,0.88 0.90,0.94,1.0,1.1,1.2 1.2,1.2,1.3,1.3), mean=1.03, stddev=0.111], bias-{mean,stddev}=-0.07918,0.05871, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.15e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.94,0.97,1.2 1.5,1.6,1.8,2.0,2.2 2.3,2.5,2.5,2.6), mean=1.8, stddev=0.322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.37 0.40,0.43,0.45,0.47,0.48 0.49,0.50,0.51,0.52), mean=0.445, stddev=0.0428], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.0009,0.0009 0.0009,0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002), mean=0.00111, stddev=0.000159], oderiv-count=4.73472e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.96,1.0,1.3 1.4,1.6,1.8,2.0,2.2 2.4,2.5,2.5,2.6), mean=1.81, stddev=0.338], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.3,2.3,2.5 2.6,2.7,3.1,3.4,3.7 3.9,4.2,4.2,4.6), mean=3.13, stddev=0.442]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.349206, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1019, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.63, stddev=0.00505], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.58,0.63 0.67,0.71,0.79,0.90,0.98 1.0,1.1,1.1,1.1), mean=0.807, stddev=0.116], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09196, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.52,0.72,0.78 0.82,0.90,1.0,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.03, stddev=0.159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.76,0.77,0.83 0.87,0.95,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.03, stddev=0.119], bias-{mean,stddev}=-0.07731,0.04513, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.65e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.91,1.3,1.4 1.4,1.5,1.7,1.8,1.9 2.0,2.1,2.1,2.1), mean=1.67, stddev=0.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.34,0.36 0.37,0.40,0.43,0.46,0.47 0.48,0.49,0.49,0.51), mean=0.425, stddev=0.0419], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.002), mean=0.00137, stddev=0.000172], oderiv-count=3.90336e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.92,1.2,1.4 1.4,1.5,1.7,1.8,1.9 2.0,2.1,2.1,2.2), mean=1.67, stddev=0.208], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.5,2.5,2.6 2.7,2.8,3.1,3.6,3.9 4.2,4.6,4.7,5.0), mean=3.23, stddev=0.522]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.349206, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09817, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.57, stddev=0.00244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.55,0.59,0.62 0.64,0.68,0.76,0.88,0.96 0.98,1.0,1.1,1.1), mean=0.777, stddev=0.116], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08982, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.47,0.53,0.70 0.77,0.84,0.99,1.2,1.3 1.3,1.3,1.3,1.3), mean=0.997, stddev=0.197], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.82,0.83,0.85 0.87,0.92,1.0,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.01, stddev=0.0992], bias-{mean,stddev}=-0.08461,0.05301, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.92e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.80,0.84,1.1 1.2,1.3,1.4,1.6,1.6 1.7,1.8,1.8,2.1), mean=1.42, stddev=0.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.22,0.26,0.31 0.33,0.36,0.40,0.44,0.46 0.47,0.48,0.48,0.50), mean=0.396, stddev=0.0548], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00191, stddev=0.000217], oderiv-count=2.83642e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.81,0.89,1.1 1.2,1.2,1.4,1.6,1.7 1.8,1.8,1.9,2.2), mean=1.42, stddev=0.221], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.4,2.4 2.5,2.8,3.3,3.9,4.2 4.3,4.4,4.5,4.5), mean=3.33, stddev=0.574]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.349206, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09657, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.00428], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.56,0.57,0.60 0.62,0.66,0.76,0.88,0.92 0.95,0.98,1.0,1.1), mean=0.764, stddev=0.115], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.55,0.67 0.73,0.78,0.97,1.2,1.3 1.3,1.3,1.3,1.3), mean=0.996, stddev=0.213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.81,0.82,0.85 0.87,0.92,1.0,1.1,1.1 1.2,1.2,1.2,1.4), mean=1.01, stddev=0.104], bias-{mean,stddev}=-0.09355,0.07246, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.15e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.80,0.84,0.89 1.0,1.1,1.3,1.4,1.5 1.6,1.8,1.8,2.1), mean=1.29, stddev=0.223], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.22 0.26,0.29,0.37,0.44,0.45 0.48,0.51,0.55,0.56), mean=0.363, stddev=0.0796], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.004,0.004,0.004), mean=0.00278, stddev=0.000379], oderiv-count=1.85069e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.77,0.85,0.91 1.0,1.1,1.3,1.5,1.6 1.7,1.8,1.8,2.1), mean=1.3, stddev=0.222], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.6,2.6,2.7 2.8,3.0,3.6,4.2,4.7 5.0,5.3,5.3,5.5), mean=3.71, stddev=0.727]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.349206, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1028, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.64, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.62,0.64 0.67,0.71,0.80,0.92,0.97 1.0,1.0,1.0,1.1), mean=0.814, stddev=0.113], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09605, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.65,0.65,0.70 0.79,0.88,1.1,1.3,1.4 1.4,1.4,1.4,1.5), mean=1.07, stddev=0.21], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.87,0.89,0.92 0.96,0.98,1.1,1.2,1.2 1.2,1.3,1.3,1.4), mean=1.08, stddev=0.102], bias-{mean,stddev}=-0.09355,0.09601, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.35e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.85,0.87,0.98 1.1,1.2,1.3,1.5,1.6 1.7,1.7,1.8,1.9), mean=1.33, stddev=0.215], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.19 0.22,0.29,0.36,0.44,0.47 0.48,0.50,0.52,0.54), mean=0.359, stddev=0.0888], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.005,0.005,0.005,0.006,0.006 0.007,0.008,0.008,0.009), mean=0.00537, stddev=0.000748], oderiv-count=631040
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.86,0.87,0.99 1.1,1.2,1.4,1.5,1.6 1.7,1.8,1.9,2.0), mean=1.36, stddev=0.219], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.0,3.1,3.4 3.5,3.9,4.4,5.3,5.7 6.1,6.3,6.6,6.9), mean=4.58, stddev=0.845]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.349206, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.005, max-change=0.75, params-rms=0.1404, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.59, stddev=0.0209], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.88,0.88,0.93 0.96,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.12, stddev=0.111], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.2047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.3 1.4,1.5,1.6,1.8,1.8 1.8,1.9,1.9,1.9), mean=1.63, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.1,2.2 2.2,2.2,2.3,2.4,2.5 2.5,2.5,2.6,2.6), mean=2.31, stddev=0.116], bias-{mean,stddev}=-0.06837,0.1238, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.25e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.9,2.0,2.0 2.1,2.2,2.5,2.8,2.9 3.1,3.2,3.2,3.6), mean=2.51, stddev=0.334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.33,0.34 0.34,0.36,0.39,0.41,0.42 0.43,0.44,0.44,0.46), mean=0.386, stddev=0.0287], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00908, stddev=0.00122], oderiv-count=617984
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,2.0,2.0 2.1,2.2,2.5,2.8,2.9 3.2,3.3,3.5,3.7), mean=2.52, stddev=0.352], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.7,5.3,5.5,6.1 6.3,6.6,7.5,8.4,9.0 9.3,9.9,10,14), mean=7.58, stddev=1.21]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, params-rms=0.3012, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.4,3.4,3.4,3.4 3.4,3.4,3.4,3.4,3.4 3.4,3.4,3.4,3.4), mean=3.41, stddev=0.00731], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.7,1.9 2.0,2.2,2.4,2.6,2.8 2.8,2.9,2.9,2.9), mean=2.39, stddev=0.286], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-6e-08,-4e-08 -3e-08,-3e-08,2e-09,2e-08,3e-08 3e-08,4e-08,5e-08,5e-08), mean=-2.56e-09, stddev=2.51e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.7,3.7,3.8,3.8 3.9,3.9,4.1,4.4,4.5 4.7,4.9,4.9,5.2), mean=4.19, stddev=0.305]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00335195, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.2357, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.15,0.25,0.56 0.91,1.3,1.9,2.3,2.4 2.5,2.7,2.8,3.6), mean=1.79, stddev=0.595], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(13,13,13,14 14,14,15,16,16 17,17,17,18), mean=14.9, stddev=1.02], bias-{mean,stddev}=0.001407,0.3391, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.151, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.75,0.82,1.1 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.4,1.8), mean=1.2, stddev=0.118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.5,1.6,1.7,1.8,1.9 1.9,1.9,2.0,2.1), mean=1.7, stddev=0.125], bias-{mean,stddev}=-0.09038,0.1864, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.87,0.92,0.96 1.0,1.1,1.3,1.5,1.7 1.8,1.9,2.0,2.1), mean=1.3, stddev=0.256], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.35,0.37,0.40 0.42,0.44,0.47,0.52,0.56 0.60,0.62,0.63,0.68), mean=0.482, stddev=0.0609], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.004,0.005,0.005,0.005 0.005,0.006,0.007,0.009), mean=0.00464, stddev=0.000602], oderiv-count=595136
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.90,0.92,0.94 1.0,1.1,1.3,1.5,1.7 1.9,2.0,2.0,2.1), mean=1.32, stddev=0.268], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.7,2.0,2.2,2.3 2.4,2.4,2.5,3.7), mean=2, stddev=0.292]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00335195, l2-regularize=0.0005, max-change=0.75, params-rms=0.1497, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.69, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.79,0.88,0.98 1.0,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.5), mean=1.19, stddev=0.134], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-3e-08,-3e-08 -3e-08,-2e-08,-2e-09,1e-08,2e-08 3e-08,3e-08,3e-08,4e-08), mean=-1.5e-09, stddev=1.79e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.6,1.7,1.8,1.9,1.9 1.9,2.0,2.1,2.1), mean=1.77, stddev=0.122]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0167598, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.187, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.08,0.27 0.66,0.95,1.4,1.9,2.1 2.2,2.3,2.4,3.4), mean=1.39, stddev=0.552], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(11,11,11,11 12,12,12,12,12 12,12,12,12), mean=11.9, stddev=0.234], bias-{mean,stddev}=4.768e-08,0.2469, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-05 0.0001,0.0002,0.0005,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000777, stddev=0.0012], oderiv-count=610368
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/205.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/206.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.55585 tdnnf2.linear:4.68681 tdnnf2.affine:5.26608 tdnnf3.linear:4.03335 tdnnf3.affine:4.80868 tdnnf4.linear:3.92172 tdnnf4.affine:4.65755 tdnnf5.linear:3.64104 tdnnf5.affine:4.10777 tdnnf6.linear:3.18128 tdnnf6.affine:3.57812 tdnnf7.linear:3.03039 tdnnf7.affine:3.44626 tdnnf8.linear:2.94902 tdnnf8.affine:3.33622 tdnnf9.linear:2.95236 tdnnf9.affine:3.42906 tdnnf10.linear:3.04544 tdnnf10.affine:3.62916 tdnnf11.linear:3.14672 tdnnf11.affine:3.79965 tdnnf12.linear:3.30141 tdnnf12.affine:4.01113 tdnnf13.linear:3.69899 tdnnf13.affine:4.61516 prefinal-l:4.6273 prefinal-chain.affine:4.93554 prefinal-chain.linear:5.41069 output.affine:14.6119 prefinal-xent.affine:2.74775 prefinal-xent.linear:1.82178 output-xent.affine:12.1152 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.97 tdnnf2.linear:16.1266 tdnnf2.affine:16.1792 tdnnf3.linear:14.1881 tdnnf3.affine:15.1475 tdnnf4.linear:13.6783 tdnnf4.affine:14.2732 tdnnf5.linear:12.6229 tdnnf5.affine:12.5987 tdnnf6.linear:11.8652 tdnnf6.affine:11.3876 tdnnf7.linear:11.9771 tdnnf7.affine:11.4212 tdnnf8.linear:12.3995 tdnnf8.affine:11.4884 tdnnf9.linear:12.9161 tdnnf9.affine:11.8049 tdnnf10.linear:13.0448 tdnnf10.affine:11.8143 tdnnf11.linear:12.5655 tdnnf11.affine:11.5529 tdnnf12.linear:12.361 tdnnf12.affine:11.6023 tdnnf13.linear:13.1561 tdnnf13.affine:12.3876 prefinal-l:12.7086 prefinal-chain.affine:18.5968 prefinal-chain.linear:27.2603 output.affine:121.78 prefinal-xent.affine:13.8694 prefinal-xent.linear:13.5519 output-xent.affine:96.3986 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.37029 tdnnf2.linear:0.292972 tdnnf2.affine:0.328297 tdnnf3.linear:0.286023 tdnnf3.affine:0.318579 tdnnf4.linear:0.28966 tdnnf4.affine:0.33033 tdnnf5.linear:0.29137 tdnnf5.affine:0.328256 tdnnf6.linear:0.269124 tdnnf6.affine:0.315109 tdnnf7.linear:0.253268 tdnnf7.affine:0.301025 tdnnf8.linear:0.238154 tdnnf8.affine:0.290443 tdnnf9.linear:0.228557 tdnnf9.affine:0.290176 tdnnf10.linear:0.233264 tdnnf10.affine:0.306917 tdnnf11.linear:0.250147 tdnnf11.affine:0.328064 tdnnf12.linear:0.266885 tdnnf12.affine:0.345347 tdnnf13.linear:0.281593 tdnnf13.affine:0.3735 prefinal-l:0.362835 prefinal-chain.affine:0.265291 prefinal-chain.linear:0.19856 output.affine:0.11995 prefinal-xent.affine:0.198262 prefinal-xent.linear:0.134315 output-xent.affine:0.125814 ]
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 11:12:43 CST 2020, elapsed time 4 seconds
