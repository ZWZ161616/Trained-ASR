# nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/189.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/190.mdl 
# Started at Mon Feb 24 10:47:57 CST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/189.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/190.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.05734, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.63,0.63,0.69 0.70,0.74,0.83,0.92,0.99 1.0,1.2,1.2,1.2), mean=0.842, stddev=0.117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.28 0.30,0.33,0.61,0.85,0.94 0.98,1.0,1.1,1.1), mean=0.601, stddev=0.244], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.19 0.24,0.34,0.67,1.1,1.3 1.5,1.6,1.7,1.8), mean=0.741, stddev=0.418], bias-{mean,stddev}=-0.001805,0.03915, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.43e+05, self-repaired-proportion=-1.21094, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.36,-0.30,-0.27,-0.10 -0.06,-0.01,0.07,0.26,0.38 0.44,0.55,0.61,0.74), mean=0.115, stddev=0.186], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.36,-0.25,-0.23,-0.18 -0.10,0.02,0.27,0.62,0.82 0.95,1.0,1.1,1.5), mean=0.322, stddev=0.354], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.04,0.06,0.10,0.18,0.24 0.29,0.36,0.43,0.47), mean=0.127, stddev=0.0903], oderiv-count=344640
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.403175, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03778, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.51,0.54 0.55,0.56,0.60,0.64,0.65 0.67,0.70,0.71,0.78), mean=0.603, stddev=0.0482], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.24 0.25,0.27,0.30,0.33,0.35 0.36,0.38,0.38,0.40), mean=0.3, stddev=0.0358], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.24,0.28 0.30,0.35,0.54,0.75,0.86 0.92,1.0,1.0,1.1), mean=0.565, stddev=0.214], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.04313, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.41 0.43,0.44,0.49,0.52,0.54 0.56,0.58,0.59,0.61), mean=0.486, stddev=0.0455], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.42,0.44 0.45,0.46,0.49,0.51,0.53 0.55,0.55,0.56,0.57), mean=0.487, stddev=0.0333], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.009,0.01,0.03 0.06,0.11,0.34,0.67,0.81 0.89,0.99,1.0,1.1), mean=0.397, stddev=0.284], bias-{mean,stddev}=-0.0006375,0.01369, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.36e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-13,-13,-9.5 -6.1,-3.3,2.2,7.4,14 16,18,18,23), mean=2.68, stddev=7.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.9,-4.6,-4.3,-2.9 -1.8,-0.96,0.58,1.6,2.7 3.4,4.2,4.8,8.8), mean=0.547, stddev=2], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.001,0.005,0.008,0.01 0.02,0.02,0.02,0.03), mean=0.0057, stddev=0.0056], oderiv-count=169472
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.403175, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03223, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.45 0.46,0.48,0.51,0.55,0.56 0.57,0.59,0.61,0.71), mean=0.514, stddev=0.0449], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.23,0.25,0.28,0.29 0.30,0.33,0.34,0.36), mean=0.256, stddev=0.0325], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.22 0.24,0.29,0.45,0.65,0.75 0.81,0.84,0.86,0.88), mean=0.48, stddev=0.189], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03798, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.37 0.38,0.40,0.43,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.428, stddev=0.034], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.36,0.38 0.39,0.40,0.43,0.45,0.47 0.48,0.49,0.50,0.51), mean=0.429, stddev=0.0316], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.003,0.008,0.02 0.05,0.10,0.30,0.58,0.71 0.80,0.87,0.91,0.98), mean=0.349, stddev=0.25], bias-{mean,stddev}=-0.0009855,0.01093, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.14e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.60,0.78,1.2 1.3,1.7,2.3,2.8,3.3 3.6,3.6,3.7,4.2), mean=2.29, stddev=0.734], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.25 0.31,0.39,0.52,0.62,0.68 0.72,0.76,0.78,0.85), mean=0.505, stddev=0.14]
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.403175, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.42,0.44 0.44,0.46,0.48,0.52,0.53 0.56,0.60,0.60,0.65), mean=0.492, stddev=0.0422], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.20 0.21,0.22,0.25,0.27,0.28 0.28,0.29,0.30,0.32), mean=0.245, stddev=0.0265], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.19,0.21 0.23,0.28,0.43,0.63,0.71 0.75,0.81,0.84,0.85), mean=0.459, stddev=0.181], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03712, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.36 0.37,0.39,0.42,0.45,0.47 0.48,0.49,0.50,0.55), mean=0.418, stddev=0.037], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.36 0.37,0.39,0.43,0.44,0.45 0.47,0.48,0.48,0.52), mean=0.419, stddev=0.0342], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.008,0.03 0.05,0.11,0.29,0.56,0.71 0.78,0.85,0.88,0.91), mean=0.342, stddev=0.244], bias-{mean,stddev}=0.000238,0.01101, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.001,0.002,0.003 0.005,0.008,0.008,0.02), mean=0.00146, stddev=0.0021], oderiv-count=299200
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.403175, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02868, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.40,0.41 0.42,0.42,0.46,0.48,0.50 0.52,0.52,0.53,0.55), mean=0.458, stddev=0.0349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.19 0.20,0.21,0.23,0.25,0.26 0.27,0.28,0.28,0.30), mean=0.228, stddev=0.0251], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.19 0.21,0.25,0.41,0.58,0.67 0.70,0.73,0.77,0.82), mean=0.426, stddev=0.17], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03256, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.31,0.32 0.33,0.34,0.36,0.39,0.41 0.42,0.43,0.43,0.45), mean=0.367, stddev=0.0305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.31,0.32 0.33,0.34,0.36,0.39,0.41 0.41,0.43,0.43,0.44), mean=0.367, stddev=0.0297], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.003,0.005,0.02 0.04,0.09,0.26,0.49,0.62 0.70,0.74,0.78,0.83), mean=0.3, stddev=0.213], bias-{mean,stddev}=0.0006695,0.008968, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0009,0.002,0.002 0.002,0.004,0.006,0.01), mean=0.00108, stddev=0.00137], oderiv-count=379392
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.403175, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02574, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.37 0.37,0.38,0.41,0.42,0.45 0.47,0.48,0.49,0.51), mean=0.411, stddev=0.0308], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.17 0.18,0.19,0.20,0.22,0.23 0.24,0.25,0.25,0.25), mean=0.205, stddev=0.0205], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.17,0.18 0.20,0.24,0.37,0.51,0.57 0.62,0.67,0.67,0.73), mean=0.385, stddev=0.146], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0295, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.30,0.31,0.33,0.36,0.37 0.38,0.39,0.39,0.40), mean=0.332, stddev=0.0288], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.30,0.31,0.33,0.35,0.37 0.37,0.38,0.38,0.40), mean=0.333, stddev=0.0252], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.007,0.02 0.04,0.09,0.23,0.45,0.56 0.62,0.68,0.69,0.74), mean=0.272, stddev=0.194], bias-{mean,stddev}=0.0005581,0.007182, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.403175, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02565, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.36 0.37,0.39,0.41,0.43,0.44 0.46,0.46,0.47,0.48), mean=0.41, stddev=0.0277], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.16,0.17 0.18,0.19,0.20,0.22,0.23 0.24,0.25,0.25,0.26), mean=0.204, stddev=0.0225], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.17,0.18 0.20,0.24,0.36,0.52,0.60 0.63,0.65,0.66,0.71), mean=0.383, stddev=0.147], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02841, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.28 0.28,0.29,0.32,0.34,0.35 0.36,0.37,0.38,0.42), mean=0.32, stddev=0.0272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.28,0.29 0.30,0.30,0.32,0.34,0.35 0.35,0.36,0.37,0.38), mean=0.321, stddev=0.0217], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,0.005,0.007,0.02 0.04,0.08,0.22,0.43,0.53 0.60,0.65,0.67,0.72), mean=0.262, stddev=0.187], bias-{mean,stddev}=0.0005486,0.007485, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.003,0.004 0.004,0.005,0.005,0.008), mean=0.00188, stddev=0.00164], oderiv-count=73344
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.403175, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0245, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.33,0.35 0.36,0.37,0.39,0.41,0.42 0.43,0.44,0.46,0.46), mean=0.391, stddev=0.0274], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.16,0.18,0.19,0.21,0.22 0.23,0.24,0.25,0.30), mean=0.195, stddev=0.0235], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.16 0.18,0.22,0.34,0.50,0.56 0.60,0.64,0.65,0.67), mean=0.365, stddev=0.144], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02809, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.27,0.27 0.28,0.29,0.32,0.34,0.35 0.36,0.36,0.37,0.37), mean=0.317, stddev=0.0265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.27,0.28 0.29,0.29,0.32,0.34,0.35 0.36,0.36,0.38,0.39), mean=0.317, stddev=0.0249], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.009,0.02 0.04,0.08,0.22,0.42,0.53 0.60,0.67,0.70,0.79), mean=0.255, stddev=0.189], bias-{mean,stddev}=0.001071,0.006682, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.001,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00115, stddev=0.000803], oderiv-count=219072
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.403175, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02499, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.36 0.37,0.38,0.40,0.41,0.44 0.45,0.45,0.46,0.47), mean=0.399, stddev=0.0271], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.16,0.18,0.20,0.22,0.23 0.24,0.25,0.25,0.26), mean=0.198, stddev=0.0271], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.14,0.16 0.18,0.23,0.34,0.51,0.57 0.63,0.65,0.67,0.70), mean=0.371, stddev=0.149], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.02832, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.24,0.26 0.28,0.29,0.32,0.35,0.36 0.37,0.39,0.40,0.43), mean=0.319, stddev=0.035], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.28 0.29,0.30,0.32,0.34,0.35 0.35,0.36,0.36,0.39), mean=0.32, stddev=0.0212], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.002,0.005,0.02 0.04,0.08,0.21,0.43,0.54 0.60,0.66,0.69,0.75), mean=0.258, stddev=0.19], bias-{mean,stddev}=0.0008363,0.006554, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.18e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.0,-5.6,-5.4,-3.1 -1.8,-0.46,2.6,5.5,7.2 8.1,9.2,9.4,10), mean=2.48, stddev=3.51], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.81,-0.65,-0.50 -0.26,-0.03,0.44,0.90,1.2 1.4,1.8,1.8,1.9), mean=0.465, stddev=0.571]
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.403175, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02538, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.35,0.36 0.37,0.38,0.41,0.43,0.44 0.44,0.45,0.45,0.46), mean=0.405, stddev=0.03], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.16 0.17,0.18,0.20,0.22,0.24 0.24,0.25,0.26,0.26), mean=0.201, stddev=0.026], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.16,0.17 0.19,0.22,0.36,0.52,0.59 0.63,0.66,0.67,0.69), mean=0.378, stddev=0.149], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0301, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.25,0.29 0.30,0.31,0.33,0.36,0.39 0.40,0.41,0.42,0.44), mean=0.339, stddev=0.0371], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.29,0.31 0.31,0.32,0.34,0.36,0.37 0.37,0.38,0.38,0.43), mean=0.34, stddev=0.0231], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.003,0.008,0.02 0.04,0.08,0.24,0.45,0.58 0.66,0.71,0.72,0.76), mean=0.275, stddev=0.201], bias-{mean,stddev}=-0.001246,0.007004, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.403175, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0261, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.37 0.38,0.39,0.41,0.44,0.45 0.46,0.47,0.48,0.49), mean=0.416, stddev=0.0294], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.16 0.17,0.19,0.21,0.23,0.24 0.25,0.25,0.26,0.27), mean=0.207, stddev=0.027], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.17 0.19,0.24,0.36,0.53,0.60 0.65,0.67,0.72,0.72), mean=0.388, stddev=0.154], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.27,0.29 0.30,0.32,0.36,0.39,0.41 0.42,0.43,0.44,0.45), mean=0.357, stddev=0.0403], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.31 0.32,0.34,0.36,0.38,0.39 0.40,0.42,0.42,0.45), mean=0.358, stddev=0.0281], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.004,0.005,0.02 0.04,0.09,0.24,0.47,0.60 0.68,0.78,0.78,0.93), mean=0.288, stddev=0.214], bias-{mean,stddev}=0.0004426,0.008042, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.005,0.005 0.006,0.007,0.007,0.008), mean=0.00247, stddev=0.00237], oderiv-count=60672
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.403175, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02735, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.38,0.40 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.50), mean=0.437, stddev=0.027], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.16,0.17 0.18,0.19,0.22,0.24,0.25 0.26,0.27,0.29,0.33), mean=0.217, stddev=0.029], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.19 0.21,0.25,0.38,0.57,0.64 0.67,0.72,0.74,0.78), mean=0.406, stddev=0.163], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03358, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.29,0.32 0.33,0.34,0.38,0.41,0.43 0.44,0.45,0.46,0.47), mean=0.378, stddev=0.0387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.31,0.33 0.34,0.35,0.38,0.40,0.41 0.42,0.45,0.46,0.46), mean=0.379, stddev=0.0303], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.01,0.03 0.05,0.09,0.25,0.50,0.65 0.71,0.81,0.83,0.92), mean=0.305, stddev=0.227], bias-{mean,stddev}=0.0003624,0.009585, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.08e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.47,-0.43,-0.36,0.08 0.31,0.59,1.3,2.1,2.7 3.0,3.5,3.6,3.9), mean=1.41, stddev=0.93], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.10,-0.10,0.03 0.09,0.20,0.39,0.54,0.63 0.70,0.74,0.75,1.0), mean=0.378, stddev=0.211], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0046, stddev=0.00516], oderiv-count=16320
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.403175, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03019, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.43,0.44 0.44,0.45,0.49,0.50,0.52 0.52,0.53,0.54,0.55), mean=0.482, stddev=0.0288], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.22,0.24,0.26,0.28 0.29,0.30,0.32,0.33), mean=0.24, stddev=0.0291], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.18,0.20 0.23,0.27,0.43,0.61,0.70 0.74,0.77,0.83,0.87), mean=0.449, stddev=0.179], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03736, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.33,0.35 0.36,0.39,0.41,0.46,0.48 0.49,0.51,0.52,0.52), mean=0.42, stddev=0.0463], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.37 0.39,0.40,0.42,0.45,0.46 0.47,0.49,0.50,0.52), mean=0.422, stddev=0.0308], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.004,0.009,0.03 0.05,0.10,0.28,0.57,0.70 0.82,0.89,0.90,0.98), mean=0.341, stddev=0.25], bias-{mean,stddev}=-4.214e-05,0.01223, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=9.79e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.3,-7.0,-6.6,-5.0 -3.6,-2.3,-0.01,2.6,3.5 4.9,5.3,5.3,6.6), mean=-0.0539, stddev=2.93], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.8,-1.5,-1.1 -0.85,-0.38,0.43,1.1,1.4 1.7,2.0,2.0,2.6), mean=0.398, stddev=0.878]
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.403175, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.005, max-change=0.75, params-rms=0.04818, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.48,0.49 0.49,0.52,0.54,0.57,0.59 0.60,0.60,0.61,0.67), mean=0.544, stddev=0.0361], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.30,0.32 0.33,0.35,0.38,0.42,0.43 0.44,0.46,0.48,0.49), mean=0.383, stddev=0.0406], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.19 0.22,0.28,0.49,0.71,0.80 0.85,0.89,0.91,0.95), mean=0.501, stddev=0.216], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.05692, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.35,0.39 0.40,0.42,0.45,0.49,0.52 0.53,0.54,0.56,0.58), mean=0.453, stddev=0.0463], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.54,0.57 0.58,0.60,0.64,0.68,0.69 0.69,0.73,0.73,0.74), mean=0.642, stddev=0.0448], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.17,0.21 0.25,0.33,0.55,0.84,0.94 1.0,1.1,1.1,1.2), mean=0.586, stddev=0.266], bias-{mean,stddev}=-0.0005895,0.01853, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.62e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-10,-8.9,-4.7 -3.6,-2.1,2.3,6.1,7.8 9.0,11,13,14), mean=2.29, stddev=4.73], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.86,-0.72,-0.44 -0.14,0.16,0.56,0.90,1.2 1.4,1.5,1.5,1.8), mean=0.536, stddev=0.528]
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, params-rms=0.06185, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.57,0.61,0.63 0.64,0.66,0.69,0.74,0.75 0.76,0.78,0.83,0.85), mean=0.698, stddev=0.0487], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.42 0.42,0.44,0.49,0.53,0.56 0.57,0.60,0.61,0.63), mean=0.492, stddev=0.0527], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.18,0.23 0.29,0.38,0.61,0.88,1.0 1.1,1.2,1.2,1.2), mean=0.643, stddev=0.277], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00379547, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.02952, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.003,0.007,0.02 0.03,0.05,0.14,0.31,0.40 0.48,0.55,0.59,0.74), mean=0.183, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.9,1.9,2.0 2.0,2.0,2.0,2.1), mean=1.87, stddev=0.0857], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.64,1.1 1.2,1.4,1.8,2.2,2.4 2.5,2.6,2.7,2.7), mean=1.81, stddev=0.491], bias-{mean,stddev}=-1.466e-06,0.05053, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.03082, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.20 0.21,0.22,0.24,0.27,0.28 0.29,0.30,0.30,0.38), mean=0.245, stddev=0.03], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.30 0.31,0.33,0.35,0.37,0.38 0.39,0.39,0.40,0.40), mean=0.348, stddev=0.0251], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.11 0.14,0.18,0.30,0.47,0.51 0.54,0.57,0.60,0.61), mean=0.319, stddev=0.142], bias-{mean,stddev}=-0.0006391,0.0106, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.005,0.008,0.009 0.01,0.01,0.01,0.01), mean=0.00477, stddev=0.00343], oderiv-count=14144
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00379547, l2-regularize=0.0005, max-change=0.75, params-rms=0.0203, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.26,0.26,0.27), mean=0.229, stddev=0.0149], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.13,0.15,0.16,0.18,0.19 0.20,0.20,0.20,0.21), mean=0.161, stddev=0.0216], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.09 0.10,0.12,0.20,0.29,0.34 0.35,0.37,0.39,0.40), mean=0.212, stddev=0.088], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0189774, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.02484, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.003,0.008,0.02 0.04,0.05,0.12,0.26,0.34 0.39,0.45,0.49,0.60), mean=0.159, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.5,1.6,1.6,1.6 1.7,1.7,1.7,1.7), mean=1.58, stddev=0.0584], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,0.90,0.95 1.0,1.1,1.5,1.9,2.0 2.1,2.2,2.2,2.3), mean=1.53, stddev=0.383], bias-{mean,stddev}=-9.147e-09,0.01909, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0003,0.003,0.006 0.007,0.01,0.01,0.02), mean=0.00172, stddev=0.00264], oderiv-count=7616

LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.63254 tdnnf2.linear:4.83608 tdnnf2.affine:5.5228 tdnnf3.linear:4.12603 tdnnf3.affine:4.86341 tdnnf4.linear:3.9485 tdnnf4.affine:4.753 tdnnf5.linear:3.6715 tdnnf5.affine:4.1683 tdnnf6.linear:3.29467 tdnnf6.affine:3.7764 tdnnf7.linear:3.28359 tdnnf7.affine:3.63768 tdnnf8.linear:3.13627 tdnnf8.affine:3.59669 tdnnf9.linear:3.1988 tdnnf9.affine:3.62625 tdnnf10.linear:3.24839 tdnnf10.affine:3.85397 tdnnf11.linear:3.34024 tdnnf11.affine:4.06412 tdnnf12.linear:3.50127 tdnnf12.affine:4.29974 tdnnf13.linear:3.86475 tdnnf13.affine:4.78401 prefinal-l:4.36081 prefinal-chain.affine:5.1559 prefinal-chain.linear:5.59816 output.affine:15.352 prefinal-xent.affine:2.79214 prefinal-xent.linear:1.83749 output-xent.affine:12.6901 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.025 tdnnf2.linear:16.1722 tdnnf2.affine:16.0797 tdnnf3.linear:14.0831 tdnnf3.affine:14.5367 tdnnf4.linear:13.5008 tdnnf4.affine:14.0087 tdnnf5.linear:12.6037 tdnnf5.affine:12.5325 tdnnf6.linear:11.7742 tdnnf6.affine:11.4152 tdnnf7.linear:12.0088 tdnnf7.affine:11.5068 tdnnf8.linear:12.3987 tdnnf8.affine:11.6181 tdnnf9.linear:12.9005 tdnnf9.affine:11.8226 tdnnf10.linear:13.1293 tdnnf10.affine:11.9547 tdnnf11.linear:12.7516 tdnnf11.affine:11.7687 tdnnf12.linear:12.5819 tdnnf12.affine:11.7805 tdnnf13.linear:13.3889 tdnnf13.affine:12.4839 prefinal-l:12.3713 prefinal-chain.affine:18.5509 prefinal-chain.linear:27.5378 output.affine:122.371 prefinal-xent.affine:13.9939 prefinal-xent.linear:13.6583 output-xent.affine:95.1034 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.367806 tdnnf2.linear:0.297097 tdnnf2.affine:0.341467 tdnnf3.linear:0.290915 tdnnf3.affine:0.331284 tdnnf4.linear:0.290089 tdnnf4.affine:0.338045 tdnnf5.linear:0.288907 tdnnf5.affine:0.329374 tdnnf6.linear:0.277898 tdnnf6.affine:0.328858 tdnnf7.linear:0.272928 tdnnf7.affine:0.315577 tdnnf8.linear:0.252099 tdnnf8.affine:0.308911 tdnnf9.linear:0.248043 tdnnf9.affine:0.306197 tdnnf10.linear:0.24673 tdnnf10.affine:0.321621 tdnnf11.linear:0.261479 tdnnf11.affine:0.344513 tdnnf12.linear:0.277879 tdnnf12.affine:0.364691 tdnnf13.linear:0.287347 tdnnf13.affine:0.38219 prefinal-l:0.347183 prefinal-chain.affine:0.278506 prefinal-chain.linear:0.203765 output.affine:0.125462 prefinal-xent.affine:0.200325 prefinal-xent.linear:0.1347 output-xent.affine:0.133452 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 10:48:01 CST 2020, elapsed time 4 seconds
