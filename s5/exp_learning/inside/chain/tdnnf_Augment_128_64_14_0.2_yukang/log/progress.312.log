# nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/312.mdl && nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/311.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/312.mdl 
# Started at Mon Feb 24 13:39:48 CST 2020
#
nnet3-am-info exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/312.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 4040
prior-dimension: 0
# Nnet info follows.
left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1239, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,1.0,1.3,1.3 1.4,1.5,1.7,2.1,2.3 2.5,2.7,2.7,3.0), mean=1.8, stddev=0.373], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.52,0.54,0.59 0.64,0.76,1.3,1.7,2.0 2.3,2.3,2.4,3.0), mean=1.3, stddev=0.513], bias-{mean,stddev}=-0.09639,0.1627, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=8.8e+06, self-repaired-proportion=0.015625, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.01,0.02 0.03,0.05,0.09,0.17,0.21 0.23,0.26,0.29,0.33), mean=0.109, stddev=0.0702], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.06,0.09 0.10,0.19,0.33,0.48,0.65 0.70,0.73,0.79,0.82), mean=0.354, stddev=0.187], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.06,0.07 0.09,0.09,0.10,0.13), mean=0.0469, stddev=0.0197], oderiv-count=1.28895e+07
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=91904, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.006,0.01,0.02 0.03,0.05,0.10,0.17,0.21 0.24,0.28,0.29,0.34), mean=0.109, stddev=0.0716], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.06,0.08 0.10,0.12,0.19,0.24,0.26 0.28,0.29,0.30,0.30), mean=0.183, stddev=0.0621]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0126984, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1081, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.7), mean=1.73, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.63,0.65,0.68 0.73,0.78,0.86,0.94,0.98 1.0,1.1,1.1,1.3), mean=0.859, stddev=0.103], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1087, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.90,0.95,1.0 1.1,1.1,1.2,1.3,1.4 1.4,1.6,1.6,1.7), mean=1.22, stddev=0.141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.2,1.3,1.3 1.4,1.4,1.4,1.4), mean=1.23, stddev=0.0842], bias-{mean,stddev}=-0.1365,0.09554, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.69e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.68,0.75,0.80 0.86,0.93,1.1,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.08, stddev=0.173], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.36,0.37 0.41,0.43,0.52,0.58,0.59 0.60,0.61,0.61,0.63), mean=0.508, stddev=0.0736], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.004 0.004,0.01,0.01,0.01), mean=0.00301, stddev=0.00218], oderiv-count=1.20749e+07
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=84736, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.67,0.77,0.81 0.87,0.94,1.1,1.2,1.3 1.4,1.4,1.5,1.6), mean=1.09, stddev=0.174], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.2,1.3,1.4 1.4,1.5,1.7,2.0,2.1 2.2,2.3,2.4,2.5), mean=1.75, stddev=0.276]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0126984, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.1016, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.62, stddev=0.00352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.66,0.68 0.70,0.73,0.81,0.87,0.91 0.94,0.97,1.0,1.1), mean=0.808, stddev=0.0821], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.1139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.68,0.92,1.1 1.1,1.2,1.3,1.4,1.5 1.5,1.7,1.7,1.7), mean=1.28, stddev=0.172], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.2,1.3,1.4,1.4 1.4,1.4,1.5,1.5), mean=1.29, stddev=0.0791], bias-{mean,stddev}=-0.1608,0.08225, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=7.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.59,1.0,1.1 1.2,1.3,1.4,1.6,1.7 1.7,1.7,1.8,1.9), mean=1.41, stddev=0.214], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.39,0.40 0.42,0.47,0.52,0.56,0.58 0.58,0.60,0.60,0.61), mean=0.511, stddev=0.0566], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.004,0.005,0.005,0.02), mean=0.00184, stddev=0.00209], oderiv-count=1.16158e+07
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=77568, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.55,0.98,1.1 1.2,1.3,1.4,1.6,1.7 1.7,1.8,1.8,1.9), mean=1.42, stddev=0.217], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.91,1.3,1.8 1.9,2.0,2.2,2.6,2.7 2.7,2.9,3.0,3.3), mean=2.26, stddev=0.373]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0126984, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.09245, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.48, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.61,0.62 0.65,0.68,0.73,0.80,0.82 0.85,0.88,0.88,0.95), mean=0.736, stddev=0.0679], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.09857, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.64,0.70,0.97 0.99,1.0,1.1,1.2,1.3 1.3,1.3,1.3,1.4), mean=1.11, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.90,0.91,0.98 1.0,1.0,1.1,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.11, stddev=0.0896], bias-{mean,stddev}=-0.1742,0.07819, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=6.81e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.58,0.66,1.0 1.1,1.2,1.3,1.5,1.5 1.6,1.6,1.8,1.8), mean=1.31, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.35,0.35,0.39 0.43,0.45,0.50,0.54,0.56 0.57,0.57,0.58,0.60), mean=0.494, stddev=0.0563], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.002,0.005,0.005,0.02), mean=0.00156, stddev=0.00146], oderiv-count=9.8736e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=70400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.56,0.65,1.0 1.1,1.2,1.3,1.5,1.6 1.6,1.6,1.8,1.9), mean=1.33, stddev=0.22], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,1.0,1.1,1.7 1.8,1.9,2.2,2.4,2.6 2.7,2.8,2.9,3.6), mean=2.18, stddev=0.38]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0126984, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0857, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.37, stddev=0.00104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.56,0.58 0.60,0.63,0.68,0.73,0.76 0.79,0.81,0.84,0.96), mean=0.682, stddev=0.0657], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08146, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.61,0.65,0.80 0.83,0.85,0.91,0.98,1.0 1.1,1.1,1.1,1.2), mean=0.917, stddev=0.0968], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.74,0.76,0.79 0.83,0.85,0.92,0.97,1.0 1.0,1.1,1.1,1.1), mean=0.918, stddev=0.0774], bias-{mean,stddev}=-0.1393,0.05218, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=5.83e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.66,0.68,0.84 0.90,0.98,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.06, stddev=0.136], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.39,0.42 0.44,0.46,0.51,0.54,0.55 0.56,0.58,0.59,0.62), mean=0.501, stddev=0.0448], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.004), mean=0.00175, stddev=0.000385], oderiv-count=9.15283e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=63232, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.61,0.65,0.83 0.91,0.98,1.1,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.06, stddev=0.139], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.1,1.4 1.4,1.5,1.7,1.8,1.9 2.0,2.1,2.2,2.3), mean=1.67, stddev=0.215]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0126984, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08535, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.37, stddev=0.00162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.55,0.56,0.58 0.60,0.63,0.69,0.73,0.75 0.78,0.79,0.81,0.84), mean=0.68, stddev=0.0596], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07936, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.64,0.76 0.79,0.83,0.89,0.96,0.99 1.0,1.1,1.1,1.2), mean=0.893, stddev=0.0959], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.73,0.74,0.76 0.79,0.82,0.89,0.96,1.0 1.0,1.1,1.1,1.1), mean=0.894, stddev=0.0835], bias-{mean,stddev}=-0.1361,0.05442, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.92e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.64,0.71,0.79 0.87,0.93,1.0,1.1,1.2 1.3,1.3,1.3,1.4), mean=1.04, stddev=0.141], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.40,0.42 0.44,0.46,0.49,0.52,0.53 0.55,0.56,0.57,0.62), mean=0.488, stddev=0.0406], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.003), mean=0.00177, stddev=0.00027], oderiv-count=7.72282e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=56064, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.67,0.72,0.80 0.86,0.94,1.0,1.1,1.2 1.3,1.3,1.3,1.4), mean=1.05, stddev=0.144], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.4,1.5,1.6,1.8,2.0 2.0,2.1,2.1,2.3), mean=1.63, stddev=0.223]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0126984, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0851, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.36, stddev=0.00237], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.54,0.55,0.57 0.60,0.63,0.67,0.73,0.77 0.79,0.82,0.82,0.87), mean=0.678, stddev=0.0664], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07879, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.53,0.73 0.78,0.81,0.89,0.97,0.99 1.0,1.1,1.1,1.2), mean=0.885, stddev=0.108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.74,0.75,0.77 0.78,0.81,0.89,0.96,1.0 1.0,1.1,1.1,1.1), mean=0.888, stddev=0.0802], bias-{mean,stddev}=-0.1285,0.05258, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.72e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.56,0.78 0.89,0.95,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.03, stddev=0.15], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.34,0.42 0.43,0.45,0.48,0.51,0.53 0.56,0.57,0.57,0.57), mean=0.477, stddev=0.045], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.004), mean=0.00179, stddev=0.000278], oderiv-count=6.94323e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=48896, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.49,0.55,0.76 0.87,0.92,1.0,1.1,1.2 1.3,1.3,1.4,1.4), mean=1.02, stddev=0.157], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,1.1,1.3 1.4,1.5,1.6,1.8,1.9 2.1,2.3,2.3,2.4), mean=1.62, stddev=0.247]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0126984, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.0864, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.38, stddev=0.000772], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.54,0.57 0.58,0.62,0.68,0.76,0.78 0.82,0.86,0.91,0.94), mean=0.687, stddev=0.08], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07778, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.52,0.54,0.70 0.74,0.79,0.87,0.98,1.0 1.0,1.1,1.1,1.1), mean=0.873, stddev=0.112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.71,0.73,0.75 0.77,0.81,0.86,0.94,0.98 1.0,1.1,1.1,1.3), mean=0.876, stddev=0.0883], bias-{mean,stddev}=-0.1102,0.04987, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.73e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.47,0.58,0.78 0.86,0.93,1.0,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.04, stddev=0.178], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.32,0.38 0.41,0.43,0.44,0.47,0.49 0.51,0.52,0.54,0.55), mean=0.446, stddev=0.0406], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.003), mean=0.00171, stddev=0.000288], oderiv-count=5.86278e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=41728, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.54,0.77 0.86,0.91,1.0,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.04, stddev=0.181], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.2,1.3 1.4,1.5,1.7,2.0,2.1 2.3,2.6,2.6,2.6), mean=1.76, stddev=0.316]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0126984, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08814, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.41, stddev=0.00301], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.52,0.56 0.59,0.61,0.69,0.79,0.84 0.87,0.91,0.92,1.0), mean=0.698, stddev=0.0993], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07981, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.60,0.68 0.76,0.81,0.90,0.99,1.0 1.1,1.1,1.1,1.2), mean=0.895, stddev=0.118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.71,0.74,0.76 0.79,0.82,0.89,0.97,1.0 1.0,1.1,1.1,1.2), mean=0.899, stddev=0.0862], bias-{mean,stddev}=-0.08405,0.03819, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.23e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.72,0.72,0.90 0.94,0.99,1.1,1.2,1.3 1.4,1.4,1.4,1.8), mean=1.12, stddev=0.168], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.34,0.37,0.41 0.41,0.42,0.45,0.47,0.48 0.49,0.50,0.50,0.52), mean=0.447, stddev=0.0346], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003), mean=0.00175, stddev=0.000268], oderiv-count=4.94208e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=34560, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.70,0.72,0.89 0.93,0.98,1.1,1.2,1.3 1.4,1.4,1.5,1.9), mean=1.12, stddev=0.175], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.5 1.5,1.7,1.9,2.1,2.3 2.3,2.4,2.4,3.2), mean=1.89, stddev=0.278]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0126984, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08851, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.42, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.53,0.55 0.56,0.59,0.68,0.78,0.88 0.91,0.94,0.97,1.0), mean=0.699, stddev=0.114], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07987, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.50,0.61,0.71 0.75,0.82,0.90,0.99,1.0 1.0,1.1,1.1,1.1), mean=0.896, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.72,0.73,0.76 0.78,0.84,0.90,0.96,0.99 1.0,1.1,1.1,1.1), mean=0.9, stddev=0.0845], bias-{mean,stddev}=-0.0746,0.03465, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.64e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.72,0.80,0.86 0.90,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.4), mean=1.08, stddev=0.144], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.34,0.35,0.37 0.39,0.40,0.44,0.46,0.48 0.49,0.50,0.50,0.54), mean=0.433, stddev=0.0393], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.003), mean=0.00211, stddev=0.000285], oderiv-count=3.99923e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=27392, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.72,0.81,0.86 0.92,0.97,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.08, stddev=0.145], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.6,1.7,1.9,2.1,2.2 2.2,2.4,2.4,2.4), mean=1.89, stddev=0.205]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0126984, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08339, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.33, stddev=0.00192], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.47,0.50 0.51,0.55,0.63,0.77,0.83 0.87,0.90,0.91,1.0), mean=0.656, stddev=0.121], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07783, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.50,0.58,0.65 0.69,0.74,0.86,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.868, stddev=0.146], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.70,0.72,0.75 0.77,0.80,0.88,0.95,0.97 1.0,1.0,1.0,1.1), mean=0.877, stddev=0.0809], bias-{mean,stddev}=-0.07611,0.0372, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.95e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.68,0.78 0.81,0.83,0.95,1.0,1.1 1.2,1.2,1.2,1.5), mean=0.948, stddev=0.133], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.34,0.34 0.36,0.38,0.41,0.44,0.45 0.46,0.47,0.47,0.49), mean=0.41, stddev=0.0345], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.003,0.003 0.003,0.004,0.004,0.004), mean=0.00291, stddev=0.000321], oderiv-count=2.89709e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=20224, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.69,0.69,0.78 0.80,0.84,0.94,1.0,1.1 1.2,1.2,1.2,1.4), mean=0.942, stddev=0.129], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.5 1.6,1.6,1.8,2.0,2.2 2.3,2.3,2.3,2.4), mean=1.82, stddev=0.224]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0126984, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.07786, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.2,1.2,1.2,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.25, stddev=0.000913], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.43,0.44,0.46 0.49,0.51,0.59,0.72,0.78 0.84,0.85,0.88,0.92), mean=0.612, stddev=0.114], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.07513, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.51,0.59 0.64,0.68,0.80,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.833, stddev=0.167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.70,0.71,0.72 0.75,0.78,0.85,0.91,0.93 0.94,0.97,0.98,1.2), mean=0.847, stddev=0.0751], bias-{mean,stddev}=-0.07699,0.04507, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.55,0.61 0.65,0.69,0.79,0.88,0.93 0.99,1.1,1.1,1.2), mean=0.794, stddev=0.118], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.28 0.29,0.32,0.37,0.41,0.43 0.44,0.47,0.48,0.51), mean=0.367, stddev=0.0539], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.004,0.005,0.005 0.005,0.006,0.006,0.008), mean=0.00449, stddev=0.00064], oderiv-count=1.77235e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=13056, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.50,0.54,0.62 0.65,0.70,0.80,0.89,0.96 1.0,1.1,1.1,1.2), mean=0.804, stddev=0.124], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.3,1.4 1.4,1.5,1.8,2.1,2.2 2.3,2.5,2.5,2.6), mean=1.84, stddev=0.308]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0126984, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.08143, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.3, stddev=0.00134], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.47,0.49 0.52,0.54,0.62,0.74,0.80 0.84,0.89,0.93,0.97), mean=0.642, stddev=0.11], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.08223, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.62,0.67 0.74,0.80,0.91,1.1,1.1 1.1,1.2,1.2,1.2), mean=0.92, stddev=0.138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.77,0.79,0.82 0.84,0.86,0.92,0.98,1.0 1.1,1.1,1.1,1.1), mean=0.927, stddev=0.0766], bias-{mean,stddev}=-0.06513,0.06082, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.63,0.64,0.66 0.70,0.76,0.86,1.0,1.1 1.2,1.2,1.2,1.3), mean=0.886, stddev=0.155], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.24,0.27 0.29,0.32,0.37,0.41,0.43 0.45,0.46,0.47,0.51), mean=0.365, stddev=0.0576], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.007,0.007,0.008,0.009,0.009 0.009,0.01,0.01,0.01), mean=0.00793, stddev=0.000996], oderiv-count=599488
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.64,0.64,0.68 0.71,0.77,0.86,1.0,1.1 1.2,1.3,1.3,1.4), mean=0.896, stddev=0.155], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.7,1.7 1.9,2.0,2.3,2.7,2.9 3.0,3.0,3.1,3.2), mean=2.35, stddev=0.377]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0.0126984, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.005, max-change=0.75, params-rms=0.113, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.28, stddev=0.000846], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.73,0.73,0.78 0.79,0.83,0.90,0.97,1.0 1.0,1.0,1.1,1.1), mean=0.901, stddev=0.0781], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1705, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.1,1.1,1.1 1.2,1.3,1.4,1.4,1.5 1.5,1.5,1.5,1.6), mean=1.36, stddev=0.104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.8,1.8,1.9,2.0,2.0 2.1,2.1,2.1,2.2), mean=1.93, stddev=0.103], bias-{mean,stddev}=-0.02641,0.1212, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.81e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.4,1.5,1.6 1.7,1.8,1.8,1.9), mean=1.42, stddev=0.165], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.37 0.38,0.38,0.41,0.43,0.45 0.46,0.47,0.47,0.48), mean=0.41, stddev=0.0277], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.012, stddev=0.00176], oderiv-count=629952
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.4,1.5,1.6 1.7,1.7,1.8,1.9), mean=1.41, stddev=0.164], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.3,2.3,2.4 2.5,2.7,3.0,3.4,3.6 3.7,3.9,4.0,4.1), mean=3.04, stddev=0.416]
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, params-rms=0.2086, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.4,2.4,2.4 2.4,2.4,2.4,2.4,2.4 2.4,2.4,2.4,2.4), mean=2.36, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.4 1.5,1.5,1.6,1.8,1.9 1.9,2.0,2.0,2.0), mean=1.66, stddev=0.172], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-3e-08 -3e-08,-2e-08,-4e-09,2e-08,2e-08 3e-08,3e-08,3e-08,4e-08), mean=-1.61e-09, stddev=1.99e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.5,2.5 2.7,2.8,2.9,3.1,3.1 3.3,3.3,3.4,3.4), mean=2.89, stddev=0.207]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00154451, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.1807, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.16,0.25,0.50 0.76,1.0,1.5,1.7,1.9 1.9,2.0,2.1,2.7), mean=1.38, stddev=0.433], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(10,10,10,11 11,11,11,12,12 12,13,13,13), mean=11.5, stddev=0.638], bias-{mean,stddev}=0.001275,0.2619, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.1171, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.64,0.71,0.82 0.86,0.88,0.93,1.0,1.0 1.0,1.1,1.1,1.1), mean=0.933, stddev=0.0813], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.5 1.5,1.5,1.5,1.6), mean=1.32, stddev=0.0959], bias-{mean,stddev}=-0.01731,0.1902, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=4.11e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.50,0.51,0.59 0.65,0.69,0.84,1.0,1.2 1.3,1.4,1.4,1.5), mean=0.873, stddev=0.215], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.37 0.40,0.41,0.46,0.52,0.55 0.57,0.61,0.62,0.64), mean=0.468, stddev=0.0623], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.006 0.006,0.006,0.006,0.007,0.007 0.008,0.008,0.008,0.02), mean=0.00652, stddev=0.00119], oderiv-count=591872
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.50,0.50,0.57 0.64,0.67,0.83,1.0,1.2 1.3,1.3,1.4,1.5), mean=0.864, stddev=0.218], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.97,1.0 1.1,1.1,1.3,1.5,1.6 1.6,1.7,1.7,1.8), mean=1.33, stddev=0.19]
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.00154451, l2-regularize=0.0005, max-change=0.75, params-rms=0.1246, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.41, stddev=0.000345], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.78,0.78,0.82 0.86,0.89,0.98,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.991, stddev=0.107], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=4352, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-3e-08 -2e-08,-2e-08,1e-09,1e-08,2e-08 2e-08,2e-08,3e-08,3e-08), mean=-8.57e-10, stddev=1.66e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.3,1.4,1.5,1.5 1.6,1.6,1.6,1.7), mean=1.4, stddev=0.105]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.00772253, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.1979, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.08,0.31 0.79,1.1,1.5,2.0,2.2 2.3,2.5,2.6,4.0), mean=1.48, stddev=0.559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(12,12,12,12 12,12,13,13,13 13,13,13,13), mean=12.6, stddev=0.222], bias-{mean,stddev}=2.49e-08,0.1835, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0001,0.0002,0.0006,0.001,0.002 0.002,0.003,0.004,0.06), mean=0.000811, stddev=0.00121], oderiv-count=595136
nnet3-show-progress --use-gpu=no exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/311.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/312.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.42871 tdnnf2.linear:2.63483 tdnnf2.affine:3.06224 tdnnf3.linear:2.40231 tdnnf3.affine:3.50928 tdnnf4.linear:2.16247 tdnnf4.affine:3.04973 tdnnf5.linear:1.96104 tdnnf5.affine:2.24197 tdnnf6.linear:1.81671 tdnnf6.affine:2.07359 tdnnf7.linear:1.73172 tdnnf7.affine:2.02103 tdnnf8.linear:1.64002 tdnnf8.affine:1.89226 tdnnf9.linear:1.62158 tdnnf9.affine:1.89252 tdnnf10.linear:1.66034 tdnnf10.affine:1.96617 tdnnf11.linear:1.72617 tdnnf11.affine:2.08843 tdnnf12.linear:1.79948 tdnnf12.affine:2.21035 tdnnf13.linear:1.96465 tdnnf13.affine:2.52395 prefinal-l:2.71918 prefinal-chain.affine:2.93082 prefinal-chain.linear:2.55558 output.affine:5.99687 prefinal-xent.affine:1.66228 prefinal-xent.linear:1.0705 output-xent.affine:5.47322 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:20.9061 tdnnf2.linear:13.8358 tdnnf2.affine:14.0459 tdnnf3.linear:12.9988 tdnnf3.affine:14.7166 tdnnf4.linear:11.834 tdnnf4.affine:12.8001 tdnnf5.linear:10.97 tdnnf5.affine:10.5622 tdnnf6.linear:10.9249 tdnnf6.affine:10.2925 tdnnf7.linear:10.8928 tdnnf7.affine:10.207 tdnnf8.linear:11.0592 tdnnf8.affine:10.0495 tdnnf9.linear:11.2818 tdnnf9.affine:10.2689 tdnnf10.linear:11.3291 tdnnf10.affine:10.2651 tdnnf11.linear:10.6739 tdnnf11.affine:10.0086 tdnnf12.linear:9.96629 tdnnf12.affine:9.66888 tdnnf13.linear:10.4235 tdnnf13.affine:10.574 prefinal-l:10.2302 prefinal-chain.affine:15.4914 prefinal-chain.linear:18.8784 output.affine:93.3869 prefinal-xent.affine:10.8133 prefinal-xent.linear:11.2771 output-xent.affine:101.297 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.261058 tdnnf2.linear:0.191718 tdnnf2.affine:0.220586 tdnnf3.linear:0.187163 tdnnf3.affine:0.24545 tdnnf4.linear:0.184939 tdnnf4.affine:0.244903 tdnnf5.linear:0.179597 tdnnf5.affine:0.213517 tdnnf6.linear:0.16669 tdnnf6.affine:0.202049 tdnnf7.linear:0.15913 tdnnf7.affine:0.198386 tdnnf8.linear:0.148416 tdnnf8.affine:0.188417 tdnnf9.linear:0.143947 tdnnf9.affine:0.184425 tdnnf10.linear:0.146506 tdnnf10.affine:0.191522 tdnnf11.linear:0.161711 tdnnf11.affine:0.208838 tdnnf12.linear:0.180676 tdnnf12.affine:0.228671 tdnnf13.linear:0.188671 tdnnf13.affine:0.239035 prefinal-l:0.264133 prefinal-chain.affine:0.188896 prefinal-chain.linear:0.135051 output.affine:0.0640093 prefinal-xent.affine:0.15343 prefinal-xent.linear:0.0947722 output-xent.affine:0.0540217 ]
# Accounting: time=2 threads=1
# Ended (code 0) at Mon Feb 24 13:39:50 CST 2020, elapsed time 2 seconds
