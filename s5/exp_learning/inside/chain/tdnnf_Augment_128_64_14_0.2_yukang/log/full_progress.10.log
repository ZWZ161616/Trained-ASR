# nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/9.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/10.mdl 
# Started at Mon Feb 24 05:20:31 CST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/9.mdl exp_learning/inside/chain/tdnnf_Augment_128_64_14_0.2_yukang/10.mdl 
LOG (nnet3-show-progress[5.5.646~1-cdf2]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 169
right-context: 169
num-parameters: 989456
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=128
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=128 output-dim=128
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=128 output-dim=128
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=128 output-dim=64
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=64 output-dim=128
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=128 output-dim=128
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=128 output-dim=128
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.75, tdnn1.dropout), tdnnf2.dropout) input-dim=128 output-dim=128
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=128 output-dim=64
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=64 output-dim=128
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=128 output-dim=128
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=128 output-dim=128
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.75, tdnnf2.noop), tdnnf3.dropout) input-dim=128 output-dim=128
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=128 output-dim=64
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=64 output-dim=128
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=128 output-dim=128
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=128 output-dim=128
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.75, tdnnf3.noop), tdnnf4.dropout) input-dim=128 output-dim=128
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=128 output-dim=64
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=64 output-dim=128
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=128 output-dim=128
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=128 output-dim=128
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.75, tdnnf4.noop), tdnnf5.dropout) input-dim=128 output-dim=128
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=128 output-dim=64
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=64 output-dim=128
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=128 output-dim=128
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=128 output-dim=128
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.75, tdnnf5.noop), tdnnf6.dropout) input-dim=128 output-dim=128
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=128 output-dim=64
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=64 output-dim=128
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=128 output-dim=128
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=128 output-dim=128
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.75, tdnnf6.noop), tdnnf7.dropout) input-dim=128 output-dim=128
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=128 output-dim=64
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=64 output-dim=128
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=128 output-dim=128
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=128 output-dim=128
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.75, tdnnf7.noop), tdnnf8.dropout) input-dim=128 output-dim=128
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=128 output-dim=64
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=64 output-dim=128
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=128 output-dim=128
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=128 output-dim=128
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.75, tdnnf8.noop), tdnnf9.dropout) input-dim=128 output-dim=128
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=128 output-dim=64
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=64 output-dim=128
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=128 output-dim=128
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=128 output-dim=128
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.75, tdnnf9.noop), tdnnf10.dropout) input-dim=128 output-dim=128
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=128 output-dim=64
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=64 output-dim=128
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=128 output-dim=128
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=128 output-dim=128
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.75, tdnnf10.noop), tdnnf11.dropout) input-dim=128 output-dim=128
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=128 output-dim=64
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=64 output-dim=128
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=128 output-dim=128
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=128 output-dim=128
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.75, tdnnf11.noop), tdnnf12.dropout) input-dim=128 output-dim=128
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=128 output-dim=64
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=64 output-dim=128
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=128 output-dim=128
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=128 output-dim=128
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=128 output-dim=128
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.75, tdnnf12.noop), tdnnf13.dropout) input-dim=128 output-dim=128
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=128 output-dim=64
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=128 output-dim=128
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=128 output-dim=128
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=64 output-dim=64
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=64 output-dim=4040
output-node name=output input=output.affine dim=4040 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=64 output-dim=128
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=128 output-dim=128
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=128 output-dim=128
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=128 output-dim=64
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=64 output-dim=64
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=64 output-dim=4040
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=4040 output-dim=4040
output-node name=output-xent input=output-xent.log-softmax dim=4040 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.01087, bias-{mean,stddev}=0.03747,0.5704
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.03771, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.42 0.44,0.49,0.55,0.63,0.66 0.68,0.69,0.75,0.79), mean=0.553, stddev=0.0838], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.17 0.18,0.20,0.39,0.56,0.62 0.66,0.69,0.71,0.75), mean=0.393, stddev=0.167], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.13 0.15,0.21,0.42,0.74,0.91 0.99,1.1,1.1,1.2), mean=0.483, stddev=0.282], bias-{mean,stddev}=0.005734,0.03229, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.53e+05, self-repaired-proportion=4.97656, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.55,-0.44,-0.37,-0.28 -0.12,-0.05,0.17,0.56,0.93 1.2,1.4,1.5,1.8), mean=0.298, stddev=0.457], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.1,-1.0,-0.70 -0.49,-0.04,0.53,1.4,1.8 2.2,2.6,2.7,3.9), mean=0.661, stddev=0.945]
component name=tdnn1.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03502, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.50,0.51 0.52,0.53,0.56,0.58,0.60 0.63,0.63,0.63,0.64), mean=0.559, stddev=0.0351], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.20 0.21,0.23,0.27,0.32,0.34 0.36,0.38,0.40,0.42), mean=0.275, stddev=0.0516], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.22 0.25,0.31,0.49,0.71,0.79 0.89,0.93,0.94,0.98), mean=0.519, stddev=0.21], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.04053, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.38 0.40,0.42,0.46,0.49,0.51 0.53,0.55,0.55,0.57), mean=0.457, stddev=0.0437], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.41 0.42,0.43,0.45,0.49,0.51 0.52,0.54,0.54,0.54), mean=0.457, stddev=0.0344], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.01,0.02 0.05,0.11,0.33,0.62,0.77 0.84,0.92,0.95,1.0), mean=0.372, stddev=0.268], bias-{mean,stddev}=0.003321,0.03077, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=128
component name=tdnnf3.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03383, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.48,0.48 0.50,0.51,0.54,0.56,0.58 0.59,0.60,0.62,0.63), mean=0.54, stddev=0.0325], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.22,0.22 0.23,0.24,0.27,0.29,0.31 0.32,0.33,0.34,0.36), mean=0.269, stddev=0.0302], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.21,0.23 0.25,0.30,0.49,0.68,0.77 0.83,0.85,0.89,0.96), mean=0.504, stddev=0.198], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03985, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.36 0.38,0.41,0.45,0.49,0.50 0.51,0.55,0.55,0.57), mean=0.448, stddev=0.0467], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.40 0.41,0.42,0.45,0.48,0.49 0.50,0.51,0.52,0.53), mean=0.45, stddev=0.0325], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.01,0.02 0.05,0.12,0.31,0.61,0.75 0.84,0.92,0.94,0.98), mean=0.367, stddev=0.262], bias-{mean,stddev}=0.002584,0.02533, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.002,0.003 0.006,0.007,0.007,0.01), mean=0.00139, stddev=0.00208], oderiv-count=116352
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=128
component name=tdnnf4.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03281, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.46,0.47 0.48,0.49,0.52,0.55,0.57 0.58,0.58,0.59,0.62), mean=0.524, stddev=0.0338], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.21 0.23,0.24,0.26,0.29,0.30 0.31,0.33,0.33,0.34), mean=0.261, stddev=0.0297], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.22 0.26,0.31,0.47,0.66,0.74 0.79,0.85,0.88,0.92), mean=0.49, stddev=0.187], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03781, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.34,0.35 0.37,0.39,0.42,0.47,0.48 0.50,0.52,0.52,0.54), mean=0.425, stddev=0.0463], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.38 0.38,0.40,0.43,0.45,0.47 0.48,0.49,0.50,0.53), mean=0.426, stddev=0.0336], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.003,0.006,0.02 0.05,0.10,0.30,0.57,0.72 0.81,0.89,0.91,0.97), mean=0.346, stddev=0.251], bias-{mean,stddev}=0.001325,0.02169, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=128
component name=tdnnf5.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02985, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.43 0.44,0.45,0.47,0.50,0.52 0.53,0.53,0.53,0.55), mean=0.477, stddev=0.0294], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.24,0.26,0.27 0.29,0.29,0.30,0.31), mean=0.237, stddev=0.0276], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.18,0.19 0.21,0.27,0.43,0.60,0.69 0.74,0.78,0.79,0.81), mean=0.444, stddev=0.176], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03418, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.30,0.33 0.33,0.35,0.38,0.42,0.45 0.46,0.48,0.48,0.50), mean=0.384, stddev=0.0415], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.32,0.34 0.35,0.36,0.38,0.41,0.42 0.43,0.44,0.44,0.45), mean=0.386, stddev=0.0278], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.007,0.008,0.02 0.05,0.10,0.26,0.52,0.65 0.74,0.79,0.83,0.87), mean=0.312, stddev=0.228], bias-{mean,stddev}=0.003504,0.02349, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=2.69e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.71,-0.47,-0.18,0.006 0.52,1.2,2.0,3.0,4.3 5.0,5.6,5.9,7.0), mean=2.25, stddev=1.43], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.30,-0.30,-0.16 0.03,0.26,0.48,0.67,0.78 0.86,0.90,0.91,1.4), mean=0.449, stddev=0.312], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.002,0.002 0.003,0.004,0.005,0.007), mean=0.00083, stddev=0.00131], oderiv-count=79040
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=128
component name=tdnnf6.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02762, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.39 0.40,0.41,0.44,0.47,0.48 0.49,0.51,0.51,0.51), mean=0.441, stddev=0.0315], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.26,0.27,0.28,0.29), mean=0.22, stddev=0.0246], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.16,0.18 0.20,0.25,0.39,0.57,0.63 0.67,0.71,0.73,0.74), mean=0.411, stddev=0.162], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03328, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.32,0.32 0.33,0.34,0.37,0.41,0.43 0.44,0.45,0.46,0.47), mean=0.375, stddev=0.0379], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.34,0.35,0.37,0.40,0.41 0.42,0.43,0.43,0.48), mean=0.376, stddev=0.0269], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.008,0.02 0.04,0.09,0.26,0.50,0.65 0.71,0.79,0.82,0.87), mean=0.303, stddev=0.224], bias-{mean,stddev}=-0.0001559,0.01846, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=128
component name=tdnnf7.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02918, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.41,0.42 0.43,0.44,0.47,0.49,0.50 0.50,0.51,0.51,0.53), mean=0.466, stddev=0.0271], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.23,0.25,0.26 0.28,0.28,0.29,0.30), mean=0.232, stddev=0.0256], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.17,0.18 0.21,0.25,0.40,0.60,0.66 0.72,0.77,0.80,0.83), mean=0.431, stddev=0.179], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03444, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.32 0.33,0.35,0.39,0.42,0.44 0.47,0.49,0.50,0.52), mean=0.387, stddev=0.0453], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.32,0.34 0.35,0.36,0.38,0.42,0.43 0.44,0.44,0.44,0.46), mean=0.389, stddev=0.0291], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.005,0.01,0.02 0.05,0.10,0.26,0.53,0.66 0.75,0.80,0.82,0.86), mean=0.314, stddev=0.23], bias-{mean,stddev}=-0.002895,0.0244, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=3.54e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.59,0.65,1.0,2.2 2.6,2.9,3.7,4.6,4.9 5.2,5.5,5.6,6.6), mean=3.72, stddev=1.04], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.07,0.23 0.26,0.32,0.47,0.59,0.69 0.76,0.86,0.87,1.1), mean=0.471, stddev=0.17], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0.0009,0.002,0.003,0.03), mean=0.000377, stddev=0.00292], oderiv-count=61120
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=128
component name=tdnnf8.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02633, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.37,0.38 0.39,0.40,0.42,0.44,0.45 0.46,0.46,0.47,0.48), mean=0.421, stddev=0.0237], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.18,0.19,0.21,0.23,0.24 0.25,0.27,0.27,0.29), mean=0.209, stddev=0.025], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.18,0.22,0.37,0.54,0.60 0.66,0.70,0.73,0.74), mean=0.388, stddev=0.165], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03182, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.30 0.32,0.33,0.36,0.39,0.40 0.41,0.42,0.43,0.45), mean=0.358, stddev=0.0332], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.31,0.31 0.32,0.33,0.36,0.38,0.40 0.41,0.44,0.44,0.44), mean=0.359, stddev=0.0309], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.004,0.008,0.02 0.04,0.08,0.24,0.49,0.62 0.68,0.76,0.79,0.82), mean=0.288, stddev=0.215], bias-{mean,stddev}=-0.00147,0.02066, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.002,0.003 0.005,0.006,0.006,0.02), mean=0.00123, stddev=0.00257], oderiv-count=20864
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=128
component name=tdnnf9.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02615, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.37,0.37 0.38,0.39,0.42,0.44,0.45 0.46,0.46,0.47,0.47), mean=0.417, stddev=0.0287], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.17 0.17,0.18,0.21,0.23,0.24 0.25,0.26,0.27,0.30), mean=0.208, stddev=0.0266], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.17,0.23,0.36,0.54,0.61 0.65,0.69,0.72,0.74), mean=0.385, stddev=0.165], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.30 0.31,0.33,0.35,0.38,0.40 0.41,0.43,0.43,0.45), mean=0.354, stddev=0.0334], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.30,0.31 0.32,0.33,0.35,0.38,0.39 0.40,0.41,0.41,0.43), mean=0.355, stddev=0.029], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.003,0.005,0.02 0.04,0.08,0.24,0.47,0.61 0.68,0.76,0.77,0.83), mean=0.285, stddev=0.213], bias-{mean,stddev}=0.001723,0.01816, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0005,0.001,0.002 0.002,0.002,0.002,0.004), mean=0.000677, stddev=0.00073], oderiv-count=129600
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=128
component name=tdnnf10.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02626, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.37,0.38 0.38,0.39,0.42,0.44,0.45 0.46,0.46,0.47,0.48), mean=0.419, stddev=0.0267], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.17 0.18,0.19,0.21,0.23,0.24 0.25,0.26,0.26,0.29), mean=0.209, stddev=0.0235], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.18,0.23,0.37,0.53,0.60 0.65,0.71,0.73,0.75), mean=0.387, stddev=0.163], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03245, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.31,0.32 0.33,0.34,0.36,0.39,0.41 0.42,0.42,0.42,0.49), mean=0.366, stddev=0.0318], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.31,0.32 0.33,0.34,0.37,0.39,0.40 0.41,0.41,0.42,0.45), mean=0.366, stddev=0.0286], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.006,0.009,0.02 0.04,0.08,0.24,0.49,0.63 0.71,0.78,0.81,0.88), mean=0.293, stddev=0.221], bias-{mean,stddev}=0.0008393,0.01876, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0009,0.003,0.003 0.004,0.004,0.004,0.005), mean=0.00131, stddev=0.00142], oderiv-count=34240
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=128
component name=tdnnf11.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02678, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.38,0.38 0.39,0.40,0.43,0.45,0.46 0.47,0.48,0.48,0.49), mean=0.428, stddev=0.0278], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.17 0.18,0.19,0.21,0.24,0.25 0.26,0.26,0.27,0.31), mean=0.213, stddev=0.026], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.15 0.17,0.21,0.38,0.55,0.63 0.67,0.70,0.73,0.78), mean=0.393, stddev=0.171], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03334, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.32 0.33,0.34,0.37,0.41,0.43 0.44,0.46,0.46,0.49), mean=0.375, stddev=0.0406], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.32,0.33 0.34,0.35,0.37,0.40,0.41 0.42,0.43,0.43,0.44), mean=0.376, stddev=0.0273], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.006,0.008,0.02 0.04,0.09,0.24,0.50,0.65 0.74,0.83,0.86,0.88), mean=0.3, stddev=0.228], bias-{mean,stddev}=-0.0004274,0.01854, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.42e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-1.4,-0.74,-0.18 0.32,0.71,1.6,2.8,3.3 3.6,4.1,4.5,5.0), mean=1.76, stddev=1.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.14,-0.08,0.10,0.15 0.25,0.31,0.44,0.54,0.63 0.68,0.73,0.74,0.76), mean=0.43, stddev=0.158], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.001,0.002,0.003 0.003,0.003,0.004,0.004), mean=0.00128, stddev=0.00113], oderiv-count=75840
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=128
component name=tdnnf12.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.02884, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.41,0.42 0.42,0.43,0.46,0.48,0.51 0.52,0.53,0.54,0.56), mean=0.46, stddev=0.0329], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.23,0.25,0.27 0.27,0.29,0.29,0.35), mean=0.229, stddev=0.0292], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.16 0.19,0.23,0.40,0.60,0.67 0.71,0.78,0.81,0.82), mean=0.423, stddev=0.184], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.0359, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.32,0.32 0.35,0.37,0.40,0.43,0.46 0.47,0.49,0.50,0.53), mean=0.404, stddev=0.0427], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.36 0.37,0.38,0.40,0.43,0.45 0.46,0.48,0.48,0.49), mean=0.405, stddev=0.0321], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.03 0.05,0.10,0.26,0.54,0.69 0.78,0.86,0.88,0.94), mean=0.325, stddev=0.244], bias-{mean,stddev}=0.0001916,0.01977, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=128
component name=tdnnf13.linear type=TdnnComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, orthonormal-constraint=-1, time-offsets=-14,0, linear-params-rms=0.03008, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.43 0.44,0.45,0.48,0.51,0.51 0.52,0.52,0.52,0.53), mean=0.48, stddev=0.0289], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.19 0.20,0.21,0.24,0.26,0.28 0.29,0.30,0.30,0.31), mean=0.239, stddev=0.0301], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.17,0.18 0.22,0.25,0.43,0.61,0.69 0.75,0.78,0.82,0.87), mean=0.445, stddev=0.184], has-bias=false, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, time-offsets=0,14, linear-params-rms=0.03869, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.34,0.36 0.38,0.40,0.44,0.47,0.49 0.50,0.51,0.51,0.53), mean=0.436, stddev=0.042], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.37,0.37 0.40,0.41,0.44,0.46,0.48 0.49,0.51,0.51,0.52), mean=0.436, stddev=0.0324], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.01,0.03 0.05,0.11,0.30,0.58,0.74 0.82,0.91,0.93,1.0), mean=0.353, stddev=0.258], bias-{mean,stddev}=-0.0005575,0.02206, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05, count=1.63e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.8,-2.6,-2.0 -1.5,0.06,1.7,4.3,5.2 6.1,6.3,6.4,9.2), mean=1.96, stddev=2.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.39,-0.28,-0.18,-0.09 -0.009,0.17,0.43,0.73,0.94 1.1,1.1,1.2,1.4), mean=0.47, stddev=0.356]
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=128, block-dim=128, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=128
component name=prefinal-l type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.005, max-change=0.75, params-rms=0.02432, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.24,0.25 0.25,0.26,0.28,0.29,0.30 0.30,0.30,0.31,0.31), mean=0.275, stddev=0.0181], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.16 0.17,0.17,0.19,0.21,0.22 0.23,0.23,0.24,0.25), mean=0.193, stddev=0.0212], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.09 0.10,0.13,0.24,0.36,0.41 0.44,0.47,0.48,0.52), mean=0.249, stddev=0.116], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.04484, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.29,0.30 0.31,0.32,0.36,0.39,0.40 0.42,0.42,0.43,0.46), mean=0.357, stddev=0.0368], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.41,0.45 0.46,0.47,0.51,0.54,0.56 0.56,0.58,0.60,0.60), mean=0.506, stddev=0.0414], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.14,0.16 0.19,0.23,0.42,0.67,0.77 0.83,0.88,0.90,0.93), mean=0.456, stddev=0.222], bias-{mean,stddev}=0.0005579,0.03278, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-chain.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, params-rms=0.03635, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.37,0.37 0.38,0.38,0.41,0.44,0.44 0.45,0.45,0.45,0.47), mean=0.41, stddev=0.0259], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.24,0.25,0.29,0.32,0.34 0.35,0.38,0.40,0.43), mean=0.288, stddev=0.0415], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.12,0.13 0.16,0.20,0.34,0.53,0.61 0.65,0.70,0.71,0.75), mean=0.373, stddev=0.173], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.014148, l2-regularize=5e-05, max-change=1.5, linear-params-rms=0.02166, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.0006,0.001,0.01 0.03,0.04,0.11,0.23,0.29 0.34,0.38,0.40,0.57), mean=0.139, stddev=0.104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.3,1.4,1.4,1.5 1.5,1.6,1.6,1.6), mean=1.37, stddev=0.0833], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.48,0.63 0.70,0.78,1.2,1.8,1.9 2.0,2.1,2.1,2.2), mean=1.29, stddev=0.486], bias-{mean,stddev}=-1.116e-05,0.02669, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=128, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, linear-params-rms=0.03645, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.22,0.23 0.24,0.26,0.29,0.32,0.33 0.34,0.35,0.35,0.44), mean=0.289, stddev=0.0356], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.35,0.37 0.37,0.39,0.41,0.43,0.44 0.45,0.46,0.46,0.49), mean=0.411, stddev=0.0287], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.14 0.16,0.22,0.36,0.54,0.60 0.64,0.67,0.69,0.74), mean=0.378, stddev=0.164], bias-{mean,stddev}=0.005583,0.02495, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=128, self-repair-scale=1e-05
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=128, block-dim=128, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=prefinal-xent.linear type=LinearComponent, input-dim=128, output-dim=64, learning-rate=0.014148, l2-regularize=0.0005, max-change=0.75, params-rms=0.02713, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.26,0.27 0.27,0.28,0.31,0.33,0.33 0.34,0.34,0.35,0.35), mean=0.306, stddev=0.0224], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.18 0.19,0.20,0.22,0.23,0.24 0.24,0.25,0.25,0.29), mean=0.216, stddev=0.0211], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.11 0.13,0.16,0.26,0.39,0.45 0.48,0.50,0.50,0.52), mean=0.282, stddev=0.12], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=32, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=64, block-dim=64, epsilon=0.001, target-rms=1, count=0, test-mode=false
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=64, output-dim=4040, learning-rate=0.0707399, l2-regularize=5e-05, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.02413, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.01 0.03,0.05,0.13,0.26,0.33 0.38,0.43,0.45,0.60), mean=0.155, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.5,1.5,1.6,1.6 1.6,1.7,1.7,1.7), mean=1.53, stddev=0.0769], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.65,0.68,0.75 0.79,0.88,1.4,2.0,2.1 2.2,2.3,2.3,2.3), mean=1.45, stddev=0.512], bias-{mean,stddev}=-1.331e-08,0.02121, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=4040

LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.33889 tdnnf2.linear:4.48255 tdnnf2.affine:5.20018 tdnnf3.linear:4.33 tdnnf3.affine:5.10911 tdnnf4.linear:4.20003 tdnnf4.affine:4.84638 tdnnf5.linear:3.82017 tdnnf5.affine:4.38303 tdnnf6.linear:3.53473 tdnnf6.affine:4.26452 tdnnf7.linear:3.73548 tdnnf7.affine:4.41701 tdnnf8.linear:3.37078 tdnnf8.affine:4.07915 tdnnf9.linear:3.34734 tdnnf9.affine:4.0306 tdnnf10.linear:3.3607 tdnnf10.affine:4.15939 tdnnf11.linear:3.42741 tdnnf11.affine:4.27321 tdnnf12.linear:3.69118 tdnnf12.affine:4.60112 tdnnf13.linear:3.84973 tdnnf13.affine:4.95831 prefinal-l:2.2008 prefinal-chain.affine:4.07563 prefinal-chain.linear:3.29016 output.affine:11.1439 prefinal-xent.affine:3.31165 prefinal-xent.linear:2.45528 output-xent.affine:12.3457 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:20.5997 tdnnf2.linear:17.7984 tdnnf2.affine:16.3123 tdnnf3.linear:15.6424 tdnnf3.affine:14.3703 tdnnf4.linear:13.5996 tdnnf4.affine:12.7624 tdnnf5.linear:12.4543 tdnnf5.affine:11.8979 tdnnf6.linear:12.0263 tdnnf6.affine:11.715 tdnnf7.linear:13.258 tdnnf7.affine:13.0238 tdnnf8.linear:12.5016 tdnnf8.affine:11.847 tdnnf9.linear:12.5878 tdnnf9.affine:11.8415 tdnnf10.linear:13.0556 tdnnf10.affine:12.0566 tdnnf11.linear:13.5745 tdnnf11.affine:12.6528 tdnnf12.linear:14.3796 tdnnf12.affine:13.1655 tdnnf13.linear:14.1037 tdnnf13.affine:13.2411 prefinal-l:9.06953 prefinal-chain.affine:16.0965 prefinal-chain.linear:19.3164 output.affine:53.2167 prefinal-xent.affine:12.8242 prefinal-xent.linear:14.4529 output-xent.affine:77.6233 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.311867 tdnnf2.linear:0.25213 tdnnf2.affine:0.319091 tdnnf3.linear:0.276482 tdnnf3.affine:0.355855 tdnnf4.linear:0.308017 tdnnf4.affine:0.377254 tdnnf5.linear:0.30615 tdnnf5.affine:0.367747 tdnnf6.linear:0.295199 tdnnf6.affine:0.365585 tdnnf7.linear:0.28104 tdnnf7.affine:0.330119 tdnnf8.linear:0.270674 tdnnf8.affine:0.342995 tdnnf9.linear:0.267295 tdnnf9.affine:0.340496 tdnnf10.linear:0.25918 tdnnf10.affine:0.346346 tdnnf11.linear:0.2545 tdnnf11.affine:0.340024 tdnnf12.linear:0.25914 tdnnf12.affine:0.352317 tdnnf13.linear:0.274797 tdnnf13.affine:0.377325 prefinal-l:0.244581 prefinal-chain.affine:0.2549 prefinal-chain.linear:0.172196 output.affine:0.218965 prefinal-xent.affine:0.261187 prefinal-xent.linear:0.170763 output-xent.affine:0.163478 ]
LOG (nnet3-show-progress[5.5.646~1-cdf2]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=4 threads=1
# Ended (code 0) at Mon Feb 24 05:20:35 CST 2020, elapsed time 4 seconds
